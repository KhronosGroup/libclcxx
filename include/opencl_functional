//
// Copyright (c) 2015-2016 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
//

#pragma once

#include <__ocl_config.h>
#include <__ocl_marker_type.h>
#include <opencl_type_traits>

namespace cl
{

template <class T>
T* addressof(T& arg)
{
    return reinterpret_cast<T*>(
        &const_cast<typename __details::__copy_as_helper<T, char>::type&>(
        reinterpret_cast<typename __details::__copy_as_helper<T, const volatile char>::type&> (arg)));
}

template <class Fun, class... Args>
result_of_t<Fun&&(Args&&...)> invoke(Fun&& f, Args&&... args)
{
    return __details::__invoke(forward<Fun>(f), forward<Args>(args)...);
}

namespace __details
{

#define _CHECK_IF_HAS_TYPEDEF(typedef_name) \
    template <class T> struct __has_##typedef_name { \
        template <typename U> static true_type helper(typename U::typedef_name*); \
        template <typename> static false_type helper(...); \
        static constexpr bool value = decltype(helper<T>(nullptr))::value; };

_CHECK_IF_HAS_TYPEDEF(type)
_CHECK_IF_HAS_TYPEDEF(result_type)
_CHECK_IF_HAS_TYPEDEF(argument_type)
_CHECK_IF_HAS_TYPEDEF(first_argument_type)
_CHECK_IF_HAS_TYPEDEF(second_argument_type)

#undef _CHECK_IF_HAS_TYPEDEF


template <class T>
class __reference_wrapper_base
{
public:
    typedef T type;

    __reference_wrapper_base(T& t) __NOEXCEPT : my_ref(addressof(t)) { }
    __reference_wrapper_base(T&& t) = delete;
    __reference_wrapper_base(__reference_wrapper_base const& other) __NOEXCEPT = default;

    __reference_wrapper_base& operator = (__reference_wrapper_base const& other) __NOEXCEPT = default;

    operator T& () const __NOEXCEPT { return *my_ref; }
    T& get() const __NOEXCEPT { return *my_ref; }

private:
    T* my_ref;
};

/// \brief struct which has member typedef 'result_type' if it is present in given type T
///
template <class T, bool = __has_result_type<result_of<T>>::value>
struct __propagate_result_type { using result_type = typename T::result_type; };

template <class T>
struct __propagate_result_type<T, false> { };

/// \brief struct which has member typedef 'argument_type' if it is present in given type T
///
template <class T, bool = __has_argument_type<T>::value>
struct __propagate_argument_type { using argument_type = typename T::argument_type; };

template <class T>
struct __propagate_argument_type<T, false> { };

/// \brief struct which has member typedefs 'first_argument_type' and 'second_argument_type' if they are present in given type T
///
template <class T, bool = __has_first_argument_type<T>::value && __has_second_argument_type<T>::value>
struct __propagate_first_and_second_argument_types { using first_argument_type = typename T::first_argument_type; using second_argument_type = typename T::second_argument_type; };

template <class T>
struct __propagate_first_and_second_argument_types<T, false> { };


/// \brief struct which has member typedefs 'argument_type' and/or 'first_argument_type' and 'second_argument_type' depending on requirements specified in C++ 14 spec
///
template <class T> struct __get_typedefs :
    public __propagate_result_type<T>,                      // - if T is a class type and the qualified-id T::result_type is valid and denotes a type (14.8.2), then result_type shall be a synonym for T::result_type;
    public __propagate_argument_type<T>,                    // - a class type where the qualified-id T::argument_type is valid and denotes a type (14.8.2); the type T1 is T::argument_type.
    public __propagate_first_and_second_argument_types<T>   // - a class type where the qualified-ids T::first_argument_type and T::second_argument_type are both valid and both denote types (14.8.2);
                                                            //   the type T1 is T::first_argument_type and the type T2 is T::second_argument_type.
{ };

// - a function type or a pointer to function type taking one argument of type T1
template <class Ret, class Arg> struct __get_typedefs<Ret(Arg)>                                   { using result_type = Ret; using argument_type = Arg; };
template <class Ret, class Arg> struct __get_typedefs<Ret(*)(Arg)>                                { using result_type = Ret; using argument_type = Arg; };

// - a function type or a pointer to function type taking two arguments of types T1 and T2
template <class Ret, class Arg1, class Arg2> struct __get_typedefs<Ret(Arg1,Arg2)>                { using result_type = Ret; using first_argument_type = Arg1; using second_argument_type = Arg2; };
template <class Ret, class Arg1, class Arg2> struct __get_typedefs<Ret(*)(Arg1,Arg2)>             { using result_type = Ret; using first_argument_type = Arg1; using second_argument_type = Arg2; };

// - a pointer to member function R T0::f cv (where cv represents the member function's cv-qualifiers); the type T1 is cv T0*
template <class C, class Ret> struct __get_typedefs<Ret(C::*)()>                                  { using result_type = Ret; using argument_type = C*; };
template <class C, class Ret> struct __get_typedefs<Ret(C::*)() const>                            { using result_type = Ret; using argument_type = const C*; };
template <class C, class Ret> struct __get_typedefs<Ret(C::*)() volatile>                         { using result_type = Ret; using argument_type = volatile C*; };
template <class C, class Ret> struct __get_typedefs<Ret(C::*)() const volatile>                   { using result_type = Ret; using argument_type = const volatile C*; };

// - a pointer to member function R T0::f(T2) cv (where cv represents the member function's cv-qualifiers); the type T1 is cv T0*
template <class C, class Ret, class Arg1> struct __get_typedefs<Ret(C::*)(Arg1)>                  { using result_type = Ret; using first_argument_type = C*; using second_argument_type = Arg1; };
template <class C, class Ret, class Arg1> struct __get_typedefs<Ret(C::*)(Arg1) const>            { using result_type = Ret; using first_argument_type = const C*; using second_argument_type = Arg1; };
template <class C, class Ret, class Arg1> struct __get_typedefs<Ret(C::*)(Arg1) volatile>         { using result_type = Ret; using first_argument_type = volatile C*; using second_argument_type = Arg1; };
template <class C, class Ret, class Arg1> struct __get_typedefs<Ret(C::*)(Arg1) const volatile>   { using result_type = Ret; using first_argument_type = const volatile C*; using second_argument_type = Arg1; };

} //end namespace __details

template <class T>
class reference_wrapper : public __details::__reference_wrapper_base<T>, public __details::__get_typedefs<T>
{
    static_assert(!is_marker_type<T>::value, "Due to language restrictions no reference_wrapper can be created for any marker type (reference_wrapper must be trivial and hence cannot contains marker type member).");
public:
    using __details::__reference_wrapper_base<T>::__reference_wrapper_base;
    using __details::__reference_wrapper_base<T>::operator T&;

    template <typename... Args>
    result_of_t<T&(Args&&...)> operator ()(Args&&... args) const
    {
        return __details::__invoke(__details::__reference_wrapper_base<T>::get(), forward<Args>(args)...);
    }
};

template <class T>
reference_wrapper<T> ref(T& t) __NOEXCEPT
{
    return reference_wrapper<T>(t);
}

template<class T>
reference_wrapper<T> ref(reference_wrapper<T> t) __NOEXCEPT
{
    return ref(t.get());
}

template <class T>
reference_wrapper<const T> cref(T const& t) __NOEXCEPT
{
    return reference_wrapper<const T>(t);
}

template<class T>
reference_wrapper<const T> cref(reference_wrapper<T> t) __NOEXCEPT
{
    return cref(t.get());
}

} //end namespace cl
