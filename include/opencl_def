//
// Copyright (c) 2015-2016 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
//

#pragma once

#define __OPENCL_CPP_VERSION__ 100

#define NULL nullptr

typedef __INT8_TYPE__   int8_t   __attribute__((aligned(1)));
typedef __UINT8_TYPE__  uint8_t  __attribute__((aligned(1)));
typedef __INT16_TYPE__  int16_t  __attribute__((aligned(2)));
typedef __UINT16_TYPE__ uint16_t __attribute__((aligned(2)));
typedef __INT32_TYPE__  int32_t  __attribute__((aligned(4)));
typedef __UINT32_TYPE__ uint32_t __attribute__((aligned(4)));
typedef __INT64_TYPE__  int64_t  __attribute__((aligned(8)));
typedef __UINT64_TYPE__ uint64_t __attribute__((aligned(8)));

typedef int8_t   cl_char;
typedef uint8_t  cl_uchar;
typedef int16_t  cl_short;
typedef uint16_t cl_ushort;
typedef int32_t  cl_int;
typedef uint32_t cl_uint;
typedef int64_t  cl_long;
typedef uint64_t cl_ulong;

#ifdef cl_khr_fp16
typedef half cl_half     __attribute__((aligned(2)));
#endif
typedef float cl_float   __attribute__((aligned(4)));
#ifdef cl_khr_fp64
typedef double cl_double __attribute__((aligned(8)));
#endif


/* scalar types  */
typedef unsigned char   uchar;
typedef unsigned short  ushort;
typedef unsigned int    uint;
typedef unsigned long   ulong;
typedef __SIZE_TYPE__   size_t;

typedef __INT32_TYPE__ int32_t;
typedef __UINT32_TYPE__ uint32_t;

typedef __INT64_TYPE__ int64_t;
typedef __UINT64_TYPE__ uint64_t;

#if __INTPTR_WIDTH__ == 32
typedef int32_t intptr_t;
typedef uint32_t uintptr_t;
#elif __INTPTR_WIDTH__ == 64
typedef int64_t intptr_t;
typedef uint64_t uintptr_t;
#else
#error "Cannot match pointer size to architecture"
#endif

typedef __PTRDIFF_TYPE__ ptrdiff_t;
typedef decltype(nullptr) nullptr_t;

namespace cl
{

using ::intptr_t;
using ::uintptr_t;
using ::ptrdiff_t;
using ::nullptr_t;
using ::size_t;

}

typedef bool   bool2    __attribute__((ext_vector_type(2)));
typedef bool   bool3    __attribute__((ext_vector_type(3)));
typedef bool   bool4    __attribute__((ext_vector_type(4)));
typedef bool   bool8    __attribute__((ext_vector_type(8)));
typedef bool   bool16   __attribute__((ext_vector_type(16)));
typedef char   char2    __attribute__((ext_vector_type(2)));
typedef char   char3    __attribute__((ext_vector_type(3)));
typedef char   char4    __attribute__((ext_vector_type(4)));
typedef char   char8    __attribute__((ext_vector_type(8)));
typedef char   char16   __attribute__((ext_vector_type(16)));
typedef uchar  uchar2   __attribute__((ext_vector_type(2)));
typedef uchar  uchar3   __attribute__((ext_vector_type(3)));
typedef uchar  uchar4   __attribute__((ext_vector_type(4)));
typedef uchar  uchar8   __attribute__((ext_vector_type(8)));
typedef uchar  uchar16  __attribute__((ext_vector_type(16)));
typedef short  short2   __attribute__((ext_vector_type(2)));
typedef short  short3   __attribute__((ext_vector_type(3)));
typedef short  short4   __attribute__((ext_vector_type(4)));
typedef short  short8   __attribute__((ext_vector_type(8)));
typedef short  short16  __attribute__((ext_vector_type(16)));
typedef ushort ushort2  __attribute__((ext_vector_type(2)));
typedef ushort ushort3  __attribute__((ext_vector_type(3)));
typedef ushort ushort4  __attribute__((ext_vector_type(4)));
typedef ushort ushort8  __attribute__((ext_vector_type(8)));
typedef ushort ushort16 __attribute__((ext_vector_type(16)));
typedef int    int2     __attribute__((ext_vector_type(2)));
typedef int    int3     __attribute__((ext_vector_type(3)));
typedef int    int4     __attribute__((ext_vector_type(4)));
typedef int    int8     __attribute__((ext_vector_type(8)));
typedef int    int16    __attribute__((ext_vector_type(16)));
typedef uint   uint2    __attribute__((ext_vector_type(2)));
typedef uint   uint3    __attribute__((ext_vector_type(3)));
typedef uint   uint4    __attribute__((ext_vector_type(4)));
typedef uint   uint8    __attribute__((ext_vector_type(8)));
typedef uint   uint16   __attribute__((ext_vector_type(16)));
typedef long   long2    __attribute__((ext_vector_type(2)));
typedef long   long3    __attribute__((ext_vector_type(3)));
typedef long   long4    __attribute__((ext_vector_type(4)));
typedef long   long8    __attribute__((ext_vector_type(8)));
typedef long   long16   __attribute__((ext_vector_type(16)));
typedef ulong  ulong2   __attribute__((ext_vector_type(2)));
typedef ulong  ulong3   __attribute__((ext_vector_type(3)));
typedef ulong  ulong4   __attribute__((ext_vector_type(4)));
typedef ulong  ulong8   __attribute__((ext_vector_type(8)));
typedef ulong  ulong16  __attribute__((ext_vector_type(16)));
typedef float  float2   __attribute__((ext_vector_type(2)));
typedef float  float3   __attribute__((ext_vector_type(3)));
typedef float  float4   __attribute__((ext_vector_type(4)));
typedef float  float8   __attribute__((ext_vector_type(8)));
typedef float  float16  __attribute__((ext_vector_type(16)));
typedef half   half2    __attribute__((ext_vector_type(2)));
typedef half   half3    __attribute__((ext_vector_type(3)));
typedef half   half4    __attribute__((ext_vector_type(4)));
typedef half   half8    __attribute__((ext_vector_type(8)));
typedef half   half16   __attribute__((ext_vector_type(16)));
#ifdef cl_khr_fp64
typedef double double2  __attribute__((ext_vector_type(2)));
typedef double double3  __attribute__((ext_vector_type(3)));
typedef double double4  __attribute__((ext_vector_type(4)));
typedef double double8  __attribute__((ext_vector_type(8)));
typedef double double16 __attribute__((ext_vector_type(16)));
#endif

typedef bool2    cl_bool2;
typedef bool3    cl_bool3;
typedef bool4    cl_bool4;
typedef bool8    cl_bool8;
typedef bool16   cl_bool16;
typedef char2    cl_char2;
typedef char3    cl_char3;
typedef char4    cl_char4;
typedef char8    cl_char8;
typedef char16   cl_char16;
typedef uchar2   cl_uchar2;
typedef uchar3   cl_uchar3;
typedef uchar4   cl_uchar4;
typedef uchar8   cl_uchar8;
typedef uchar16  cl_uchar16;
typedef short2   cl_short2;
typedef short3   cl_short3;
typedef short4   cl_short4;
typedef short8   cl_short8;
typedef short16  cl_short16;
typedef ushort2  cl_ushort2;
typedef ushort3  cl_ushort3;
typedef ushort4  cl_ushort4;
typedef ushort8  cl_ushort8;
typedef ushort16 cl_ushort16;
typedef int2     cl_int2;
typedef int3     cl_int3;
typedef int4     cl_int4;
typedef int8     cl_int8;
typedef int16    cl_int16;
typedef uint2    cl_uint2;
typedef uint3    cl_uint3;
typedef uint4    cl_uint4;
typedef uint8    cl_uint8;
typedef uint16   cl_uint16;
typedef long2    cl_long2;
typedef long3    cl_long3;
typedef long4    cl_long4;
typedef long8    cl_long8;
typedef long16   cl_long16;
typedef ulong2   cl_ulong2;
typedef ulong3   cl_ulong3;
typedef ulong4   cl_ulong4;
typedef ulong8   cl_ulong8;
typedef ulong16  cl_ulong16;
typedef float2   cl_float2;
typedef float3   cl_float3;
typedef float4   cl_float4;
typedef float8   cl_float8;
typedef float16  cl_float16;
#ifdef cl_khr_fp16
typedef half2    cl_half2;
typedef half3    cl_half3;
typedef half4    cl_half4;
typedef half8    cl_half8;
typedef half16   cl_half16;
#endif
#ifdef cl_khr_fp64
typedef double2  cl_double2;
typedef double3  cl_double3;
typedef double4  cl_double4;
typedef double8  cl_double8;
typedef double16 cl_double16;
#endif

typedef int  mem_type;