//
// Copyright (c) 2015-2016 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
//

#pragma once

#include <__ocl_functions_macros.h>
#include <opencl_type_traits>

namespace cl
{

namespace __spirv
{

MAKE_SPIRV_CALLABLE(s_abs);
MAKE_SPIRV_CALLABLE(s_abs_diff);
MAKE_SPIRV_CALLABLE(s_add_sat);
MAKE_SPIRV_CALLABLE(u_add_sat);
MAKE_SPIRV_CALLABLE(s_hadd);
MAKE_SPIRV_CALLABLE(u_hadd);
MAKE_SPIRV_CALLABLE(s_rhadd);
MAKE_SPIRV_CALLABLE(u_rhadd);
MAKE_SPIRV_CALLABLE(s_clamp);
MAKE_SPIRV_CALLABLE(u_clamp);
MAKE_SPIRV_CALLABLE(clz);
MAKE_SPIRV_CALLABLE(ctz);
MAKE_SPIRV_CALLABLE(s_mad_hi);
MAKE_SPIRV_CALLABLE(u_mad_sat);
MAKE_SPIRV_CALLABLE(s_mad_sat);
MAKE_SPIRV_CALLABLE(s_max);
MAKE_SPIRV_CALLABLE(u_max);
MAKE_SPIRV_CALLABLE(s_min);
MAKE_SPIRV_CALLABLE(u_min);
MAKE_SPIRV_CALLABLE(s_mul_hi);
MAKE_SPIRV_CALLABLE(rotate);
MAKE_SPIRV_CALLABLE(s_sub_sat);
MAKE_SPIRV_CALLABLE(u_sub_sat);
MAKE_SPIRV_CALLABLE(u_upsample);
MAKE_SPIRV_CALLABLE(s_upsample);
MAKE_SPIRV_CALLABLE(popcount);
MAKE_SPIRV_CALLABLE(s_mad24);
MAKE_SPIRV_CALLABLE(u_mad24);
MAKE_SPIRV_CALLABLE(s_mul24);
MAKE_SPIRV_CALLABLE(u_mul24);
MAKE_SPIRV_CALLABLE(u_abs);
MAKE_SPIRV_CALLABLE(u_abs_diff);
MAKE_SPIRV_CALLABLE(u_mul_hi);
MAKE_SPIRV_CALLABLE(u_mad_hi);

}


/// \brief returns leading 0-bits in x, per component
///
__ALWAYS_INLINE auto clz(char x) __NOEXCEPT { return __spirv::__make_clz_call<char>(x); }
__ALWAYS_INLINE auto clz(char2 x) __NOEXCEPT { return __spirv::__make_clz_call<char2>(x); }
__ALWAYS_INLINE auto clz(char3 x) __NOEXCEPT { return __spirv::__make_clz_call<char3>(x); }
__ALWAYS_INLINE auto clz(char4 x) __NOEXCEPT { return __spirv::__make_clz_call<char4>(x); }
__ALWAYS_INLINE auto clz(char8 x) __NOEXCEPT { return __spirv::__make_clz_call<char8>(x); }
__ALWAYS_INLINE auto clz(char16 x) __NOEXCEPT { return __spirv::__make_clz_call<char16>(x); };
__ALWAYS_INLINE auto clz(short x) __NOEXCEPT { return __spirv::__make_clz_call<short>(x); }
__ALWAYS_INLINE auto clz(short2 x) __NOEXCEPT { return __spirv::__make_clz_call<short2>(x); }
__ALWAYS_INLINE auto clz(short3 x) __NOEXCEPT { return __spirv::__make_clz_call<short3>(x); }
__ALWAYS_INLINE auto clz(short4 x) __NOEXCEPT { return __spirv::__make_clz_call<short4>(x); }
__ALWAYS_INLINE auto clz(short8 x) __NOEXCEPT { return __spirv::__make_clz_call<short8>(x); }
__ALWAYS_INLINE auto clz(short16 x) __NOEXCEPT { return __spirv::__make_clz_call<short16>(x); };
__ALWAYS_INLINE auto clz(int x) __NOEXCEPT { return __spirv::__make_clz_call<int>(x); }
__ALWAYS_INLINE auto clz(int2 x) __NOEXCEPT { return __spirv::__make_clz_call<int2>(x); }
__ALWAYS_INLINE auto clz(int3 x) __NOEXCEPT { return __spirv::__make_clz_call<int3>(x); }
__ALWAYS_INLINE auto clz(int4 x) __NOEXCEPT { return __spirv::__make_clz_call<int4>(x); }
__ALWAYS_INLINE auto clz(int8 x) __NOEXCEPT { return __spirv::__make_clz_call<int8>(x); }
__ALWAYS_INLINE auto clz(int16 x) __NOEXCEPT { return __spirv::__make_clz_call<int16>(x); };
__ALWAYS_INLINE auto clz(long x) __NOEXCEPT { return __spirv::__make_clz_call<long>(x); }
__ALWAYS_INLINE auto clz(long2 x) __NOEXCEPT { return __spirv::__make_clz_call<long2>(x); }
__ALWAYS_INLINE auto clz(long3 x) __NOEXCEPT { return __spirv::__make_clz_call<long3>(x); }
__ALWAYS_INLINE auto clz(long4 x) __NOEXCEPT { return __spirv::__make_clz_call<long4>(x); }
__ALWAYS_INLINE auto clz(long8 x) __NOEXCEPT { return __spirv::__make_clz_call<long8>(x); }
__ALWAYS_INLINE auto clz(long16 x) __NOEXCEPT { return __spirv::__make_clz_call<long16>(x); };
__ALWAYS_INLINE auto clz(uchar x) __NOEXCEPT { return __spirv::__make_clz_call<uchar>(x); }
__ALWAYS_INLINE auto clz(uchar2 x) __NOEXCEPT { return __spirv::__make_clz_call<uchar2>(x); }
__ALWAYS_INLINE auto clz(uchar3 x) __NOEXCEPT { return __spirv::__make_clz_call<uchar3>(x); }
__ALWAYS_INLINE auto clz(uchar4 x) __NOEXCEPT { return __spirv::__make_clz_call<uchar4>(x); }
__ALWAYS_INLINE auto clz(uchar8 x) __NOEXCEPT { return __spirv::__make_clz_call<uchar8>(x); }
__ALWAYS_INLINE auto clz(uchar16 x) __NOEXCEPT { return __spirv::__make_clz_call<uchar16>(x); };
__ALWAYS_INLINE auto clz(ushort x) __NOEXCEPT { return __spirv::__make_clz_call<ushort>(x); }
__ALWAYS_INLINE auto clz(ushort2 x) __NOEXCEPT { return __spirv::__make_clz_call<ushort2>(x); }
__ALWAYS_INLINE auto clz(ushort3 x) __NOEXCEPT { return __spirv::__make_clz_call<ushort3>(x); }
__ALWAYS_INLINE auto clz(ushort4 x) __NOEXCEPT { return __spirv::__make_clz_call<ushort4>(x); }
__ALWAYS_INLINE auto clz(ushort8 x) __NOEXCEPT { return __spirv::__make_clz_call<ushort8>(x); }
__ALWAYS_INLINE auto clz(ushort16 x) __NOEXCEPT { return __spirv::__make_clz_call<ushort16>(x); };
__ALWAYS_INLINE auto clz(uint x) __NOEXCEPT { return __spirv::__make_clz_call<uint>(x); }
__ALWAYS_INLINE auto clz(uint2 x) __NOEXCEPT { return __spirv::__make_clz_call<uint2>(x); }
__ALWAYS_INLINE auto clz(uint3 x) __NOEXCEPT { return __spirv::__make_clz_call<uint3>(x); }
__ALWAYS_INLINE auto clz(uint4 x) __NOEXCEPT { return __spirv::__make_clz_call<uint4>(x); }
__ALWAYS_INLINE auto clz(uint8 x) __NOEXCEPT { return __spirv::__make_clz_call<uint8>(x); }
__ALWAYS_INLINE auto clz(uint16 x) __NOEXCEPT { return __spirv::__make_clz_call<uint16>(x); };
__ALWAYS_INLINE auto clz(ulong x) __NOEXCEPT { return __spirv::__make_clz_call<ulong>(x); }
__ALWAYS_INLINE auto clz(ulong2 x) __NOEXCEPT { return __spirv::__make_clz_call<ulong2>(x); }
__ALWAYS_INLINE auto clz(ulong3 x) __NOEXCEPT { return __spirv::__make_clz_call<ulong3>(x); }
__ALWAYS_INLINE auto clz(ulong4 x) __NOEXCEPT { return __spirv::__make_clz_call<ulong4>(x); }
__ALWAYS_INLINE auto clz(ulong8 x) __NOEXCEPT { return __spirv::__make_clz_call<ulong8>(x); }
__ALWAYS_INLINE auto clz(ulong16 x) __NOEXCEPT { return __spirv::__make_clz_call<ulong16>(x); };


/// \brief returns trailing 0-bits in x, per component
///
__ALWAYS_INLINE auto ctz(char x) __NOEXCEPT { return __spirv::__make_ctz_call<char>(x); }
__ALWAYS_INLINE auto ctz(char2 x) __NOEXCEPT { return __spirv::__make_ctz_call<char2>(x); }
__ALWAYS_INLINE auto ctz(char3 x) __NOEXCEPT { return __spirv::__make_ctz_call<char3>(x); }
__ALWAYS_INLINE auto ctz(char4 x) __NOEXCEPT { return __spirv::__make_ctz_call<char4>(x); }
__ALWAYS_INLINE auto ctz(char8 x) __NOEXCEPT { return __spirv::__make_ctz_call<char8>(x); }
__ALWAYS_INLINE auto ctz(char16 x) __NOEXCEPT { return __spirv::__make_ctz_call<char16>(x); };
__ALWAYS_INLINE auto ctz(short x) __NOEXCEPT { return __spirv::__make_ctz_call<short>(x); }
__ALWAYS_INLINE auto ctz(short2 x) __NOEXCEPT { return __spirv::__make_ctz_call<short2>(x); }
__ALWAYS_INLINE auto ctz(short3 x) __NOEXCEPT { return __spirv::__make_ctz_call<short3>(x); }
__ALWAYS_INLINE auto ctz(short4 x) __NOEXCEPT { return __spirv::__make_ctz_call<short4>(x); }
__ALWAYS_INLINE auto ctz(short8 x) __NOEXCEPT { return __spirv::__make_ctz_call<short8>(x); }
__ALWAYS_INLINE auto ctz(short16 x) __NOEXCEPT { return __spirv::__make_ctz_call<short16>(x); };
__ALWAYS_INLINE auto ctz(int x) __NOEXCEPT { return __spirv::__make_ctz_call<int>(x); }
__ALWAYS_INLINE auto ctz(int2 x) __NOEXCEPT { return __spirv::__make_ctz_call<int2>(x); }
__ALWAYS_INLINE auto ctz(int3 x) __NOEXCEPT { return __spirv::__make_ctz_call<int3>(x); }
__ALWAYS_INLINE auto ctz(int4 x) __NOEXCEPT { return __spirv::__make_ctz_call<int4>(x); }
__ALWAYS_INLINE auto ctz(int8 x) __NOEXCEPT { return __spirv::__make_ctz_call<int8>(x); }
__ALWAYS_INLINE auto ctz(int16 x) __NOEXCEPT { return __spirv::__make_ctz_call<int16>(x); };
__ALWAYS_INLINE auto ctz(long x) __NOEXCEPT { return __spirv::__make_ctz_call<long>(x); }
__ALWAYS_INLINE auto ctz(long2 x) __NOEXCEPT { return __spirv::__make_ctz_call<long2>(x); }
__ALWAYS_INLINE auto ctz(long3 x) __NOEXCEPT { return __spirv::__make_ctz_call<long3>(x); }
__ALWAYS_INLINE auto ctz(long4 x) __NOEXCEPT { return __spirv::__make_ctz_call<long4>(x); }
__ALWAYS_INLINE auto ctz(long8 x) __NOEXCEPT { return __spirv::__make_ctz_call<long8>(x); }
__ALWAYS_INLINE auto ctz(long16 x) __NOEXCEPT { return __spirv::__make_ctz_call<long16>(x); };
__ALWAYS_INLINE auto ctz(uchar x) __NOEXCEPT { return __spirv::__make_ctz_call<uchar>(x); }
__ALWAYS_INLINE auto ctz(uchar2 x) __NOEXCEPT { return __spirv::__make_ctz_call<uchar2>(x); }
__ALWAYS_INLINE auto ctz(uchar3 x) __NOEXCEPT { return __spirv::__make_ctz_call<uchar3>(x); }
__ALWAYS_INLINE auto ctz(uchar4 x) __NOEXCEPT { return __spirv::__make_ctz_call<uchar4>(x); }
__ALWAYS_INLINE auto ctz(uchar8 x) __NOEXCEPT { return __spirv::__make_ctz_call<uchar8>(x); }
__ALWAYS_INLINE auto ctz(uchar16 x) __NOEXCEPT { return __spirv::__make_ctz_call<uchar16>(x); };
__ALWAYS_INLINE auto ctz(ushort x) __NOEXCEPT { return __spirv::__make_ctz_call<ushort>(x); }
__ALWAYS_INLINE auto ctz(ushort2 x) __NOEXCEPT { return __spirv::__make_ctz_call<ushort2>(x); }
__ALWAYS_INLINE auto ctz(ushort3 x) __NOEXCEPT { return __spirv::__make_ctz_call<ushort3>(x); }
__ALWAYS_INLINE auto ctz(ushort4 x) __NOEXCEPT { return __spirv::__make_ctz_call<ushort4>(x); }
__ALWAYS_INLINE auto ctz(ushort8 x) __NOEXCEPT { return __spirv::__make_ctz_call<ushort8>(x); }
__ALWAYS_INLINE auto ctz(ushort16 x) __NOEXCEPT { return __spirv::__make_ctz_call<ushort16>(x); };
__ALWAYS_INLINE auto ctz(uint x) __NOEXCEPT { return __spirv::__make_ctz_call<uint>(x); }
__ALWAYS_INLINE auto ctz(uint2 x) __NOEXCEPT { return __spirv::__make_ctz_call<uint2>(x); }
__ALWAYS_INLINE auto ctz(uint3 x) __NOEXCEPT { return __spirv::__make_ctz_call<uint3>(x); }
__ALWAYS_INLINE auto ctz(uint4 x) __NOEXCEPT { return __spirv::__make_ctz_call<uint4>(x); }
__ALWAYS_INLINE auto ctz(uint8 x) __NOEXCEPT { return __spirv::__make_ctz_call<uint8>(x); }
__ALWAYS_INLINE auto ctz(uint16 x) __NOEXCEPT { return __spirv::__make_ctz_call<uint16>(x); };
__ALWAYS_INLINE auto ctz(ulong x) __NOEXCEPT { return __spirv::__make_ctz_call<ulong>(x); }
__ALWAYS_INLINE auto ctz(ulong2 x) __NOEXCEPT { return __spirv::__make_ctz_call<ulong2>(x); }
__ALWAYS_INLINE auto ctz(ulong3 x) __NOEXCEPT { return __spirv::__make_ctz_call<ulong3>(x); }
__ALWAYS_INLINE auto ctz(ulong4 x) __NOEXCEPT { return __spirv::__make_ctz_call<ulong4>(x); }
__ALWAYS_INLINE auto ctz(ulong8 x) __NOEXCEPT { return __spirv::__make_ctz_call<ulong8>(x); }
__ALWAYS_INLINE auto ctz(ulong16 x) __NOEXCEPT { return __spirv::__make_ctz_call<ulong16>(x); };


/// \brief returns numer of non-zero bits in x, per component
///
__ALWAYS_INLINE auto popcount(char x) __NOEXCEPT { return __spirv::__make_popcount_call<char>(x); }
__ALWAYS_INLINE auto popcount(char2 x) __NOEXCEPT { return __spirv::__make_popcount_call<char2>(x); }
__ALWAYS_INLINE auto popcount(char3 x) __NOEXCEPT { return __spirv::__make_popcount_call<char3>(x); }
__ALWAYS_INLINE auto popcount(char4 x) __NOEXCEPT { return __spirv::__make_popcount_call<char4>(x); }
__ALWAYS_INLINE auto popcount(char8 x) __NOEXCEPT { return __spirv::__make_popcount_call<char8>(x); }
__ALWAYS_INLINE auto popcount(char16 x) __NOEXCEPT { return __spirv::__make_popcount_call<char16>(x); };
__ALWAYS_INLINE auto popcount(short x) __NOEXCEPT { return __spirv::__make_popcount_call<short>(x); }
__ALWAYS_INLINE auto popcount(short2 x) __NOEXCEPT { return __spirv::__make_popcount_call<short2>(x); }
__ALWAYS_INLINE auto popcount(short3 x) __NOEXCEPT { return __spirv::__make_popcount_call<short3>(x); }
__ALWAYS_INLINE auto popcount(short4 x) __NOEXCEPT { return __spirv::__make_popcount_call<short4>(x); }
__ALWAYS_INLINE auto popcount(short8 x) __NOEXCEPT { return __spirv::__make_popcount_call<short8>(x); }
__ALWAYS_INLINE auto popcount(short16 x) __NOEXCEPT { return __spirv::__make_popcount_call<short16>(x); };
__ALWAYS_INLINE auto popcount(int x) __NOEXCEPT { return __spirv::__make_popcount_call<int>(x); }
__ALWAYS_INLINE auto popcount(int2 x) __NOEXCEPT { return __spirv::__make_popcount_call<int2>(x); }
__ALWAYS_INLINE auto popcount(int3 x) __NOEXCEPT { return __spirv::__make_popcount_call<int3>(x); }
__ALWAYS_INLINE auto popcount(int4 x) __NOEXCEPT { return __spirv::__make_popcount_call<int4>(x); }
__ALWAYS_INLINE auto popcount(int8 x) __NOEXCEPT { return __spirv::__make_popcount_call<int8>(x); }
__ALWAYS_INLINE auto popcount(int16 x) __NOEXCEPT { return __spirv::__make_popcount_call<int16>(x); };
__ALWAYS_INLINE auto popcount(long x) __NOEXCEPT { return __spirv::__make_popcount_call<long>(x); }
__ALWAYS_INLINE auto popcount(long2 x) __NOEXCEPT { return __spirv::__make_popcount_call<long2>(x); }
__ALWAYS_INLINE auto popcount(long3 x) __NOEXCEPT { return __spirv::__make_popcount_call<long3>(x); }
__ALWAYS_INLINE auto popcount(long4 x) __NOEXCEPT { return __spirv::__make_popcount_call<long4>(x); }
__ALWAYS_INLINE auto popcount(long8 x) __NOEXCEPT { return __spirv::__make_popcount_call<long8>(x); }
__ALWAYS_INLINE auto popcount(long16 x) __NOEXCEPT { return __spirv::__make_popcount_call<long16>(x); };
__ALWAYS_INLINE auto popcount(uchar x) __NOEXCEPT { return __spirv::__make_popcount_call<uchar>(x); }
__ALWAYS_INLINE auto popcount(uchar2 x) __NOEXCEPT { return __spirv::__make_popcount_call<uchar2>(x); }
__ALWAYS_INLINE auto popcount(uchar3 x) __NOEXCEPT { return __spirv::__make_popcount_call<uchar3>(x); }
__ALWAYS_INLINE auto popcount(uchar4 x) __NOEXCEPT { return __spirv::__make_popcount_call<uchar4>(x); }
__ALWAYS_INLINE auto popcount(uchar8 x) __NOEXCEPT { return __spirv::__make_popcount_call<uchar8>(x); }
__ALWAYS_INLINE auto popcount(uchar16 x) __NOEXCEPT { return __spirv::__make_popcount_call<uchar16>(x); };
__ALWAYS_INLINE auto popcount(ushort x) __NOEXCEPT { return __spirv::__make_popcount_call<ushort>(x); }
__ALWAYS_INLINE auto popcount(ushort2 x) __NOEXCEPT { return __spirv::__make_popcount_call<ushort2>(x); }
__ALWAYS_INLINE auto popcount(ushort3 x) __NOEXCEPT { return __spirv::__make_popcount_call<ushort3>(x); }
__ALWAYS_INLINE auto popcount(ushort4 x) __NOEXCEPT { return __spirv::__make_popcount_call<ushort4>(x); }
__ALWAYS_INLINE auto popcount(ushort8 x) __NOEXCEPT { return __spirv::__make_popcount_call<ushort8>(x); }
__ALWAYS_INLINE auto popcount(ushort16 x) __NOEXCEPT { return __spirv::__make_popcount_call<ushort16>(x); };
__ALWAYS_INLINE auto popcount(uint x) __NOEXCEPT { return __spirv::__make_popcount_call<uint>(x); }
__ALWAYS_INLINE auto popcount(uint2 x) __NOEXCEPT { return __spirv::__make_popcount_call<uint2>(x); }
__ALWAYS_INLINE auto popcount(uint3 x) __NOEXCEPT { return __spirv::__make_popcount_call<uint3>(x); }
__ALWAYS_INLINE auto popcount(uint4 x) __NOEXCEPT { return __spirv::__make_popcount_call<uint4>(x); }
__ALWAYS_INLINE auto popcount(uint8 x) __NOEXCEPT { return __spirv::__make_popcount_call<uint8>(x); }
__ALWAYS_INLINE auto popcount(uint16 x) __NOEXCEPT { return __spirv::__make_popcount_call<uint16>(x); };
__ALWAYS_INLINE auto popcount(ulong x) __NOEXCEPT { return __spirv::__make_popcount_call<ulong>(x); }
__ALWAYS_INLINE auto popcount(ulong2 x) __NOEXCEPT { return __spirv::__make_popcount_call<ulong2>(x); }
__ALWAYS_INLINE auto popcount(ulong3 x) __NOEXCEPT { return __spirv::__make_popcount_call<ulong3>(x); }
__ALWAYS_INLINE auto popcount(ulong4 x) __NOEXCEPT { return __spirv::__make_popcount_call<ulong4>(x); }
__ALWAYS_INLINE auto popcount(ulong8 x) __NOEXCEPT { return __spirv::__make_popcount_call<ulong8>(x); }
__ALWAYS_INLINE auto popcount(ulong16 x) __NOEXCEPT { return __spirv::__make_popcount_call<ulong16>(x); };


/// \brief returns x+y and saturates the result
///
__ALWAYS_INLINE auto add_sat(char x, char y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<char>(x, y); }
__ALWAYS_INLINE auto add_sat(char2 x, char2 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<char2>(x, y); }
__ALWAYS_INLINE auto add_sat(char3 x, char3 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<char3>(x, y); }
__ALWAYS_INLINE auto add_sat(char4 x, char4 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<char4>(x, y); }
__ALWAYS_INLINE auto add_sat(char8 x, char8 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<char8>(x, y); }
__ALWAYS_INLINE auto add_sat(char16 x, char16 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<char16>(x, y); };
__ALWAYS_INLINE auto add_sat(short x, short y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<short>(x, y); }
__ALWAYS_INLINE auto add_sat(short2 x, short2 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<short2>(x, y); }
__ALWAYS_INLINE auto add_sat(short3 x, short3 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<short3>(x, y); }
__ALWAYS_INLINE auto add_sat(short4 x, short4 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<short4>(x, y); }
__ALWAYS_INLINE auto add_sat(short8 x, short8 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<short8>(x, y); }
__ALWAYS_INLINE auto add_sat(short16 x, short16 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<short16>(x, y); };
__ALWAYS_INLINE auto add_sat(int x, int y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<int>(x, y); }
__ALWAYS_INLINE auto add_sat(int2 x, int2 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<int2>(x, y); }
__ALWAYS_INLINE auto add_sat(int3 x, int3 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<int3>(x, y); }
__ALWAYS_INLINE auto add_sat(int4 x, int4 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<int4>(x, y); }
__ALWAYS_INLINE auto add_sat(int8 x, int8 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<int8>(x, y); }
__ALWAYS_INLINE auto add_sat(int16 x, int16 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<int16>(x, y); };
__ALWAYS_INLINE auto add_sat(long x, long y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<long>(x, y); }
__ALWAYS_INLINE auto add_sat(long2 x, long2 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<long2>(x, y); }
__ALWAYS_INLINE auto add_sat(long3 x, long3 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<long3>(x, y); }
__ALWAYS_INLINE auto add_sat(long4 x, long4 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<long4>(x, y); }
__ALWAYS_INLINE auto add_sat(long8 x, long8 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<long8>(x, y); }
__ALWAYS_INLINE auto add_sat(long16 x, long16 y) __NOEXCEPT { return __spirv::__make_s_add_sat_call<long16>(x, y); };
__ALWAYS_INLINE auto add_sat(uchar x, uchar y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<uchar>(x, y); }
__ALWAYS_INLINE auto add_sat(uchar2 x, uchar2 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<uchar2>(x, y); }
__ALWAYS_INLINE auto add_sat(uchar3 x, uchar3 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<uchar3>(x, y); }
__ALWAYS_INLINE auto add_sat(uchar4 x, uchar4 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<uchar4>(x, y); }
__ALWAYS_INLINE auto add_sat(uchar8 x, uchar8 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<uchar8>(x, y); }
__ALWAYS_INLINE auto add_sat(uchar16 x, uchar16 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<uchar16>(x, y); };
__ALWAYS_INLINE auto add_sat(ushort x, ushort y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<ushort>(x, y); }
__ALWAYS_INLINE auto add_sat(ushort2 x, ushort2 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<ushort2>(x, y); }
__ALWAYS_INLINE auto add_sat(ushort3 x, ushort3 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<ushort3>(x, y); }
__ALWAYS_INLINE auto add_sat(ushort4 x, ushort4 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<ushort4>(x, y); }
__ALWAYS_INLINE auto add_sat(ushort8 x, ushort8 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<ushort8>(x, y); }
__ALWAYS_INLINE auto add_sat(ushort16 x, ushort16 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<ushort16>(x, y); };
__ALWAYS_INLINE auto add_sat(uint x, uint y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<uint>(x, y); }
__ALWAYS_INLINE auto add_sat(uint2 x, uint2 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<uint2>(x, y); }
__ALWAYS_INLINE auto add_sat(uint3 x, uint3 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<uint3>(x, y); }
__ALWAYS_INLINE auto add_sat(uint4 x, uint4 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<uint4>(x, y); }
__ALWAYS_INLINE auto add_sat(uint8 x, uint8 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<uint8>(x, y); }
__ALWAYS_INLINE auto add_sat(uint16 x, uint16 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<uint16>(x, y); };
__ALWAYS_INLINE auto add_sat(ulong x, ulong y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<ulong>(x, y); }
__ALWAYS_INLINE auto add_sat(ulong2 x, ulong2 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<ulong2>(x, y); }
__ALWAYS_INLINE auto add_sat(ulong3 x, ulong3 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<ulong3>(x, y); }
__ALWAYS_INLINE auto add_sat(ulong4 x, ulong4 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<ulong4>(x, y); }
__ALWAYS_INLINE auto add_sat(ulong8 x, ulong8 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<ulong8>(x, y); }
__ALWAYS_INLINE auto add_sat(ulong16 x, ulong16 y) __NOEXCEPT { return __spirv::__make_u_add_sat_call<ulong16>(x, y); };


/// \brief returns (x+y) >> 1
///
__ALWAYS_INLINE auto hadd(char x, char y) __NOEXCEPT { return __spirv::__make_s_hadd_call<char>(x, y); }
__ALWAYS_INLINE auto hadd(char2 x, char2 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<char2>(x, y); }
__ALWAYS_INLINE auto hadd(char3 x, char3 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<char3>(x, y); }
__ALWAYS_INLINE auto hadd(char4 x, char4 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<char4>(x, y); }
__ALWAYS_INLINE auto hadd(char8 x, char8 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<char8>(x, y); }
__ALWAYS_INLINE auto hadd(char16 x, char16 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<char16>(x, y); };
__ALWAYS_INLINE auto hadd(short x, short y) __NOEXCEPT { return __spirv::__make_s_hadd_call<short>(x, y); }
__ALWAYS_INLINE auto hadd(short2 x, short2 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<short2>(x, y); }
__ALWAYS_INLINE auto hadd(short3 x, short3 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<short3>(x, y); }
__ALWAYS_INLINE auto hadd(short4 x, short4 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<short4>(x, y); }
__ALWAYS_INLINE auto hadd(short8 x, short8 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<short8>(x, y); }
__ALWAYS_INLINE auto hadd(short16 x, short16 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<short16>(x, y); };
__ALWAYS_INLINE auto hadd(int x, int y) __NOEXCEPT { return __spirv::__make_s_hadd_call<int>(x, y); }
__ALWAYS_INLINE auto hadd(int2 x, int2 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<int2>(x, y); }
__ALWAYS_INLINE auto hadd(int3 x, int3 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<int3>(x, y); }
__ALWAYS_INLINE auto hadd(int4 x, int4 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<int4>(x, y); }
__ALWAYS_INLINE auto hadd(int8 x, int8 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<int8>(x, y); }
__ALWAYS_INLINE auto hadd(int16 x, int16 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<int16>(x, y); };
__ALWAYS_INLINE auto hadd(long x, long y) __NOEXCEPT { return __spirv::__make_s_hadd_call<long>(x, y); }
__ALWAYS_INLINE auto hadd(long2 x, long2 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<long2>(x, y); }
__ALWAYS_INLINE auto hadd(long3 x, long3 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<long3>(x, y); }
__ALWAYS_INLINE auto hadd(long4 x, long4 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<long4>(x, y); }
__ALWAYS_INLINE auto hadd(long8 x, long8 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<long8>(x, y); }
__ALWAYS_INLINE auto hadd(long16 x, long16 y) __NOEXCEPT { return __spirv::__make_s_hadd_call<long16>(x, y); };
__ALWAYS_INLINE auto hadd(uchar x, uchar y) __NOEXCEPT { return __spirv::__make_u_hadd_call<uchar>(x, y); }
__ALWAYS_INLINE auto hadd(uchar2 x, uchar2 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<uchar2>(x, y); }
__ALWAYS_INLINE auto hadd(uchar3 x, uchar3 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<uchar3>(x, y); }
__ALWAYS_INLINE auto hadd(uchar4 x, uchar4 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<uchar4>(x, y); }
__ALWAYS_INLINE auto hadd(uchar8 x, uchar8 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<uchar8>(x, y); }
__ALWAYS_INLINE auto hadd(uchar16 x, uchar16 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<uchar16>(x, y); };
__ALWAYS_INLINE auto hadd(ushort x, ushort y) __NOEXCEPT { return __spirv::__make_u_hadd_call<ushort>(x, y); }
__ALWAYS_INLINE auto hadd(ushort2 x, ushort2 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<ushort2>(x, y); }
__ALWAYS_INLINE auto hadd(ushort3 x, ushort3 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<ushort3>(x, y); }
__ALWAYS_INLINE auto hadd(ushort4 x, ushort4 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<ushort4>(x, y); }
__ALWAYS_INLINE auto hadd(ushort8 x, ushort8 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<ushort8>(x, y); }
__ALWAYS_INLINE auto hadd(ushort16 x, ushort16 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<ushort16>(x, y); };
__ALWAYS_INLINE auto hadd(uint x, uint y) __NOEXCEPT { return __spirv::__make_u_hadd_call<uint>(x, y); }
__ALWAYS_INLINE auto hadd(uint2 x, uint2 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<uint2>(x, y); }
__ALWAYS_INLINE auto hadd(uint3 x, uint3 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<uint3>(x, y); }
__ALWAYS_INLINE auto hadd(uint4 x, uint4 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<uint4>(x, y); }
__ALWAYS_INLINE auto hadd(uint8 x, uint8 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<uint8>(x, y); }
__ALWAYS_INLINE auto hadd(uint16 x, uint16 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<uint16>(x, y); };
__ALWAYS_INLINE auto hadd(ulong x, ulong y) __NOEXCEPT { return __spirv::__make_u_hadd_call<ulong>(x, y); }
__ALWAYS_INLINE auto hadd(ulong2 x, ulong2 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<ulong2>(x, y); }
__ALWAYS_INLINE auto hadd(ulong3 x, ulong3 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<ulong3>(x, y); }
__ALWAYS_INLINE auto hadd(ulong4 x, ulong4 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<ulong4>(x, y); }
__ALWAYS_INLINE auto hadd(ulong8 x, ulong8 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<ulong8>(x, y); }
__ALWAYS_INLINE auto hadd(ulong16 x, ulong16 y) __NOEXCEPT { return __spirv::__make_u_hadd_call<ulong16>(x, y); };


/// \brief returns (x+y+1) >> 1
///
__ALWAYS_INLINE auto rhadd(char x, char y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<char>(x, y); }
__ALWAYS_INLINE auto rhadd(char2 x, char2 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<char2>(x, y); }
__ALWAYS_INLINE auto rhadd(char3 x, char3 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<char3>(x, y); }
__ALWAYS_INLINE auto rhadd(char4 x, char4 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<char4>(x, y); }
__ALWAYS_INLINE auto rhadd(char8 x, char8 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<char8>(x, y); }
__ALWAYS_INLINE auto rhadd(char16 x, char16 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<char16>(x, y); };
__ALWAYS_INLINE auto rhadd(short x, short y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<short>(x, y); }
__ALWAYS_INLINE auto rhadd(short2 x, short2 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<short2>(x, y); }
__ALWAYS_INLINE auto rhadd(short3 x, short3 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<short3>(x, y); }
__ALWAYS_INLINE auto rhadd(short4 x, short4 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<short4>(x, y); }
__ALWAYS_INLINE auto rhadd(short8 x, short8 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<short8>(x, y); }
__ALWAYS_INLINE auto rhadd(short16 x, short16 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<short16>(x, y); };
__ALWAYS_INLINE auto rhadd(int x, int y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<int>(x, y); }
__ALWAYS_INLINE auto rhadd(int2 x, int2 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<int2>(x, y); }
__ALWAYS_INLINE auto rhadd(int3 x, int3 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<int3>(x, y); }
__ALWAYS_INLINE auto rhadd(int4 x, int4 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<int4>(x, y); }
__ALWAYS_INLINE auto rhadd(int8 x, int8 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<int8>(x, y); }
__ALWAYS_INLINE auto rhadd(int16 x, int16 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<int16>(x, y); };
__ALWAYS_INLINE auto rhadd(long x, long y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<long>(x, y); }
__ALWAYS_INLINE auto rhadd(long2 x, long2 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<long2>(x, y); }
__ALWAYS_INLINE auto rhadd(long3 x, long3 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<long3>(x, y); }
__ALWAYS_INLINE auto rhadd(long4 x, long4 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<long4>(x, y); }
__ALWAYS_INLINE auto rhadd(long8 x, long8 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<long8>(x, y); }
__ALWAYS_INLINE auto rhadd(long16 x, long16 y) __NOEXCEPT { return __spirv::__make_s_rhadd_call<long16>(x, y); };
__ALWAYS_INLINE auto rhadd(uchar x, uchar y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<uchar>(x, y); }
__ALWAYS_INLINE auto rhadd(uchar2 x, uchar2 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<uchar2>(x, y); }
__ALWAYS_INLINE auto rhadd(uchar3 x, uchar3 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<uchar3>(x, y); }
__ALWAYS_INLINE auto rhadd(uchar4 x, uchar4 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<uchar4>(x, y); }
__ALWAYS_INLINE auto rhadd(uchar8 x, uchar8 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<uchar8>(x, y); }
__ALWAYS_INLINE auto rhadd(uchar16 x, uchar16 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<uchar16>(x, y); };
__ALWAYS_INLINE auto rhadd(ushort x, ushort y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<ushort>(x, y); }
__ALWAYS_INLINE auto rhadd(ushort2 x, ushort2 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<ushort2>(x, y); }
__ALWAYS_INLINE auto rhadd(ushort3 x, ushort3 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<ushort3>(x, y); }
__ALWAYS_INLINE auto rhadd(ushort4 x, ushort4 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<ushort4>(x, y); }
__ALWAYS_INLINE auto rhadd(ushort8 x, ushort8 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<ushort8>(x, y); }
__ALWAYS_INLINE auto rhadd(ushort16 x, ushort16 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<ushort16>(x, y); };
__ALWAYS_INLINE auto rhadd(uint x, uint y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<uint>(x, y); }
__ALWAYS_INLINE auto rhadd(uint2 x, uint2 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<uint2>(x, y); }
__ALWAYS_INLINE auto rhadd(uint3 x, uint3 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<uint3>(x, y); }
__ALWAYS_INLINE auto rhadd(uint4 x, uint4 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<uint4>(x, y); }
__ALWAYS_INLINE auto rhadd(uint8 x, uint8 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<uint8>(x, y); }
__ALWAYS_INLINE auto rhadd(uint16 x, uint16 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<uint16>(x, y); };
__ALWAYS_INLINE auto rhadd(ulong x, ulong y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<ulong>(x, y); }
__ALWAYS_INLINE auto rhadd(ulong2 x, ulong2 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<ulong2>(x, y); }
__ALWAYS_INLINE auto rhadd(ulong3 x, ulong3 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<ulong3>(x, y); }
__ALWAYS_INLINE auto rhadd(ulong4 x, ulong4 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<ulong4>(x, y); }
__ALWAYS_INLINE auto rhadd(ulong8 x, ulong8 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<ulong8>(x, y); }
__ALWAYS_INLINE auto rhadd(ulong16 x, ulong16 y) __NOEXCEPT { return __spirv::__make_u_rhadd_call<ulong16>(x, y); };


/// \brief returns (x < y ? y : x) per component
///
__ALWAYS_INLINE auto max(char x, char y) __NOEXCEPT { return __spirv::__make_s_max_call<char>(x, y); }
__ALWAYS_INLINE auto max(char2 x, char2 y) __NOEXCEPT { return __spirv::__make_s_max_call<char2>(x, y); }
__ALWAYS_INLINE auto max(char3 x, char3 y) __NOEXCEPT { return __spirv::__make_s_max_call<char3>(x, y); }
__ALWAYS_INLINE auto max(char4 x, char4 y) __NOEXCEPT { return __spirv::__make_s_max_call<char4>(x, y); }
__ALWAYS_INLINE auto max(char8 x, char8 y) __NOEXCEPT { return __spirv::__make_s_max_call<char8>(x, y); }
__ALWAYS_INLINE auto max(char16 x, char16 y) __NOEXCEPT { return __spirv::__make_s_max_call<char16>(x, y); };
__ALWAYS_INLINE auto max(short x, short y) __NOEXCEPT { return __spirv::__make_s_max_call<short>(x, y); }
__ALWAYS_INLINE auto max(short2 x, short2 y) __NOEXCEPT { return __spirv::__make_s_max_call<short2>(x, y); }
__ALWAYS_INLINE auto max(short3 x, short3 y) __NOEXCEPT { return __spirv::__make_s_max_call<short3>(x, y); }
__ALWAYS_INLINE auto max(short4 x, short4 y) __NOEXCEPT { return __spirv::__make_s_max_call<short4>(x, y); }
__ALWAYS_INLINE auto max(short8 x, short8 y) __NOEXCEPT { return __spirv::__make_s_max_call<short8>(x, y); }
__ALWAYS_INLINE auto max(short16 x, short16 y) __NOEXCEPT { return __spirv::__make_s_max_call<short16>(x, y); };
__ALWAYS_INLINE auto max(int x, int y) __NOEXCEPT { return __spirv::__make_s_max_call<int>(x, y); }
__ALWAYS_INLINE auto max(int2 x, int2 y) __NOEXCEPT { return __spirv::__make_s_max_call<int2>(x, y); }
__ALWAYS_INLINE auto max(int3 x, int3 y) __NOEXCEPT { return __spirv::__make_s_max_call<int3>(x, y); }
__ALWAYS_INLINE auto max(int4 x, int4 y) __NOEXCEPT { return __spirv::__make_s_max_call<int4>(x, y); }
__ALWAYS_INLINE auto max(int8 x, int8 y) __NOEXCEPT { return __spirv::__make_s_max_call<int8>(x, y); }
__ALWAYS_INLINE auto max(int16 x, int16 y) __NOEXCEPT { return __spirv::__make_s_max_call<int16>(x, y); };
__ALWAYS_INLINE auto max(long x, long y) __NOEXCEPT { return __spirv::__make_s_max_call<long>(x, y); }
__ALWAYS_INLINE auto max(long2 x, long2 y) __NOEXCEPT { return __spirv::__make_s_max_call<long2>(x, y); }
__ALWAYS_INLINE auto max(long3 x, long3 y) __NOEXCEPT { return __spirv::__make_s_max_call<long3>(x, y); }
__ALWAYS_INLINE auto max(long4 x, long4 y) __NOEXCEPT { return __spirv::__make_s_max_call<long4>(x, y); }
__ALWAYS_INLINE auto max(long8 x, long8 y) __NOEXCEPT { return __spirv::__make_s_max_call<long8>(x, y); }
__ALWAYS_INLINE auto max(long16 x, long16 y) __NOEXCEPT { return __spirv::__make_s_max_call<long16>(x, y); };
__ALWAYS_INLINE auto max(uchar x, uchar y) __NOEXCEPT { return __spirv::__make_u_max_call<uchar>(x, y); }
__ALWAYS_INLINE auto max(uchar2 x, uchar2 y) __NOEXCEPT { return __spirv::__make_u_max_call<uchar2>(x, y); }
__ALWAYS_INLINE auto max(uchar3 x, uchar3 y) __NOEXCEPT { return __spirv::__make_u_max_call<uchar3>(x, y); }
__ALWAYS_INLINE auto max(uchar4 x, uchar4 y) __NOEXCEPT { return __spirv::__make_u_max_call<uchar4>(x, y); }
__ALWAYS_INLINE auto max(uchar8 x, uchar8 y) __NOEXCEPT { return __spirv::__make_u_max_call<uchar8>(x, y); }
__ALWAYS_INLINE auto max(uchar16 x, uchar16 y) __NOEXCEPT { return __spirv::__make_u_max_call<uchar16>(x, y); };
__ALWAYS_INLINE auto max(ushort x, ushort y) __NOEXCEPT { return __spirv::__make_u_max_call<ushort>(x, y); }
__ALWAYS_INLINE auto max(ushort2 x, ushort2 y) __NOEXCEPT { return __spirv::__make_u_max_call<ushort2>(x, y); }
__ALWAYS_INLINE auto max(ushort3 x, ushort3 y) __NOEXCEPT { return __spirv::__make_u_max_call<ushort3>(x, y); }
__ALWAYS_INLINE auto max(ushort4 x, ushort4 y) __NOEXCEPT { return __spirv::__make_u_max_call<ushort4>(x, y); }
__ALWAYS_INLINE auto max(ushort8 x, ushort8 y) __NOEXCEPT { return __spirv::__make_u_max_call<ushort8>(x, y); }
__ALWAYS_INLINE auto max(ushort16 x, ushort16 y) __NOEXCEPT { return __spirv::__make_u_max_call<ushort16>(x, y); };
__ALWAYS_INLINE auto max(uint x, uint y) __NOEXCEPT { return __spirv::__make_u_max_call<uint>(x, y); }
__ALWAYS_INLINE auto max(uint2 x, uint2 y) __NOEXCEPT { return __spirv::__make_u_max_call<uint2>(x, y); }
__ALWAYS_INLINE auto max(uint3 x, uint3 y) __NOEXCEPT { return __spirv::__make_u_max_call<uint3>(x, y); }
__ALWAYS_INLINE auto max(uint4 x, uint4 y) __NOEXCEPT { return __spirv::__make_u_max_call<uint4>(x, y); }
__ALWAYS_INLINE auto max(uint8 x, uint8 y) __NOEXCEPT { return __spirv::__make_u_max_call<uint8>(x, y); }
__ALWAYS_INLINE auto max(uint16 x, uint16 y) __NOEXCEPT { return __spirv::__make_u_max_call<uint16>(x, y); };
__ALWAYS_INLINE auto max(ulong x, ulong y) __NOEXCEPT { return __spirv::__make_u_max_call<ulong>(x, y); }
__ALWAYS_INLINE auto max(ulong2 x, ulong2 y) __NOEXCEPT { return __spirv::__make_u_max_call<ulong2>(x, y); }
__ALWAYS_INLINE auto max(ulong3 x, ulong3 y) __NOEXCEPT { return __spirv::__make_u_max_call<ulong3>(x, y); }
__ALWAYS_INLINE auto max(ulong4 x, ulong4 y) __NOEXCEPT { return __spirv::__make_u_max_call<ulong4>(x, y); }
__ALWAYS_INLINE auto max(ulong8 x, ulong8 y) __NOEXCEPT { return __spirv::__make_u_max_call<ulong8>(x, y); }
__ALWAYS_INLINE auto max(ulong16 x, ulong16 y) __NOEXCEPT { return __spirv::__make_u_max_call<ulong16>(x, y); };


/// \brief returns (y < x ? y : x) per component
///
__ALWAYS_INLINE auto min(char x, char y) __NOEXCEPT { return __spirv::__make_s_min_call<char>(x, y); }
__ALWAYS_INLINE auto min(char2 x, char2 y) __NOEXCEPT { return __spirv::__make_s_min_call<char2>(x, y); }
__ALWAYS_INLINE auto min(char3 x, char3 y) __NOEXCEPT { return __spirv::__make_s_min_call<char3>(x, y); }
__ALWAYS_INLINE auto min(char4 x, char4 y) __NOEXCEPT { return __spirv::__make_s_min_call<char4>(x, y); }
__ALWAYS_INLINE auto min(char8 x, char8 y) __NOEXCEPT { return __spirv::__make_s_min_call<char8>(x, y); }
__ALWAYS_INLINE auto min(char16 x, char16 y) __NOEXCEPT { return __spirv::__make_s_min_call<char16>(x, y); };
__ALWAYS_INLINE auto min(short x, short y) __NOEXCEPT { return __spirv::__make_s_min_call<short>(x, y); }
__ALWAYS_INLINE auto min(short2 x, short2 y) __NOEXCEPT { return __spirv::__make_s_min_call<short2>(x, y); }
__ALWAYS_INLINE auto min(short3 x, short3 y) __NOEXCEPT { return __spirv::__make_s_min_call<short3>(x, y); }
__ALWAYS_INLINE auto min(short4 x, short4 y) __NOEXCEPT { return __spirv::__make_s_min_call<short4>(x, y); }
__ALWAYS_INLINE auto min(short8 x, short8 y) __NOEXCEPT { return __spirv::__make_s_min_call<short8>(x, y); }
__ALWAYS_INLINE auto min(short16 x, short16 y) __NOEXCEPT { return __spirv::__make_s_min_call<short16>(x, y); };
__ALWAYS_INLINE auto min(int x, int y) __NOEXCEPT { return __spirv::__make_s_min_call<int>(x, y); }
__ALWAYS_INLINE auto min(int2 x, int2 y) __NOEXCEPT { return __spirv::__make_s_min_call<int2>(x, y); }
__ALWAYS_INLINE auto min(int3 x, int3 y) __NOEXCEPT { return __spirv::__make_s_min_call<int3>(x, y); }
__ALWAYS_INLINE auto min(int4 x, int4 y) __NOEXCEPT { return __spirv::__make_s_min_call<int4>(x, y); }
__ALWAYS_INLINE auto min(int8 x, int8 y) __NOEXCEPT { return __spirv::__make_s_min_call<int8>(x, y); }
__ALWAYS_INLINE auto min(int16 x, int16 y) __NOEXCEPT { return __spirv::__make_s_min_call<int16>(x, y); };
__ALWAYS_INLINE auto min(long x, long y) __NOEXCEPT { return __spirv::__make_s_min_call<long>(x, y); }
__ALWAYS_INLINE auto min(long2 x, long2 y) __NOEXCEPT { return __spirv::__make_s_min_call<long2>(x, y); }
__ALWAYS_INLINE auto min(long3 x, long3 y) __NOEXCEPT { return __spirv::__make_s_min_call<long3>(x, y); }
__ALWAYS_INLINE auto min(long4 x, long4 y) __NOEXCEPT { return __spirv::__make_s_min_call<long4>(x, y); }
__ALWAYS_INLINE auto min(long8 x, long8 y) __NOEXCEPT { return __spirv::__make_s_min_call<long8>(x, y); }
__ALWAYS_INLINE auto min(long16 x, long16 y) __NOEXCEPT { return __spirv::__make_s_min_call<long16>(x, y); };
__ALWAYS_INLINE auto min(uchar x, uchar y) __NOEXCEPT { return __spirv::__make_u_min_call<uchar>(x, y); }
__ALWAYS_INLINE auto min(uchar2 x, uchar2 y) __NOEXCEPT { return __spirv::__make_u_min_call<uchar2>(x, y); }
__ALWAYS_INLINE auto min(uchar3 x, uchar3 y) __NOEXCEPT { return __spirv::__make_u_min_call<uchar3>(x, y); }
__ALWAYS_INLINE auto min(uchar4 x, uchar4 y) __NOEXCEPT { return __spirv::__make_u_min_call<uchar4>(x, y); }
__ALWAYS_INLINE auto min(uchar8 x, uchar8 y) __NOEXCEPT { return __spirv::__make_u_min_call<uchar8>(x, y); }
__ALWAYS_INLINE auto min(uchar16 x, uchar16 y) __NOEXCEPT { return __spirv::__make_u_min_call<uchar16>(x, y); };
__ALWAYS_INLINE auto min(ushort x, ushort y) __NOEXCEPT { return __spirv::__make_u_min_call<ushort>(x, y); }
__ALWAYS_INLINE auto min(ushort2 x, ushort2 y) __NOEXCEPT { return __spirv::__make_u_min_call<ushort2>(x, y); }
__ALWAYS_INLINE auto min(ushort3 x, ushort3 y) __NOEXCEPT { return __spirv::__make_u_min_call<ushort3>(x, y); }
__ALWAYS_INLINE auto min(ushort4 x, ushort4 y) __NOEXCEPT { return __spirv::__make_u_min_call<ushort4>(x, y); }
__ALWAYS_INLINE auto min(ushort8 x, ushort8 y) __NOEXCEPT { return __spirv::__make_u_min_call<ushort8>(x, y); }
__ALWAYS_INLINE auto min(ushort16 x, ushort16 y) __NOEXCEPT { return __spirv::__make_u_min_call<ushort16>(x, y); };
__ALWAYS_INLINE auto min(uint x, uint y) __NOEXCEPT { return __spirv::__make_u_min_call<uint>(x, y); }
__ALWAYS_INLINE auto min(uint2 x, uint2 y) __NOEXCEPT { return __spirv::__make_u_min_call<uint2>(x, y); }
__ALWAYS_INLINE auto min(uint3 x, uint3 y) __NOEXCEPT { return __spirv::__make_u_min_call<uint3>(x, y); }
__ALWAYS_INLINE auto min(uint4 x, uint4 y) __NOEXCEPT { return __spirv::__make_u_min_call<uint4>(x, y); }
__ALWAYS_INLINE auto min(uint8 x, uint8 y) __NOEXCEPT { return __spirv::__make_u_min_call<uint8>(x, y); }
__ALWAYS_INLINE auto min(uint16 x, uint16 y) __NOEXCEPT { return __spirv::__make_u_min_call<uint16>(x, y); };
__ALWAYS_INLINE auto min(ulong x, ulong y) __NOEXCEPT { return __spirv::__make_u_min_call<ulong>(x, y); }
__ALWAYS_INLINE auto min(ulong2 x, ulong2 y) __NOEXCEPT { return __spirv::__make_u_min_call<ulong2>(x, y); }
__ALWAYS_INLINE auto min(ulong3 x, ulong3 y) __NOEXCEPT { return __spirv::__make_u_min_call<ulong3>(x, y); }
__ALWAYS_INLINE auto min(ulong4 x, ulong4 y) __NOEXCEPT { return __spirv::__make_u_min_call<ulong4>(x, y); }
__ALWAYS_INLINE auto min(ulong8 x, ulong8 y) __NOEXCEPT { return __spirv::__make_u_min_call<ulong8>(x, y); }
__ALWAYS_INLINE auto min(ulong16 x, ulong16 y) __NOEXCEPT { return __spirv::__make_u_min_call<ulong16>(x, y); };


/// \brief computes x*y and returns the high half of the product of x and y
///
__ALWAYS_INLINE auto mul_hi(char x, char y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<char>(x, y); }
__ALWAYS_INLINE auto mul_hi(char2 x, char2 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<char2>(x, y); }
__ALWAYS_INLINE auto mul_hi(char3 x, char3 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<char3>(x, y); }
__ALWAYS_INLINE auto mul_hi(char4 x, char4 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<char4>(x, y); }
__ALWAYS_INLINE auto mul_hi(char8 x, char8 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<char8>(x, y); }
__ALWAYS_INLINE auto mul_hi(char16 x, char16 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<char16>(x, y); };
__ALWAYS_INLINE auto mul_hi(short x, short y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<short>(x, y); }
__ALWAYS_INLINE auto mul_hi(short2 x, short2 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<short2>(x, y); }
__ALWAYS_INLINE auto mul_hi(short3 x, short3 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<short3>(x, y); }
__ALWAYS_INLINE auto mul_hi(short4 x, short4 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<short4>(x, y); }
__ALWAYS_INLINE auto mul_hi(short8 x, short8 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<short8>(x, y); }
__ALWAYS_INLINE auto mul_hi(short16 x, short16 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<short16>(x, y); };
__ALWAYS_INLINE auto mul_hi(int x, int y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<int>(x, y); }
__ALWAYS_INLINE auto mul_hi(int2 x, int2 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<int2>(x, y); }
__ALWAYS_INLINE auto mul_hi(int3 x, int3 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<int3>(x, y); }
__ALWAYS_INLINE auto mul_hi(int4 x, int4 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<int4>(x, y); }
__ALWAYS_INLINE auto mul_hi(int8 x, int8 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<int8>(x, y); }
__ALWAYS_INLINE auto mul_hi(int16 x, int16 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<int16>(x, y); };
__ALWAYS_INLINE auto mul_hi(long x, long y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<long>(x, y); }
__ALWAYS_INLINE auto mul_hi(long2 x, long2 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<long2>(x, y); }
__ALWAYS_INLINE auto mul_hi(long3 x, long3 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<long3>(x, y); }
__ALWAYS_INLINE auto mul_hi(long4 x, long4 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<long4>(x, y); }
__ALWAYS_INLINE auto mul_hi(long8 x, long8 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<long8>(x, y); }
__ALWAYS_INLINE auto mul_hi(long16 x, long16 y) __NOEXCEPT { return __spirv::__make_s_mul_hi_call<long16>(x, y); };
__ALWAYS_INLINE auto mul_hi(uchar x, uchar y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<uchar>(x, y); }
__ALWAYS_INLINE auto mul_hi(uchar2 x, uchar2 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<uchar2>(x, y); }
__ALWAYS_INLINE auto mul_hi(uchar3 x, uchar3 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<uchar3>(x, y); }
__ALWAYS_INLINE auto mul_hi(uchar4 x, uchar4 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<uchar4>(x, y); }
__ALWAYS_INLINE auto mul_hi(uchar8 x, uchar8 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<uchar8>(x, y); }
__ALWAYS_INLINE auto mul_hi(uchar16 x, uchar16 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<uchar16>(x, y); };
__ALWAYS_INLINE auto mul_hi(ushort x, ushort y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<ushort>(x, y); }
__ALWAYS_INLINE auto mul_hi(ushort2 x, ushort2 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<ushort2>(x, y); }
__ALWAYS_INLINE auto mul_hi(ushort3 x, ushort3 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<ushort3>(x, y); }
__ALWAYS_INLINE auto mul_hi(ushort4 x, ushort4 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<ushort4>(x, y); }
__ALWAYS_INLINE auto mul_hi(ushort8 x, ushort8 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<ushort8>(x, y); }
__ALWAYS_INLINE auto mul_hi(ushort16 x, ushort16 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<ushort16>(x, y); };
__ALWAYS_INLINE auto mul_hi(uint x, uint y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<uint>(x, y); }
__ALWAYS_INLINE auto mul_hi(uint2 x, uint2 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<uint2>(x, y); }
__ALWAYS_INLINE auto mul_hi(uint3 x, uint3 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<uint3>(x, y); }
__ALWAYS_INLINE auto mul_hi(uint4 x, uint4 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<uint4>(x, y); }
__ALWAYS_INLINE auto mul_hi(uint8 x, uint8 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<uint8>(x, y); }
__ALWAYS_INLINE auto mul_hi(uint16 x, uint16 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<uint16>(x, y); };
__ALWAYS_INLINE auto mul_hi(ulong x, ulong y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<ulong>(x, y); }
__ALWAYS_INLINE auto mul_hi(ulong2 x, ulong2 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<ulong2>(x, y); }
__ALWAYS_INLINE auto mul_hi(ulong3 x, ulong3 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<ulong3>(x, y); }
__ALWAYS_INLINE auto mul_hi(ulong4 x, ulong4 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<ulong4>(x, y); }
__ALWAYS_INLINE auto mul_hi(ulong8 x, ulong8 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<ulong8>(x, y); }
__ALWAYS_INLINE auto mul_hi(ulong16 x, ulong16 y) __NOEXCEPT { return __spirv::__make_u_mul_hi_call<ulong16>(x, y); };


/// \brief returns x-y and saturates the result
///
__ALWAYS_INLINE auto sub_sat(char x, char y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<char>(x, y); }
__ALWAYS_INLINE auto sub_sat(char2 x, char2 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<char2>(x, y); }
__ALWAYS_INLINE auto sub_sat(char3 x, char3 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<char3>(x, y); }
__ALWAYS_INLINE auto sub_sat(char4 x, char4 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<char4>(x, y); }
__ALWAYS_INLINE auto sub_sat(char8 x, char8 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<char8>(x, y); }
__ALWAYS_INLINE auto sub_sat(char16 x, char16 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<char16>(x, y); };
__ALWAYS_INLINE auto sub_sat(short x, short y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<short>(x, y); }
__ALWAYS_INLINE auto sub_sat(short2 x, short2 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<short2>(x, y); }
__ALWAYS_INLINE auto sub_sat(short3 x, short3 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<short3>(x, y); }
__ALWAYS_INLINE auto sub_sat(short4 x, short4 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<short4>(x, y); }
__ALWAYS_INLINE auto sub_sat(short8 x, short8 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<short8>(x, y); }
__ALWAYS_INLINE auto sub_sat(short16 x, short16 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<short16>(x, y); };
__ALWAYS_INLINE auto sub_sat(int x, int y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<int>(x, y); }
__ALWAYS_INLINE auto sub_sat(int2 x, int2 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<int2>(x, y); }
__ALWAYS_INLINE auto sub_sat(int3 x, int3 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<int3>(x, y); }
__ALWAYS_INLINE auto sub_sat(int4 x, int4 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<int4>(x, y); }
__ALWAYS_INLINE auto sub_sat(int8 x, int8 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<int8>(x, y); }
__ALWAYS_INLINE auto sub_sat(int16 x, int16 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<int16>(x, y); };
__ALWAYS_INLINE auto sub_sat(long x, long y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<long>(x, y); }
__ALWAYS_INLINE auto sub_sat(long2 x, long2 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<long2>(x, y); }
__ALWAYS_INLINE auto sub_sat(long3 x, long3 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<long3>(x, y); }
__ALWAYS_INLINE auto sub_sat(long4 x, long4 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<long4>(x, y); }
__ALWAYS_INLINE auto sub_sat(long8 x, long8 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<long8>(x, y); }
__ALWAYS_INLINE auto sub_sat(long16 x, long16 y) __NOEXCEPT { return __spirv::__make_s_sub_sat_call<long16>(x, y); };
__ALWAYS_INLINE auto sub_sat(uchar x, uchar y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<uchar>(x, y); }
__ALWAYS_INLINE auto sub_sat(uchar2 x, uchar2 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<uchar2>(x, y); }
__ALWAYS_INLINE auto sub_sat(uchar3 x, uchar3 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<uchar3>(x, y); }
__ALWAYS_INLINE auto sub_sat(uchar4 x, uchar4 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<uchar4>(x, y); }
__ALWAYS_INLINE auto sub_sat(uchar8 x, uchar8 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<uchar8>(x, y); }
__ALWAYS_INLINE auto sub_sat(uchar16 x, uchar16 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<uchar16>(x, y); };
__ALWAYS_INLINE auto sub_sat(ushort x, ushort y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<ushort>(x, y); }
__ALWAYS_INLINE auto sub_sat(ushort2 x, ushort2 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<ushort2>(x, y); }
__ALWAYS_INLINE auto sub_sat(ushort3 x, ushort3 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<ushort3>(x, y); }
__ALWAYS_INLINE auto sub_sat(ushort4 x, ushort4 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<ushort4>(x, y); }
__ALWAYS_INLINE auto sub_sat(ushort8 x, ushort8 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<ushort8>(x, y); }
__ALWAYS_INLINE auto sub_sat(ushort16 x, ushort16 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<ushort16>(x, y); };
__ALWAYS_INLINE auto sub_sat(uint x, uint y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<uint>(x, y); }
__ALWAYS_INLINE auto sub_sat(uint2 x, uint2 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<uint2>(x, y); }
__ALWAYS_INLINE auto sub_sat(uint3 x, uint3 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<uint3>(x, y); }
__ALWAYS_INLINE auto sub_sat(uint4 x, uint4 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<uint4>(x, y); }
__ALWAYS_INLINE auto sub_sat(uint8 x, uint8 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<uint8>(x, y); }
__ALWAYS_INLINE auto sub_sat(uint16 x, uint16 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<uint16>(x, y); };
__ALWAYS_INLINE auto sub_sat(ulong x, ulong y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<ulong>(x, y); }
__ALWAYS_INLINE auto sub_sat(ulong2 x, ulong2 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<ulong2>(x, y); }
__ALWAYS_INLINE auto sub_sat(ulong3 x, ulong3 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<ulong3>(x, y); }
__ALWAYS_INLINE auto sub_sat(ulong4 x, ulong4 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<ulong4>(x, y); }
__ALWAYS_INLINE auto sub_sat(ulong8 x, ulong8 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<ulong8>(x, y); }
__ALWAYS_INLINE auto sub_sat(ulong16 x, ulong16 y) __NOEXCEPT { return __spirv::__make_u_sub_sat_call<ulong16>(x, y); };


/// \brief multiplies two 24-bits values x and y. both x and y should be in range [2^23-1; 2^23-1] for signed and [0; 2^24-1] for unsigned types - if this condition isn't met, result is undefined
///
__ALWAYS_INLINE auto mul24(int x, int y) __NOEXCEPT { return __spirv::__make_s_mul24_call<int>(x, y); }
__ALWAYS_INLINE auto mul24(int2 x, int2 y) __NOEXCEPT { return __spirv::__make_s_mul24_call<int2>(x, y); }
__ALWAYS_INLINE auto mul24(int3 x, int3 y) __NOEXCEPT { return __spirv::__make_s_mul24_call<int3>(x, y); }
__ALWAYS_INLINE auto mul24(int4 x, int4 y) __NOEXCEPT { return __spirv::__make_s_mul24_call<int4>(x, y); }
__ALWAYS_INLINE auto mul24(int8 x, int8 y) __NOEXCEPT { return __spirv::__make_s_mul24_call<int8>(x, y); }
__ALWAYS_INLINE auto mul24(int16 x, int16 y) __NOEXCEPT { return __spirv::__make_s_mul24_call<int16>(x, y); };
__ALWAYS_INLINE auto mul24(uint x, uint y) __NOEXCEPT { return __spirv::__make_u_mul24_call<uint>(x, y); }
__ALWAYS_INLINE auto mul24(uint2 x, uint2 y) __NOEXCEPT { return __spirv::__make_u_mul24_call<uint2>(x, y); }
__ALWAYS_INLINE auto mul24(uint3 x, uint3 y) __NOEXCEPT { return __spirv::__make_u_mul24_call<uint3>(x, y); }
__ALWAYS_INLINE auto mul24(uint4 x, uint4 y) __NOEXCEPT { return __spirv::__make_u_mul24_call<uint4>(x, y); }
__ALWAYS_INLINE auto mul24(uint8 x, uint8 y) __NOEXCEPT { return __spirv::__make_u_mul24_call<uint8>(x, y); }
__ALWAYS_INLINE auto mul24(uint16 x, uint16 y) __NOEXCEPT { return __spirv::__make_u_mul24_call<uint16>(x, y); };


/// \brief clamps x to given [minval, maxval] range, per component. Undefined if minval > maxval
///
__ALWAYS_INLINE auto clamp(char x, char minval, char maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<char>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(char2 x, char2 minval, char2 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<char2>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(char3 x, char3 minval, char3 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<char3>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(char4 x, char4 minval, char4 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<char4>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(char8 x, char8 minval, char8 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<char8>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(char16 x, char16 minval, char16 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<char16>(x, minval, maxval); };
__ALWAYS_INLINE auto clamp(short x, short minval, short maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<short>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(short2 x, short2 minval, short2 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<short2>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(short3 x, short3 minval, short3 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<short3>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(short4 x, short4 minval, short4 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<short4>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(short8 x, short8 minval, short8 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<short8>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(short16 x, short16 minval, short16 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<short16>(x, minval, maxval); };
__ALWAYS_INLINE auto clamp(int x, int minval, int maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<int>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(int2 x, int2 minval, int2 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<int2>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(int3 x, int3 minval, int3 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<int3>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(int4 x, int4 minval, int4 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<int4>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(int8 x, int8 minval, int8 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<int8>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(int16 x, int16 minval, int16 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<int16>(x, minval, maxval); };
__ALWAYS_INLINE auto clamp(long x, long minval, long maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<long>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(long2 x, long2 minval, long2 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<long2>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(long3 x, long3 minval, long3 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<long3>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(long4 x, long4 minval, long4 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<long4>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(long8 x, long8 minval, long8 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<long8>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(long16 x, long16 minval, long16 maxval) __NOEXCEPT { return __spirv::__make_s_clamp_call<long16>(x, minval, maxval); };
__ALWAYS_INLINE auto clamp(uchar x, uchar minval, uchar maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<uchar>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(uchar2 x, uchar2 minval, uchar2 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<uchar2>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(uchar3 x, uchar3 minval, uchar3 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<uchar3>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(uchar4 x, uchar4 minval, uchar4 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<uchar4>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(uchar8 x, uchar8 minval, uchar8 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<uchar8>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(uchar16 x, uchar16 minval, uchar16 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<uchar16>(x, minval, maxval); };
__ALWAYS_INLINE auto clamp(ushort x, ushort minval, ushort maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<ushort>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(ushort2 x, ushort2 minval, ushort2 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<ushort2>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(ushort3 x, ushort3 minval, ushort3 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<ushort3>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(ushort4 x, ushort4 minval, ushort4 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<ushort4>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(ushort8 x, ushort8 minval, ushort8 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<ushort8>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(ushort16 x, ushort16 minval, ushort16 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<ushort16>(x, minval, maxval); };
__ALWAYS_INLINE auto clamp(uint x, uint minval, uint maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<uint>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(uint2 x, uint2 minval, uint2 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<uint2>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(uint3 x, uint3 minval, uint3 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<uint3>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(uint4 x, uint4 minval, uint4 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<uint4>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(uint8 x, uint8 minval, uint8 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<uint8>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(uint16 x, uint16 minval, uint16 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<uint16>(x, minval, maxval); };
__ALWAYS_INLINE auto clamp(ulong x, ulong minval, ulong maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<ulong>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(ulong2 x, ulong2 minval, ulong2 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<ulong2>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(ulong3 x, ulong3 minval, ulong3 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<ulong3>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(ulong4 x, ulong4 minval, ulong4 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<ulong4>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(ulong8 x, ulong8 minval, ulong8 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<ulong8>(x, minval, maxval); }
__ALWAYS_INLINE auto clamp(ulong16 x, ulong16 minval, ulong16 maxval) __NOEXCEPT { return __spirv::__make_u_clamp_call<ulong16>(x, minval, maxval); };


/// \brief returns mul_hi(a,b) + c
///
__ALWAYS_INLINE auto mad_hi(char a, char b, char c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<char>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(char2 a, char2 b, char2 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<char2>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(char3 a, char3 b, char3 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<char3>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(char4 a, char4 b, char4 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<char4>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(char8 a, char8 b, char8 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<char8>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(char16 a, char16 b, char16 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<char16>(a, b, c); };
__ALWAYS_INLINE auto mad_hi(short a, short b, short c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<short>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(short2 a, short2 b, short2 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<short2>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(short3 a, short3 b, short3 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<short3>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(short4 a, short4 b, short4 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<short4>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(short8 a, short8 b, short8 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<short8>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(short16 a, short16 b, short16 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<short16>(a, b, c); };
__ALWAYS_INLINE auto mad_hi(int a, int b, int c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<int>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(int2 a, int2 b, int2 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<int2>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(int3 a, int3 b, int3 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<int3>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(int4 a, int4 b, int4 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<int4>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(int8 a, int8 b, int8 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<int8>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(int16 a, int16 b, int16 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<int16>(a, b, c); };
__ALWAYS_INLINE auto mad_hi(long a, long b, long c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<long>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(long2 a, long2 b, long2 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<long2>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(long3 a, long3 b, long3 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<long3>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(long4 a, long4 b, long4 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<long4>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(long8 a, long8 b, long8 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<long8>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(long16 a, long16 b, long16 c) __NOEXCEPT { return __spirv::__make_s_mad_hi_call<long16>(a, b, c); };
__ALWAYS_INLINE auto mad_hi(uchar a, uchar b, uchar c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<uchar>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(uchar2 a, uchar2 b, uchar2 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<uchar2>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(uchar3 a, uchar3 b, uchar3 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<uchar3>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(uchar4 a, uchar4 b, uchar4 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<uchar4>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(uchar8 a, uchar8 b, uchar8 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<uchar8>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(uchar16 a, uchar16 b, uchar16 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<uchar16>(a, b, c); };
__ALWAYS_INLINE auto mad_hi(ushort a, ushort b, ushort c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<ushort>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(ushort2 a, ushort2 b, ushort2 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<ushort2>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(ushort3 a, ushort3 b, ushort3 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<ushort3>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(ushort4 a, ushort4 b, ushort4 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<ushort4>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(ushort8 a, ushort8 b, ushort8 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<ushort8>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(ushort16 a, ushort16 b, ushort16 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<ushort16>(a, b, c); };
__ALWAYS_INLINE auto mad_hi(uint a, uint b, uint c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<uint>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(uint2 a, uint2 b, uint2 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<uint2>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(uint3 a, uint3 b, uint3 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<uint3>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(uint4 a, uint4 b, uint4 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<uint4>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(uint8 a, uint8 b, uint8 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<uint8>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(uint16 a, uint16 b, uint16 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<uint16>(a, b, c); };
__ALWAYS_INLINE auto mad_hi(ulong a, ulong b, ulong c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<ulong>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(ulong2 a, ulong2 b, ulong2 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<ulong2>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(ulong3 a, ulong3 b, ulong3 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<ulong3>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(ulong4 a, ulong4 b, ulong4 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<ulong4>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(ulong8 a, ulong8 b, ulong8 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<ulong8>(a, b, c); }
__ALWAYS_INLINE auto mad_hi(ulong16 a, ulong16 b, ulong16 c) __NOEXCEPT { return __spirv::__make_u_mad_hi_call<ulong16>(a, b, c); };

/// \brief returns a*b + c and satures the result
///
__ALWAYS_INLINE auto mad_sat(char a, char b, char c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<char>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(char2 a, char2 b, char2 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<char2>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(char3 a, char3 b, char3 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<char3>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(char4 a, char4 b, char4 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<char4>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(char8 a, char8 b, char8 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<char8>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(char16 a, char16 b, char16 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<char16>(a, b, c); };
__ALWAYS_INLINE auto mad_sat(short a, short b, short c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<short>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(short2 a, short2 b, short2 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<short2>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(short3 a, short3 b, short3 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<short3>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(short4 a, short4 b, short4 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<short4>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(short8 a, short8 b, short8 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<short8>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(short16 a, short16 b, short16 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<short16>(a, b, c); };
__ALWAYS_INLINE auto mad_sat(int a, int b, int c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<int>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(int2 a, int2 b, int2 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<int2>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(int3 a, int3 b, int3 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<int3>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(int4 a, int4 b, int4 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<int4>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(int8 a, int8 b, int8 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<int8>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(int16 a, int16 b, int16 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<int16>(a, b, c); };
__ALWAYS_INLINE auto mad_sat(long a, long b, long c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<long>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(long2 a, long2 b, long2 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<long2>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(long3 a, long3 b, long3 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<long3>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(long4 a, long4 b, long4 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<long4>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(long8 a, long8 b, long8 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<long8>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(long16 a, long16 b, long16 c) __NOEXCEPT { return __spirv::__make_s_mad_sat_call<long16>(a, b, c); };
__ALWAYS_INLINE auto mad_sat(uchar a, uchar b, uchar c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<uchar>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(uchar2 a, uchar2 b, uchar2 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<uchar2>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(uchar3 a, uchar3 b, uchar3 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<uchar3>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(uchar4 a, uchar4 b, uchar4 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<uchar4>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(uchar8 a, uchar8 b, uchar8 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<uchar8>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(uchar16 a, uchar16 b, uchar16 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<uchar16>(a, b, c); };
__ALWAYS_INLINE auto mad_sat(ushort a, ushort b, ushort c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<ushort>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(ushort2 a, ushort2 b, ushort2 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<ushort2>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(ushort3 a, ushort3 b, ushort3 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<ushort3>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(ushort4 a, ushort4 b, ushort4 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<ushort4>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(ushort8 a, ushort8 b, ushort8 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<ushort8>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(ushort16 a, ushort16 b, ushort16 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<ushort16>(a, b, c); };
__ALWAYS_INLINE auto mad_sat(uint a, uint b, uint c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<uint>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(uint2 a, uint2 b, uint2 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<uint2>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(uint3 a, uint3 b, uint3 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<uint3>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(uint4 a, uint4 b, uint4 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<uint4>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(uint8 a, uint8 b, uint8 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<uint8>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(uint16 a, uint16 b, uint16 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<uint16>(a, b, c); };
__ALWAYS_INLINE auto mad_sat(ulong a, ulong b, ulong c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<ulong>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(ulong2 a, ulong2 b, ulong2 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<ulong2>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(ulong3 a, ulong3 b, ulong3 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<ulong3>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(ulong4 a, ulong4 b, ulong4 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<ulong4>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(ulong8 a, ulong8 b, ulong8 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<ulong8>(a, b, c); }
__ALWAYS_INLINE auto mad_sat(ulong16 a, ulong16 b, ulong16 c) __NOEXCEPT { return __spirv::__make_u_mad_sat_call<ulong16>(a, b, c); };


/// \brief multiplies two 24-bits values x and y (see mul24) and adds 32-bits z to 32-bits result
///
__ALWAYS_INLINE auto mad24(int x, int y, int z) __NOEXCEPT { return __spirv::__make_s_mad24_call<int>(x, y, z); }
__ALWAYS_INLINE auto mad24(int2 x, int2 y, int2 z) __NOEXCEPT { return __spirv::__make_s_mad24_call<int2>(x, y, z); }
__ALWAYS_INLINE auto mad24(int3 x, int3 y, int3 z) __NOEXCEPT { return __spirv::__make_s_mad24_call<int3>(x, y, z); }
__ALWAYS_INLINE auto mad24(int4 x, int4 y, int4 z) __NOEXCEPT { return __spirv::__make_s_mad24_call<int4>(x, y, z); }
__ALWAYS_INLINE auto mad24(int8 x, int8 y, int8 z) __NOEXCEPT { return __spirv::__make_s_mad24_call<int8>(x, y, z); }
__ALWAYS_INLINE auto mad24(int16 x, int16 y, int16 z) __NOEXCEPT { return __spirv::__make_s_mad24_call<int16>(x, y, z); };
__ALWAYS_INLINE auto mad24(uint x, uint y, uint z) __NOEXCEPT { return __spirv::__make_u_mad24_call<uint>(x, y, z); }
__ALWAYS_INLINE auto mad24(uint2 x, uint2 y, uint2 z) __NOEXCEPT { return __spirv::__make_u_mad24_call<uint2>(x, y, z); }
__ALWAYS_INLINE auto mad24(uint3 x, uint3 y, uint3 z) __NOEXCEPT { return __spirv::__make_u_mad24_call<uint3>(x, y, z); }
__ALWAYS_INLINE auto mad24(uint4 x, uint4 y, uint4 z) __NOEXCEPT { return __spirv::__make_u_mad24_call<uint4>(x, y, z); }
__ALWAYS_INLINE auto mad24(uint8 x, uint8 y, uint8 z) __NOEXCEPT { return __spirv::__make_u_mad24_call<uint8>(x, y, z); }
__ALWAYS_INLINE auto mad24(uint16 x, uint16 y, uint16 z) __NOEXCEPT { return __spirv::__make_u_mad24_call<uint16>(x, y, z); };


/// \brief bits in each of v's elements are rotated left by amount given in corresponding i's element
///
__ALWAYS_INLINE auto rotate(char v, char i) __NOEXCEPT { return __spirv::__make_rotate_call<char>(v, i); }
__ALWAYS_INLINE auto rotate(char2 v, char2 i) __NOEXCEPT { return __spirv::__make_rotate_call<char2>(v, i); }
__ALWAYS_INLINE auto rotate(char3 v, char3 i) __NOEXCEPT { return __spirv::__make_rotate_call<char3>(v, i); }
__ALWAYS_INLINE auto rotate(char4 v, char4 i) __NOEXCEPT { return __spirv::__make_rotate_call<char4>(v, i); }
__ALWAYS_INLINE auto rotate(char8 v, char8 i) __NOEXCEPT { return __spirv::__make_rotate_call<char8>(v, i); }
__ALWAYS_INLINE auto rotate(char16 v, char16 i) __NOEXCEPT { return __spirv::__make_rotate_call<char16>(v, i); };
__ALWAYS_INLINE auto rotate(short v, short i) __NOEXCEPT { return __spirv::__make_rotate_call<short>(v, i); }
__ALWAYS_INLINE auto rotate(short2 v, short2 i) __NOEXCEPT { return __spirv::__make_rotate_call<short2>(v, i); }
__ALWAYS_INLINE auto rotate(short3 v, short3 i) __NOEXCEPT { return __spirv::__make_rotate_call<short3>(v, i); }
__ALWAYS_INLINE auto rotate(short4 v, short4 i) __NOEXCEPT { return __spirv::__make_rotate_call<short4>(v, i); }
__ALWAYS_INLINE auto rotate(short8 v, short8 i) __NOEXCEPT { return __spirv::__make_rotate_call<short8>(v, i); }
__ALWAYS_INLINE auto rotate(short16 v, short16 i) __NOEXCEPT { return __spirv::__make_rotate_call<short16>(v, i); };
__ALWAYS_INLINE auto rotate(int v, int i) __NOEXCEPT { return __spirv::__make_rotate_call<int>(v, i); }
__ALWAYS_INLINE auto rotate(int2 v, int2 i) __NOEXCEPT { return __spirv::__make_rotate_call<int2>(v, i); }
__ALWAYS_INLINE auto rotate(int3 v, int3 i) __NOEXCEPT { return __spirv::__make_rotate_call<int3>(v, i); }
__ALWAYS_INLINE auto rotate(int4 v, int4 i) __NOEXCEPT { return __spirv::__make_rotate_call<int4>(v, i); }
__ALWAYS_INLINE auto rotate(int8 v, int8 i) __NOEXCEPT { return __spirv::__make_rotate_call<int8>(v, i); }
__ALWAYS_INLINE auto rotate(int16 v, int16 i) __NOEXCEPT { return __spirv::__make_rotate_call<int16>(v, i); };
__ALWAYS_INLINE auto rotate(long v, long i) __NOEXCEPT { return __spirv::__make_rotate_call<long>(v, i); }
__ALWAYS_INLINE auto rotate(long2 v, long2 i) __NOEXCEPT { return __spirv::__make_rotate_call<long2>(v, i); }
__ALWAYS_INLINE auto rotate(long3 v, long3 i) __NOEXCEPT { return __spirv::__make_rotate_call<long3>(v, i); }
__ALWAYS_INLINE auto rotate(long4 v, long4 i) __NOEXCEPT { return __spirv::__make_rotate_call<long4>(v, i); }
__ALWAYS_INLINE auto rotate(long8 v, long8 i) __NOEXCEPT { return __spirv::__make_rotate_call<long8>(v, i); }
__ALWAYS_INLINE auto rotate(long16 v, long16 i) __NOEXCEPT { return __spirv::__make_rotate_call<long16>(v, i); };
__ALWAYS_INLINE auto rotate(uchar v, uchar i) __NOEXCEPT { return __spirv::__make_rotate_call<uchar>(v, i); }
__ALWAYS_INLINE auto rotate(uchar2 v, uchar2 i) __NOEXCEPT { return __spirv::__make_rotate_call<uchar2>(v, i); }
__ALWAYS_INLINE auto rotate(uchar3 v, uchar3 i) __NOEXCEPT { return __spirv::__make_rotate_call<uchar3>(v, i); }
__ALWAYS_INLINE auto rotate(uchar4 v, uchar4 i) __NOEXCEPT { return __spirv::__make_rotate_call<uchar4>(v, i); }
__ALWAYS_INLINE auto rotate(uchar8 v, uchar8 i) __NOEXCEPT { return __spirv::__make_rotate_call<uchar8>(v, i); }
__ALWAYS_INLINE auto rotate(uchar16 v, uchar16 i) __NOEXCEPT { return __spirv::__make_rotate_call<uchar16>(v, i); };
__ALWAYS_INLINE auto rotate(ushort v, ushort i) __NOEXCEPT { return __spirv::__make_rotate_call<ushort>(v, i); }
__ALWAYS_INLINE auto rotate(ushort2 v, ushort2 i) __NOEXCEPT { return __spirv::__make_rotate_call<ushort2>(v, i); }
__ALWAYS_INLINE auto rotate(ushort3 v, ushort3 i) __NOEXCEPT { return __spirv::__make_rotate_call<ushort3>(v, i); }
__ALWAYS_INLINE auto rotate(ushort4 v, ushort4 i) __NOEXCEPT { return __spirv::__make_rotate_call<ushort4>(v, i); }
__ALWAYS_INLINE auto rotate(ushort8 v, ushort8 i) __NOEXCEPT { return __spirv::__make_rotate_call<ushort8>(v, i); }
__ALWAYS_INLINE auto rotate(ushort16 v, ushort16 i) __NOEXCEPT { return __spirv::__make_rotate_call<ushort16>(v, i); };
__ALWAYS_INLINE auto rotate(uint v, uint i) __NOEXCEPT { return __spirv::__make_rotate_call<uint>(v, i); }
__ALWAYS_INLINE auto rotate(uint2 v, uint2 i) __NOEXCEPT { return __spirv::__make_rotate_call<uint2>(v, i); }
__ALWAYS_INLINE auto rotate(uint3 v, uint3 i) __NOEXCEPT { return __spirv::__make_rotate_call<uint3>(v, i); }
__ALWAYS_INLINE auto rotate(uint4 v, uint4 i) __NOEXCEPT { return __spirv::__make_rotate_call<uint4>(v, i); }
__ALWAYS_INLINE auto rotate(uint8 v, uint8 i) __NOEXCEPT { return __spirv::__make_rotate_call<uint8>(v, i); }
__ALWAYS_INLINE auto rotate(uint16 v, uint16 i) __NOEXCEPT { return __spirv::__make_rotate_call<uint16>(v, i); };
__ALWAYS_INLINE auto rotate(ulong v, ulong i) __NOEXCEPT { return __spirv::__make_rotate_call<ulong>(v, i); }
__ALWAYS_INLINE auto rotate(ulong2 v, ulong2 i) __NOEXCEPT { return __spirv::__make_rotate_call<ulong2>(v, i); }
__ALWAYS_INLINE auto rotate(ulong3 v, ulong3 i) __NOEXCEPT { return __spirv::__make_rotate_call<ulong3>(v, i); }
__ALWAYS_INLINE auto rotate(ulong4 v, ulong4 i) __NOEXCEPT { return __spirv::__make_rotate_call<ulong4>(v, i); }
__ALWAYS_INLINE auto rotate(ulong8 v, ulong8 i) __NOEXCEPT { return __spirv::__make_rotate_call<ulong8>(v, i); }
__ALWAYS_INLINE auto rotate(ulong16 v, ulong16 i) __NOEXCEPT { return __spirv::__make_rotate_call<ulong16>(v, i); };


/// \brief returns |x| per component
///
__ALWAYS_INLINE auto abs(char x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<char>>(x); }
__ALWAYS_INLINE auto abs(char2 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<char2>>(x); }
__ALWAYS_INLINE auto abs(char3 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<char3>>(x); }
__ALWAYS_INLINE auto abs(char4 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<char4>>(x); }
__ALWAYS_INLINE auto abs(char8 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<char8>>(x); }
__ALWAYS_INLINE auto abs(char16 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<char16>>(x); };
__ALWAYS_INLINE auto abs(short x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<short>>(x); }
__ALWAYS_INLINE auto abs(short2 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<short2>>(x); }
__ALWAYS_INLINE auto abs(short3 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<short3>>(x); }
__ALWAYS_INLINE auto abs(short4 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<short4>>(x); }
__ALWAYS_INLINE auto abs(short8 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<short8>>(x); }
__ALWAYS_INLINE auto abs(short16 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<short16>>(x); };
__ALWAYS_INLINE auto abs(int x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<int>>(x); }
__ALWAYS_INLINE auto abs(int2 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<int2>>(x); }
__ALWAYS_INLINE auto abs(int3 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<int3>>(x); }
__ALWAYS_INLINE auto abs(int4 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<int4>>(x); }
__ALWAYS_INLINE auto abs(int8 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<int8>>(x); }
__ALWAYS_INLINE auto abs(int16 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<int16>>(x); };
__ALWAYS_INLINE auto abs(long x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<long>>(x); }
__ALWAYS_INLINE auto abs(long2 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<long2>>(x); }
__ALWAYS_INLINE auto abs(long3 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<long3>>(x); }
__ALWAYS_INLINE auto abs(long4 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<long4>>(x); }
__ALWAYS_INLINE auto abs(long8 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<long8>>(x); }
__ALWAYS_INLINE auto abs(long16 x) __NOEXCEPT { return __spirv::__make_s_abs_call<make_unsigned_t<long16>>(x); };
__ALWAYS_INLINE auto abs(uchar x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<uchar>>(x); }
__ALWAYS_INLINE auto abs(uchar2 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<uchar2>>(x); }
__ALWAYS_INLINE auto abs(uchar3 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<uchar3>>(x); }
__ALWAYS_INLINE auto abs(uchar4 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<uchar4>>(x); }
__ALWAYS_INLINE auto abs(uchar8 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<uchar8>>(x); }
__ALWAYS_INLINE auto abs(uchar16 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<uchar16>>(x); };
__ALWAYS_INLINE auto abs(ushort x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<ushort>>(x); }
__ALWAYS_INLINE auto abs(ushort2 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<ushort2>>(x); }
__ALWAYS_INLINE auto abs(ushort3 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<ushort3>>(x); }
__ALWAYS_INLINE auto abs(ushort4 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<ushort4>>(x); }
__ALWAYS_INLINE auto abs(ushort8 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<ushort8>>(x); }
__ALWAYS_INLINE auto abs(ushort16 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<ushort16>>(x); };
__ALWAYS_INLINE auto abs(uint x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<uint>>(x); }
__ALWAYS_INLINE auto abs(uint2 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<uint2>>(x); }
__ALWAYS_INLINE auto abs(uint3 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<uint3>>(x); }
__ALWAYS_INLINE auto abs(uint4 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<uint4>>(x); }
__ALWAYS_INLINE auto abs(uint8 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<uint8>>(x); }
__ALWAYS_INLINE auto abs(uint16 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<uint16>>(x); };
__ALWAYS_INLINE auto abs(ulong x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<ulong>>(x); }
__ALWAYS_INLINE auto abs(ulong2 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<ulong2>>(x); }
__ALWAYS_INLINE auto abs(ulong3 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<ulong3>>(x); }
__ALWAYS_INLINE auto abs(ulong4 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<ulong4>>(x); }
__ALWAYS_INLINE auto abs(ulong8 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<ulong8>>(x); }
__ALWAYS_INLINE auto abs(ulong16 x) __NOEXCEPT { return __spirv::__make_u_abs_call<make_unsigned_t<ulong16>>(x); };


/// \brief returns |x-y| per component
///
__ALWAYS_INLINE auto abs_diff(char x, char y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<char>>(x, y); }
__ALWAYS_INLINE auto abs_diff(char2 x, char2 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<char2>>(x, y); }
__ALWAYS_INLINE auto abs_diff(char3 x, char3 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<char3>>(x, y); }
__ALWAYS_INLINE auto abs_diff(char4 x, char4 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<char4>>(x, y); }
__ALWAYS_INLINE auto abs_diff(char8 x, char8 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<char8>>(x, y); }
__ALWAYS_INLINE auto abs_diff(char16 x, char16 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<char16>>(x, y); };
__ALWAYS_INLINE auto abs_diff(short x, short y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<short>>(x, y); }
__ALWAYS_INLINE auto abs_diff(short2 x, short2 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<short2>>(x, y); }
__ALWAYS_INLINE auto abs_diff(short3 x, short3 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<short3>>(x, y); }
__ALWAYS_INLINE auto abs_diff(short4 x, short4 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<short4>>(x, y); }
__ALWAYS_INLINE auto abs_diff(short8 x, short8 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<short8>>(x, y); }
__ALWAYS_INLINE auto abs_diff(short16 x, short16 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<short16>>(x, y); };
__ALWAYS_INLINE auto abs_diff(int x, int y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<int>>(x, y); }
__ALWAYS_INLINE auto abs_diff(int2 x, int2 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<int2>>(x, y); }
__ALWAYS_INLINE auto abs_diff(int3 x, int3 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<int3>>(x, y); }
__ALWAYS_INLINE auto abs_diff(int4 x, int4 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<int4>>(x, y); }
__ALWAYS_INLINE auto abs_diff(int8 x, int8 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<int8>>(x, y); }
__ALWAYS_INLINE auto abs_diff(int16 x, int16 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<int16>>(x, y); };
__ALWAYS_INLINE auto abs_diff(long x, long y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<long>>(x, y); }
__ALWAYS_INLINE auto abs_diff(long2 x, long2 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<long2>>(x, y); }
__ALWAYS_INLINE auto abs_diff(long3 x, long3 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<long3>>(x, y); }
__ALWAYS_INLINE auto abs_diff(long4 x, long4 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<long4>>(x, y); }
__ALWAYS_INLINE auto abs_diff(long8 x, long8 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<long8>>(x, y); }
__ALWAYS_INLINE auto abs_diff(long16 x, long16 y) __NOEXCEPT { return __spirv::__make_s_abs_diff_call<make_unsigned_t<long16>>(x, y); };
__ALWAYS_INLINE auto abs_diff(uchar x, uchar y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<uchar>>(x, y); }
__ALWAYS_INLINE auto abs_diff(uchar2 x, uchar2 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<uchar2>>(x, y); }
__ALWAYS_INLINE auto abs_diff(uchar3 x, uchar3 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<uchar3>>(x, y); }
__ALWAYS_INLINE auto abs_diff(uchar4 x, uchar4 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<uchar4>>(x, y); }
__ALWAYS_INLINE auto abs_diff(uchar8 x, uchar8 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<uchar8>>(x, y); }
__ALWAYS_INLINE auto abs_diff(uchar16 x, uchar16 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<uchar16>>(x, y); };
__ALWAYS_INLINE auto abs_diff(ushort x, ushort y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<ushort>>(x, y); }
__ALWAYS_INLINE auto abs_diff(ushort2 x, ushort2 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<ushort2>>(x, y); }
__ALWAYS_INLINE auto abs_diff(ushort3 x, ushort3 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<ushort3>>(x, y); }
__ALWAYS_INLINE auto abs_diff(ushort4 x, ushort4 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<ushort4>>(x, y); }
__ALWAYS_INLINE auto abs_diff(ushort8 x, ushort8 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<ushort8>>(x, y); }
__ALWAYS_INLINE auto abs_diff(ushort16 x, ushort16 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<ushort16>>(x, y); };
__ALWAYS_INLINE auto abs_diff(uint x, uint y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<uint>>(x, y); }
__ALWAYS_INLINE auto abs_diff(uint2 x, uint2 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<uint2>>(x, y); }
__ALWAYS_INLINE auto abs_diff(uint3 x, uint3 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<uint3>>(x, y); }
__ALWAYS_INLINE auto abs_diff(uint4 x, uint4 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<uint4>>(x, y); }
__ALWAYS_INLINE auto abs_diff(uint8 x, uint8 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<uint8>>(x, y); }
__ALWAYS_INLINE auto abs_diff(uint16 x, uint16 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<uint16>>(x, y); };
__ALWAYS_INLINE auto abs_diff(ulong x, ulong y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<ulong>>(x, y); }
__ALWAYS_INLINE auto abs_diff(ulong2 x, ulong2 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<ulong2>>(x, y); }
__ALWAYS_INLINE auto abs_diff(ulong3 x, ulong3 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<ulong3>>(x, y); }
__ALWAYS_INLINE auto abs_diff(ulong4 x, ulong4 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<ulong4>>(x, y); }
__ALWAYS_INLINE auto abs_diff(ulong8 x, ulong8 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<ulong8>>(x, y); }
__ALWAYS_INLINE auto abs_diff(ulong16 x, ulong16 y) __NOEXCEPT { return __spirv::__make_u_abs_diff_call<make_unsigned_t<ulong16>>(x, y); };


/// \brief returns ((uppertype)hi << sizeof(hi)) | lo per component. uppertype is type which met: sizeof(uppertype) == 2*sizeof(hi) -> short for char, uint for ushort etc. There is no upsample for 64-bit arguments
///
__ALWAYS_INLINE auto upsample(char hi, uchar lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<char>>(hi, lo); }
__ALWAYS_INLINE auto upsample(char2 hi, uchar2 lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<char2>>(hi, lo); }
__ALWAYS_INLINE auto upsample(char3 hi, uchar3 lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<char3>>(hi, lo); }
__ALWAYS_INLINE auto upsample(char4 hi, uchar4 lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<char4>>(hi, lo); }
__ALWAYS_INLINE auto upsample(char8 hi, uchar8 lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<char8>>(hi, lo); }
__ALWAYS_INLINE auto upsample(char16 hi, uchar16 lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<char16>>(hi, lo); };
__ALWAYS_INLINE auto upsample(short hi, ushort lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<short>>(hi, lo); }
__ALWAYS_INLINE auto upsample(short2 hi, ushort2 lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<short2>>(hi, lo); }
__ALWAYS_INLINE auto upsample(short3 hi, ushort3 lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<short3>>(hi, lo); }
__ALWAYS_INLINE auto upsample(short4 hi, ushort4 lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<short4>>(hi, lo); }
__ALWAYS_INLINE auto upsample(short8 hi, ushort8 lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<short8>>(hi, lo); }
__ALWAYS_INLINE auto upsample(short16 hi, ushort16 lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<short16>>(hi, lo); };
__ALWAYS_INLINE auto upsample(int hi, uint lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<int>>(hi, lo); }
__ALWAYS_INLINE auto upsample(int2 hi, uint2 lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<int2>>(hi, lo); }
__ALWAYS_INLINE auto upsample(int3 hi, uint3 lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<int3>>(hi, lo); }
__ALWAYS_INLINE auto upsample(int4 hi, uint4 lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<int4>>(hi, lo); }
__ALWAYS_INLINE auto upsample(int8 hi, uint8 lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<int8>>(hi, lo); }
__ALWAYS_INLINE auto upsample(int16 hi, uint16 lo) __NOEXCEPT { return __spirv::__make_s_upsample_call<__details::__make_upper_t<int16>>(hi, lo); };
__ALWAYS_INLINE auto upsample(uchar hi, uchar lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<uchar>>(hi, lo); }
__ALWAYS_INLINE auto upsample(uchar2 hi, uchar2 lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<uchar2>>(hi, lo); }
__ALWAYS_INLINE auto upsample(uchar3 hi, uchar3 lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<uchar3>>(hi, lo); }
__ALWAYS_INLINE auto upsample(uchar4 hi, uchar4 lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<uchar4>>(hi, lo); }
__ALWAYS_INLINE auto upsample(uchar8 hi, uchar8 lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<uchar8>>(hi, lo); }
__ALWAYS_INLINE auto upsample(uchar16 hi, uchar16 lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<uchar16>>(hi, lo); };
__ALWAYS_INLINE auto upsample(ushort hi, ushort lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<ushort>>(hi, lo); }
__ALWAYS_INLINE auto upsample(ushort2 hi, ushort2 lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<ushort2>>(hi, lo); }
__ALWAYS_INLINE auto upsample(ushort3 hi, ushort3 lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<ushort3>>(hi, lo); }
__ALWAYS_INLINE auto upsample(ushort4 hi, ushort4 lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<ushort4>>(hi, lo); }
__ALWAYS_INLINE auto upsample(ushort8 hi, ushort8 lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<ushort8>>(hi, lo); }
__ALWAYS_INLINE auto upsample(ushort16 hi, ushort16 lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<ushort16>>(hi, lo); };
__ALWAYS_INLINE auto upsample(uint hi, uint lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<uint>>(hi, lo); }
__ALWAYS_INLINE auto upsample(uint2 hi, uint2 lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<uint2>>(hi, lo); }
__ALWAYS_INLINE auto upsample(uint3 hi, uint3 lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<uint3>>(hi, lo); }
__ALWAYS_INLINE auto upsample(uint4 hi, uint4 lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<uint4>>(hi, lo); }
__ALWAYS_INLINE auto upsample(uint8 hi, uint8 lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<uint8>>(hi, lo); }
__ALWAYS_INLINE auto upsample(uint16 hi, uint16 lo) __NOEXCEPT { return __spirv::__make_u_upsample_call<__details::__make_upper_t<uint16>>(hi, lo); };

}
