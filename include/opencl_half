//
// Copyright (c) 2015-2016 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
//

#pragma once

#include <__ocl_config.h>
#include <opencl_vector_load_store>

namespace cl
{
/// \brief Half wrapper class
///
/// The class methods perform implicit vload_half and vload_store operations if cl_khr_fp16 extension is not supported
struct fp16
{


    __ALWAYS_INLINE fp16() = default;
    __ALWAYS_INLINE fp16(const fp16 &) = default;
    __ALWAYS_INLINE fp16(fp16 &&) = default;
    __ALWAYS_INLINE fp16& operator=(const fp16 &) = default;
    __ALWAYS_INLINE fp16& operator=(fp16 &&) = default;

#ifdef cl_khr_fp16
    __ALWAYS_INLINE fp16(half r) __NOEXCEPT: __m(r) { }
    __ALWAYS_INLINE fp16& operator=(half r) __NOEXCEPT { __m = r; return *this; }
    __ALWAYS_INLINE operator half() const __NOEXCEPT { return __m;  }

    __ALWAYS_INLINE operator bool() const __NOEXCEPT {return __m; }

    __ALWAYS_INLINE fp16(float r) __NOEXCEPT : __m(r) { }
    __ALWAYS_INLINE fp16& operator=(float r) __NOEXCEPT { __m = r; return *this; }
    __ALWAYS_INLINE operator float() const __NOEXCEPT { return __m; }

#ifdef cl_khr_fp64
    __ALWAYS_INLINE fp16(double r) __NOEXCEPT : __m(r) { }
    __ALWAYS_INLINE fp16& operator=(double r) __NOEXCEPT { __m = r; return *this; }
    __ALWAYS_INLINE operator double() const __NOEXCEPT { return __m; }
#endif

    __ALWAYS_INLINE fp16& operator++() __NOEXCEPT { ++__m; return *this; }
    __ALWAYS_INLINE fp16 operator++(int)__NOEXCEPT { fp16 t(*this); ++__m; return t; }
    __ALWAYS_INLINE fp16& operator--() __NOEXCEPT { --__m; return *this; };
    __ALWAYS_INLINE fp16 operator--(int)__NOEXCEPT { fp16 t(*this); --__m; return t; }
    __ALWAYS_INLINE fp16& operator+=(const fp16 &r) __NOEXCEPT { __m += r.__m; return *this; }
    __ALWAYS_INLINE fp16& operator-=(const fp16 &r) __NOEXCEPT { __m -= r.__m; return *this; }
    __ALWAYS_INLINE fp16& operator*=(const fp16 &r) __NOEXCEPT { __m *= r.__m; return *this; }
    __ALWAYS_INLINE fp16& operator/=(const fp16 &r) __NOEXCEPT { __m /= r.__m; return *this; }
#else
    __ALWAYS_INLINE operator bool() const __NOEXCEPT { return cl::vload_half<1>(0, reinterpret_cast<const half *>(&__m)); }

    __ALWAYS_INLINE fp16(float r) __NOEXCEPT { cl::vstore_half(r, 0, reinterpret_cast<half *>(&__m)); }
    __ALWAYS_INLINE fp16& operator=(float r) __NOEXCEPT { cl::vstore_half(r, 0, reinterpret_cast<half *>(&__m)); return *this; }
    __ALWAYS_INLINE operator float() const __NOEXCEPT { return cl::vload_half<1>(0, reinterpret_cast<const half *>(&__m)); }

#ifdef cl_khr_fp64
    __ALWAYS_INLINE fp16(double r) __NOEXCEPT { cl::vstore_half(r, 0, reinterpret_cast<half *>(&__m)); }
    __ALWAYS_INLINE fp16& operator=(double r) __NOEXCEPT { cl::vstore_half(r, 0, reinterpret_cast<half *>(&__m)); return *this; }
    __ALWAYS_INLINE operator double() const __NOEXCEPT { return cl::vload_half<1>(0, reinterpret_cast<const half *>(&__m)); }
#endif

    __ALWAYS_INLINE fp16& operator++() __NOEXCEPT { float f = *this; ++f; *this = f; return *this; }
    __ALWAYS_INLINE fp16 operator++(int)__NOEXCEPT { fp16 t(*this); float f = *this; ++f; *this = f; return t; };
    __ALWAYS_INLINE fp16& operator--() __NOEXCEPT { float f = *this; --f; *this = f; return *this; }
    __ALWAYS_INLINE fp16 operator--(int)__NOEXCEPT { fp16 t(*this); float f = *this; --f; *this = f; return t; };
    __ALWAYS_INLINE fp16& operator+=(const fp16 &r) __NOEXCEPT { float f0 = *this; float f1 = r; f0 += f1; *this = f0; return *this; }
    __ALWAYS_INLINE fp16& operator-=(const fp16 &r) __NOEXCEPT { float f0 = *this; float f1 = r; f0 -= f1; *this = f0; return *this; }
    __ALWAYS_INLINE fp16& operator*=(const fp16 &r) __NOEXCEPT { float f0 = *this; float f1 = r; f0 *= f1; *this = f0; return *this; }
    __ALWAYS_INLINE fp16& operator/=(const fp16 &r) __NOEXCEPT { float f0 = *this; float f1 = r; f0 /= f1; *this = f0; return *this; }
#endif

#ifdef cl_khr_fp16
    half __m;
#else
    ushort __m;
#endif
};

#ifdef cl_khr_fp16
__ALWAYS_INLINE bool operator==(const fp16& lhs, const fp16& rhs) __NOEXCEPT { return lhs.__m == rhs.__m; }
__ALWAYS_INLINE bool operator!=(const fp16& lhs, const fp16& rhs) __NOEXCEPT { return lhs.__m != rhs.__m; }
__ALWAYS_INLINE bool operator< (const fp16& lhs, const fp16& rhs) __NOEXCEPT { return lhs.__m < rhs.__m; }
__ALWAYS_INLINE bool operator>(const fp16& lhs, const fp16& rhs) __NOEXCEPT { return lhs.__m > rhs.__m; }
__ALWAYS_INLINE bool operator<=(const fp16& lhs, const fp16& rhs) __NOEXCEPT { return lhs.__m <= rhs.__m; }
__ALWAYS_INLINE bool operator>=(const fp16& lhs, const fp16& rhs) __NOEXCEPT { return lhs.__m >= rhs.__m; }
__ALWAYS_INLINE fp16 operator+(const fp16& lhs, const fp16& rhs) __NOEXCEPT { return{ lhs.__m + rhs.__m }; }
__ALWAYS_INLINE fp16 operator-(const fp16& lhs, const fp16& rhs) __NOEXCEPT { return{ lhs.__m - rhs.__m }; }
__ALWAYS_INLINE fp16 operator*(const fp16& lhs, const fp16& rhs) __NOEXCEPT { return{ lhs.__m * rhs.__m }; }
__ALWAYS_INLINE fp16 operator/(const fp16& lhs, const fp16& rhs) __NOEXCEPT { return{ lhs.__m / rhs.__m }; }
#else
__ALWAYS_INLINE bool operator==(const fp16& lhs, const fp16& rhs) __NOEXCEPT { float f0 = lhs; float f1 = rhs; return f0 == f1; }
__ALWAYS_INLINE bool operator!=(const fp16& lhs, const fp16& rhs) __NOEXCEPT { float f0 = lhs; float f1 = rhs; return f0 != f1; }
__ALWAYS_INLINE bool operator< (const fp16& lhs, const fp16& rhs) __NOEXCEPT { float f0 = lhs; float f1 = rhs; return f0 < f1; }
__ALWAYS_INLINE bool operator> (const fp16& lhs, const fp16& rhs) __NOEXCEPT { float f0 = lhs; float f1 = rhs; return f0 > f1; }
__ALWAYS_INLINE bool operator<=(const fp16& lhs, const fp16& rhs) __NOEXCEPT { float f0 = lhs; float f1 = rhs; return f0 <= f1; }
__ALWAYS_INLINE bool operator>=(const fp16& lhs, const fp16& rhs) __NOEXCEPT { float f0 = lhs; float f1 = rhs; return f0 >= f1; }
__ALWAYS_INLINE fp16 operator+(const fp16& lhs, const fp16& rhs) __NOEXCEPT { float f0 = lhs; float f1 = rhs; return {f0 + f1}; }
__ALWAYS_INLINE fp16 operator-(const fp16& lhs, const fp16& rhs) __NOEXCEPT { float f0 = lhs; float f1 = rhs; return {f0 - f1}; }
__ALWAYS_INLINE fp16 operator*(const fp16& lhs, const fp16& rhs) __NOEXCEPT { float f0 = lhs; float f1 = rhs; return {f0 * f1}; }
__ALWAYS_INLINE fp16 operator/(const fp16& lhs, const fp16& rhs) __NOEXCEPT { float f0 = lhs; float f1 = rhs; return {f0 / f1}; }
#endif

}
