//
// Copyright (c) 2015-2016 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
//

#pragma once

#include <__ocl_functions_macros.h>
#include <opencl_type_traits>

namespace cl
{

namespace __spirv
{

MAKE_SPIRV_CALLABLE(cross);
MAKE_SPIRV_CALLABLE(OpDot);
MAKE_SPIRV_CALLABLE(distance);
MAKE_SPIRV_CALLABLE(length);
MAKE_SPIRV_CALLABLE(normalize);
MAKE_SPIRV_CALLABLE(OpFMul);

}


/// \brief returns unit vector collinear with p
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto normalize(half t) __NOEXCEPT { return __spirv::__make_normalize_call<half>(t); }
__ALWAYS_INLINE auto normalize(half2 t) __NOEXCEPT { return __spirv::__make_normalize_call<half2>(t); }
__ALWAYS_INLINE auto normalize(half3 t) __NOEXCEPT { return __spirv::__make_normalize_call<half3>(t); }
__ALWAYS_INLINE auto normalize(half4 t) __NOEXCEPT { return __spirv::__make_normalize_call<half4>(t); }
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto normalize(double t) __NOEXCEPT { return __spirv::__make_normalize_call<double>(t); }
__ALWAYS_INLINE auto normalize(double2 t) __NOEXCEPT { return __spirv::__make_normalize_call<double2>(t); }
__ALWAYS_INLINE auto normalize(double3 t) __NOEXCEPT { return __spirv::__make_normalize_call<double3>(t); }
__ALWAYS_INLINE auto normalize(double4 t) __NOEXCEPT { return __spirv::__make_normalize_call<double4>(t); }
#endif
__ALWAYS_INLINE auto normalize(float t) __NOEXCEPT { return __spirv::__make_normalize_call<float>(t); }
__ALWAYS_INLINE auto normalize(float2 t) __NOEXCEPT { return __spirv::__make_normalize_call<float2>(t); };
__ALWAYS_INLINE auto normalize(float3 t) __NOEXCEPT { return __spirv::__make_normalize_call<float3>(t); }
__ALWAYS_INLINE auto normalize(float4 t) __NOEXCEPT { return __spirv::__make_normalize_call<float4>(t); }


/// \brief returns cross product of p0.xyz and p1.xyz, accepts 3 or 4 dimensional vectors (result's w component is set to 0)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto cross(half3 p0, half3 p1) __NOEXCEPT { return __spirv::__make_cross_call<half3>(p0, p1); }
__ALWAYS_INLINE auto cross(half4 p0, half4 p1) __NOEXCEPT { return __spirv::__make_cross_call<half4>(p0, p1); }
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto cross(double3 p0, double3 p1) __NOEXCEPT { return __spirv::__make_cross_call<double3>(p0, p1); }
__ALWAYS_INLINE auto cross(double4 p0, double4 p1) __NOEXCEPT { return __spirv::__make_cross_call<double4>(p0, p1); }
#endif
__ALWAYS_INLINE auto cross(float3 p0, float3 p1) __NOEXCEPT { return __spirv::__make_cross_call<float3>(p0, p1); }
__ALWAYS_INLINE auto cross(float4 p0, float4 p1) __NOEXCEPT { return __spirv::__make_cross_call<float4>(p0, p1); };


/// \brief returns dot product of p0 and p1
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto dot(half p0, half p1) __NOEXCEPT { return __spirv::__make_OpFMul_call<vector_element_t<half>>(p0, p1); }
__ALWAYS_INLINE auto dot(half2 p0, half2 p1) __NOEXCEPT { return __spirv::__make_OpDot_call<vector_element_t<half2>>(p0, p1); }
__ALWAYS_INLINE auto dot(half3 p0, half3 p1) __NOEXCEPT { return __spirv::__make_OpDot_call<vector_element_t<half3>>(p0, p1); }
__ALWAYS_INLINE auto dot(half4 p0, half4 p1) __NOEXCEPT { return __spirv::__make_OpDot_call<vector_element_t<half4>>(p0, p1); }
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto dot(double p0, double p1) __NOEXCEPT { return __spirv::__make_OpFMul_call<vector_element_t<double>>(p0, p1); }
__ALWAYS_INLINE auto dot(double2 p0, double2 p1) __NOEXCEPT { return __spirv::__make_OpDot_call<vector_element_t<double2>>(p0, p1); }
__ALWAYS_INLINE auto dot(double3 p0, double3 p1) __NOEXCEPT { return __spirv::__make_OpDot_call<vector_element_t<double3>>(p0, p1); }
__ALWAYS_INLINE auto dot(double4 p0, double4 p1) __NOEXCEPT { return __spirv::__make_OpDot_call<vector_element_t<double4>>(p0, p1); }
#endif
__ALWAYS_INLINE auto dot(float p0, float p1) __NOEXCEPT { return __spirv::__make_OpFMul_call<vector_element_t<float>>(p0, p1); }
__ALWAYS_INLINE auto dot(float2 p0, float2 p1) __NOEXCEPT { return __spirv::__make_OpDot_call<vector_element_t<float2>>(p0, p1); };
__ALWAYS_INLINE auto dot(float3 p0, float3 p1) __NOEXCEPT { return __spirv::__make_OpDot_call<vector_element_t<float3>>(p0, p1); }
__ALWAYS_INLINE auto dot(float4 p0, float4 p1) __NOEXCEPT { return __spirv::__make_OpDot_call<vector_element_t<float4>>(p0, p1); }


/// \brief returns distance beetwen p0 and p1, computed as length(p0-p1)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto distance(half p0, half p1) __NOEXCEPT { return __spirv::__make_distance_call<vector_element_t<half>>(p0, p1); }
__ALWAYS_INLINE auto distance(half2 p0, half2 p1) __NOEXCEPT { return __spirv::__make_distance_call<vector_element_t<half2>>(p0, p1); }
__ALWAYS_INLINE auto distance(half3 p0, half3 p1) __NOEXCEPT { return __spirv::__make_distance_call<vector_element_t<half3>>(p0, p1); }
__ALWAYS_INLINE auto distance(half4 p0, half4 p1) __NOEXCEPT { return __spirv::__make_distance_call<vector_element_t<half4>>(p0, p1); }
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto distance(double p0, double p1) __NOEXCEPT { return __spirv::__make_distance_call<vector_element_t<double>>(p0, p1); }
__ALWAYS_INLINE auto distance(double2 p0, double2 p1) __NOEXCEPT { return __spirv::__make_distance_call<vector_element_t<double2>>(p0, p1); }
__ALWAYS_INLINE auto distance(double3 p0, double3 p1) __NOEXCEPT { return __spirv::__make_distance_call<vector_element_t<double3>>(p0, p1); }
__ALWAYS_INLINE auto distance(double4 p0, double4 p1) __NOEXCEPT { return __spirv::__make_distance_call<vector_element_t<double4>>(p0, p1); }
#endif
__ALWAYS_INLINE auto distance(float p0, float p1) __NOEXCEPT { return __spirv::__make_distance_call<vector_element_t<float>>(p0, p1); }
__ALWAYS_INLINE auto distance(float2 p0, float2 p1) __NOEXCEPT { return __spirv::__make_distance_call<vector_element_t<float2>>(p0, p1); };
__ALWAYS_INLINE auto distance(float3 p0, float3 p1) __NOEXCEPT { return __spirv::__make_distance_call<vector_element_t<float3>>(p0, p1); }
__ALWAYS_INLINE auto distance(float4 p0, float4 p1) __NOEXCEPT { return __spirv::__make_distance_call<vector_element_t<float4>>(p0, p1); }


/// \brief returns length of p
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto length(half t) __NOEXCEPT { return __spirv::__make_length_call<vector_element_t<half>>(t); }
__ALWAYS_INLINE auto length(half2 t) __NOEXCEPT { return __spirv::__make_length_call<vector_element_t<half2>>(t); }
__ALWAYS_INLINE auto length(half3 t) __NOEXCEPT { return __spirv::__make_length_call<vector_element_t<half3>>(t); }
__ALWAYS_INLINE auto length(half4 t) __NOEXCEPT { return __spirv::__make_length_call<vector_element_t<half4>>(t); }
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto length(double t) __NOEXCEPT { return __spirv::__make_length_call<vector_element_t<double>>(t); }
__ALWAYS_INLINE auto length(double2 t) __NOEXCEPT { return __spirv::__make_length_call<vector_element_t<double2>>(t); }
__ALWAYS_INLINE auto length(double3 t) __NOEXCEPT { return __spirv::__make_length_call<vector_element_t<double3>>(t); }
__ALWAYS_INLINE auto length(double4 t) __NOEXCEPT { return __spirv::__make_length_call<vector_element_t<double4>>(t); }
#endif
__ALWAYS_INLINE auto length(float t) __NOEXCEPT { return __spirv::__make_length_call<vector_element_t<float>>(t); }
__ALWAYS_INLINE auto length(float2 t) __NOEXCEPT { return __spirv::__make_length_call<vector_element_t<float2>>(t); };
__ALWAYS_INLINE auto length(float3 t) __NOEXCEPT { return __spirv::__make_length_call<vector_element_t<float3>>(t); }
__ALWAYS_INLINE auto length(float4 t) __NOEXCEPT { return __spirv::__make_length_call<vector_element_t<float4>>(t); }

}
