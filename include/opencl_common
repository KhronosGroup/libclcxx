//
// Copyright (c) 2015-2016 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
//

#pragma once

#include <__ocl_functions_macros.h>
#include <opencl_type_traits>

namespace cl
{

namespace __spirv
{

MAKE_SPIRV_CALLABLE(fclamp);
MAKE_SPIRV_CALLABLE(degrees);
MAKE_SPIRV_CALLABLE(fmax_common);
MAKE_SPIRV_CALLABLE(fmin_common);
MAKE_SPIRV_CALLABLE(mix);
MAKE_SPIRV_CALLABLE(radians);
MAKE_SPIRV_CALLABLE(step);
MAKE_SPIRV_CALLABLE(smoothstep);
MAKE_SPIRV_CALLABLE(sign);

}


/// \brief converts each component from radians to degrees (i.e. multiplies by 180/PI)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto degrees(half t) __NOEXCEPT { return __spirv::__make_degrees_call<half>(t); }
__ALWAYS_INLINE auto degrees(half2 t) __NOEXCEPT { return __spirv::__make_degrees_call<half2>(t); }
__ALWAYS_INLINE auto degrees(half3 t) __NOEXCEPT { return __spirv::__make_degrees_call<half3>(t); }
__ALWAYS_INLINE auto degrees(half4 t) __NOEXCEPT { return __spirv::__make_degrees_call<half4>(t); }
__ALWAYS_INLINE auto degrees(half8 t) __NOEXCEPT { return __spirv::__make_degrees_call<half8>(t); }
__ALWAYS_INLINE auto degrees(half16 t) __NOEXCEPT { return __spirv::__make_degrees_call<half16>(t); };
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto degrees(double t) __NOEXCEPT { return __spirv::__make_degrees_call<double>(t); }
__ALWAYS_INLINE auto degrees(double2 t) __NOEXCEPT { return __spirv::__make_degrees_call<double2>(t); }
__ALWAYS_INLINE auto degrees(double3 t) __NOEXCEPT { return __spirv::__make_degrees_call<double3>(t); }
__ALWAYS_INLINE auto degrees(double4 t) __NOEXCEPT { return __spirv::__make_degrees_call<double4>(t); }
__ALWAYS_INLINE auto degrees(double8 t) __NOEXCEPT { return __spirv::__make_degrees_call<double8>(t); }
__ALWAYS_INLINE auto degrees(double16 t) __NOEXCEPT { return __spirv::__make_degrees_call<double16>(t); };
#endif
__ALWAYS_INLINE auto degrees(float t) __NOEXCEPT { return __spirv::__make_degrees_call<float>(t); }
__ALWAYS_INLINE auto degrees(float2 t) __NOEXCEPT { return __spirv::__make_degrees_call<float2>(t); }
__ALWAYS_INLINE auto degrees(float3 t) __NOEXCEPT { return __spirv::__make_degrees_call<float3>(t); }
__ALWAYS_INLINE auto degrees(float4 t) __NOEXCEPT { return __spirv::__make_degrees_call<float4>(t); }
__ALWAYS_INLINE auto degrees(float8 t) __NOEXCEPT { return __spirv::__make_degrees_call<float8>(t); }
__ALWAYS_INLINE auto degrees(float16 t) __NOEXCEPT { return __spirv::__make_degrees_call<float16>(t); };


/// \brief converts each component from radians to degrees (i.e. multiplies by PI/180)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto radians(half t) __NOEXCEPT { return __spirv::__make_radians_call<half>(t); }
__ALWAYS_INLINE auto radians(half2 t) __NOEXCEPT { return __spirv::__make_radians_call<half2>(t); }
__ALWAYS_INLINE auto radians(half3 t) __NOEXCEPT { return __spirv::__make_radians_call<half3>(t); }
__ALWAYS_INLINE auto radians(half4 t) __NOEXCEPT { return __spirv::__make_radians_call<half4>(t); }
__ALWAYS_INLINE auto radians(half8 t) __NOEXCEPT { return __spirv::__make_radians_call<half8>(t); }
__ALWAYS_INLINE auto radians(half16 t) __NOEXCEPT { return __spirv::__make_radians_call<half16>(t); };
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto radians(double t) __NOEXCEPT { return __spirv::__make_radians_call<double>(t); }
__ALWAYS_INLINE auto radians(double2 t) __NOEXCEPT { return __spirv::__make_radians_call<double2>(t); }
__ALWAYS_INLINE auto radians(double3 t) __NOEXCEPT { return __spirv::__make_radians_call<double3>(t); }
__ALWAYS_INLINE auto radians(double4 t) __NOEXCEPT { return __spirv::__make_radians_call<double4>(t); }
__ALWAYS_INLINE auto radians(double8 t) __NOEXCEPT { return __spirv::__make_radians_call<double8>(t); }
__ALWAYS_INLINE auto radians(double16 t) __NOEXCEPT { return __spirv::__make_radians_call<double16>(t); };
#endif
__ALWAYS_INLINE auto radians(float t) __NOEXCEPT { return __spirv::__make_radians_call<float>(t); }
__ALWAYS_INLINE auto radians(float2 t) __NOEXCEPT { return __spirv::__make_radians_call<float2>(t); }
__ALWAYS_INLINE auto radians(float3 t) __NOEXCEPT { return __spirv::__make_radians_call<float3>(t); }
__ALWAYS_INLINE auto radians(float4 t) __NOEXCEPT { return __spirv::__make_radians_call<float4>(t); }
__ALWAYS_INLINE auto radians(float8 t) __NOEXCEPT { return __spirv::__make_radians_call<float8>(t); }
__ALWAYS_INLINE auto radians(float16 t) __NOEXCEPT { return __spirv::__make_radians_call<float16>(t); };


/// \brief returns 1 if x >0, 0 if x == 0 or is NaN, or -1 if x < 0 for each component
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto sign(half t) __NOEXCEPT { return __spirv::__make_sign_call<half>(t); }
__ALWAYS_INLINE auto sign(half2 t) __NOEXCEPT { return __spirv::__make_sign_call<half2>(t); }
__ALWAYS_INLINE auto sign(half3 t) __NOEXCEPT { return __spirv::__make_sign_call<half3>(t); }
__ALWAYS_INLINE auto sign(half4 t) __NOEXCEPT { return __spirv::__make_sign_call<half4>(t); }
__ALWAYS_INLINE auto sign(half8 t) __NOEXCEPT { return __spirv::__make_sign_call<half8>(t); }
__ALWAYS_INLINE auto sign(half16 t) __NOEXCEPT { return __spirv::__make_sign_call<half16>(t); };
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto sign(double t) __NOEXCEPT { return __spirv::__make_sign_call<double>(t); }
__ALWAYS_INLINE auto sign(double2 t) __NOEXCEPT { return __spirv::__make_sign_call<double2>(t); }
__ALWAYS_INLINE auto sign(double3 t) __NOEXCEPT { return __spirv::__make_sign_call<double3>(t); }
__ALWAYS_INLINE auto sign(double4 t) __NOEXCEPT { return __spirv::__make_sign_call<double4>(t); }
__ALWAYS_INLINE auto sign(double8 t) __NOEXCEPT { return __spirv::__make_sign_call<double8>(t); }
__ALWAYS_INLINE auto sign(double16 t) __NOEXCEPT { return __spirv::__make_sign_call<double16>(t); };
#endif
__ALWAYS_INLINE auto sign(float t) __NOEXCEPT { return __spirv::__make_sign_call<float>(t); }
__ALWAYS_INLINE auto sign(float2 t) __NOEXCEPT { return __spirv::__make_sign_call<float2>(t); }
__ALWAYS_INLINE auto sign(float3 t) __NOEXCEPT { return __spirv::__make_sign_call<float3>(t); }
__ALWAYS_INLINE auto sign(float4 t) __NOEXCEPT { return __spirv::__make_sign_call<float4>(t); }
__ALWAYS_INLINE auto sign(float8 t) __NOEXCEPT { return __spirv::__make_sign_call<float8>(t); }
__ALWAYS_INLINE auto sign(float16 t) __NOEXCEPT { return __spirv::__make_sign_call<float16>(t); };


/// \brief returns (x < y ? y : x) per component
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto max(half x, half y) __NOEXCEPT { return __spirv::__make_fmax_common_call<half>(x, y); }
__ALWAYS_INLINE auto max(half2 x, half2 y) __NOEXCEPT { return __spirv::__make_fmax_common_call<half2>(x, y); }
__ALWAYS_INLINE auto max(half3 x, half3 y) __NOEXCEPT { return __spirv::__make_fmax_common_call<half3>(x, y); }
__ALWAYS_INLINE auto max(half4 x, half4 y) __NOEXCEPT { return __spirv::__make_fmax_common_call<half4>(x, y); }
__ALWAYS_INLINE auto max(half8 x, half8 y) __NOEXCEPT { return __spirv::__make_fmax_common_call<half8>(x, y); }
__ALWAYS_INLINE auto max(half16 x, half16 y) __NOEXCEPT { return __spirv::__make_fmax_common_call<half16>(x, y); };
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto max(double x, double y) __NOEXCEPT { return __spirv::__make_fmax_common_call<double>(x, y); }
__ALWAYS_INLINE auto max(double2 x, double2 y) __NOEXCEPT { return __spirv::__make_fmax_common_call<double2>(x, y); }
__ALWAYS_INLINE auto max(double3 x, double3 y) __NOEXCEPT { return __spirv::__make_fmax_common_call<double3>(x, y); }
__ALWAYS_INLINE auto max(double4 x, double4 y) __NOEXCEPT { return __spirv::__make_fmax_common_call<double4>(x, y); }
__ALWAYS_INLINE auto max(double8 x, double8 y) __NOEXCEPT { return __spirv::__make_fmax_common_call<double8>(x, y); }
__ALWAYS_INLINE auto max(double16 x, double16 y) __NOEXCEPT { return __spirv::__make_fmax_common_call<double16>(x, y); };
#endif
__ALWAYS_INLINE auto max(float x, float y) __NOEXCEPT { return __spirv::__make_fmax_common_call<float>(x, y); }
__ALWAYS_INLINE auto max(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_fmax_common_call<float2>(x, y); }
__ALWAYS_INLINE auto max(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_fmax_common_call<float3>(x, y); }
__ALWAYS_INLINE auto max(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_fmax_common_call<float4>(x, y); }
__ALWAYS_INLINE auto max(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_fmax_common_call<float8>(x, y); }
__ALWAYS_INLINE auto max(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_fmax_common_call<float16>(x, y); };


/// \brief returns (y < x ? y : x) per component
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto min(half x, half y) __NOEXCEPT { return __spirv::__make_fmin_common_call<half>(x, y); }
__ALWAYS_INLINE auto min(half2 x, half2 y) __NOEXCEPT { return __spirv::__make_fmin_common_call<half2>(x, y); }
__ALWAYS_INLINE auto min(half3 x, half3 y) __NOEXCEPT { return __spirv::__make_fmin_common_call<half3>(x, y); }
__ALWAYS_INLINE auto min(half4 x, half4 y) __NOEXCEPT { return __spirv::__make_fmin_common_call<half4>(x, y); }
__ALWAYS_INLINE auto min(half8 x, half8 y) __NOEXCEPT { return __spirv::__make_fmin_common_call<half8>(x, y); }
__ALWAYS_INLINE auto min(half16 x, half16 y) __NOEXCEPT { return __spirv::__make_fmin_common_call<half16>(x, y); };
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto min(double x, double y) __NOEXCEPT { return __spirv::__make_fmin_common_call<double>(x, y); }
__ALWAYS_INLINE auto min(double2 x, double2 y) __NOEXCEPT { return __spirv::__make_fmin_common_call<double2>(x, y); }
__ALWAYS_INLINE auto min(double3 x, double3 y) __NOEXCEPT { return __spirv::__make_fmin_common_call<double3>(x, y); }
__ALWAYS_INLINE auto min(double4 x, double4 y) __NOEXCEPT { return __spirv::__make_fmin_common_call<double4>(x, y); }
__ALWAYS_INLINE auto min(double8 x, double8 y) __NOEXCEPT { return __spirv::__make_fmin_common_call<double8>(x, y); }
__ALWAYS_INLINE auto min(double16 x, double16 y) __NOEXCEPT { return __spirv::__make_fmin_common_call<double16>(x, y); };
#endif
__ALWAYS_INLINE auto min(float x, float y) __NOEXCEPT { return __spirv::__make_fmin_common_call<float>(x, y); }
__ALWAYS_INLINE auto min(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_fmin_common_call<float2>(x, y); }
__ALWAYS_INLINE auto min(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_fmin_common_call<float3>(x, y); }
__ALWAYS_INLINE auto min(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_fmin_common_call<float4>(x, y); }
__ALWAYS_INLINE auto min(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_fmin_common_call<float8>(x, y); }
__ALWAYS_INLINE auto min(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_fmin_common_call<float16>(x, y); };


/// \brief returns (x < y ? y : x) per component
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto max(half2 x, vector_element_t<half2> y) __NOEXCEPT { return __spirv::__make_fmax_common_call<half2>(x, (decltype(x))y); }
__ALWAYS_INLINE auto max(half3 x, vector_element_t<half3> y) __NOEXCEPT { return __spirv::__make_fmax_common_call<half3>(x, (decltype(x))y); }
__ALWAYS_INLINE auto max(half4 x, vector_element_t<half4> y) __NOEXCEPT { return __spirv::__make_fmax_common_call<half4>(x, (decltype(x))y); }
__ALWAYS_INLINE auto max(half8 x, vector_element_t<half8> y) __NOEXCEPT { return __spirv::__make_fmax_common_call<half8>(x, (decltype(x))y); }
__ALWAYS_INLINE auto max(half16 x, vector_element_t<half16> y) __NOEXCEPT { return __spirv::__make_fmax_common_call<half16>(x, (decltype(x))y); };
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto max(double2 x, vector_element_t<double2> y) __NOEXCEPT { return __spirv::__make_fmax_common_call<double2>(x, (decltype(x))y); }
__ALWAYS_INLINE auto max(double3 x, vector_element_t<double3> y) __NOEXCEPT { return __spirv::__make_fmax_common_call<double3>(x, (decltype(x))y); }
__ALWAYS_INLINE auto max(double4 x, vector_element_t<double4> y) __NOEXCEPT { return __spirv::__make_fmax_common_call<double4>(x, (decltype(x))y); }
__ALWAYS_INLINE auto max(double8 x, vector_element_t<double8> y) __NOEXCEPT { return __spirv::__make_fmax_common_call<double8>(x, (decltype(x))y); }
__ALWAYS_INLINE auto max(double16 x, vector_element_t<double16> y) __NOEXCEPT { return __spirv::__make_fmax_common_call<double16>(x, (decltype(x))y); };
#endif
__ALWAYS_INLINE auto max(float2 x, vector_element_t<float2> y) __NOEXCEPT { return __spirv::__make_fmax_common_call<float2>(x, (decltype(x))y); }
__ALWAYS_INLINE auto max(float3 x, vector_element_t<float3> y) __NOEXCEPT { return __spirv::__make_fmax_common_call<float3>(x, (decltype(x))y); }
__ALWAYS_INLINE auto max(float4 x, vector_element_t<float4> y) __NOEXCEPT { return __spirv::__make_fmax_common_call<float4>(x, (decltype(x))y); }
__ALWAYS_INLINE auto max(float8 x, vector_element_t<float8> y) __NOEXCEPT { return __spirv::__make_fmax_common_call<float8>(x, (decltype(x))y); }
__ALWAYS_INLINE auto max(float16 x, vector_element_t<float16> y) __NOEXCEPT { return __spirv::__make_fmax_common_call<float16>(x, (decltype(x))y); };


/// \brief returns (y < x ? y : x) per component
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto min(half2 x, vector_element_t<half2> y) __NOEXCEPT { return __spirv::__make_fmin_common_call<half2>(x, (decltype(x))y); }
__ALWAYS_INLINE auto min(half3 x, vector_element_t<half3> y) __NOEXCEPT { return __spirv::__make_fmin_common_call<half3>(x, (decltype(x))y); }
__ALWAYS_INLINE auto min(half4 x, vector_element_t<half4> y) __NOEXCEPT { return __spirv::__make_fmin_common_call<half4>(x, (decltype(x))y); }
__ALWAYS_INLINE auto min(half8 x, vector_element_t<half8> y) __NOEXCEPT { return __spirv::__make_fmin_common_call<half8>(x, (decltype(x))y); }
__ALWAYS_INLINE auto min(half16 x, vector_element_t<half16> y) __NOEXCEPT { return __spirv::__make_fmin_common_call<half16>(x, (decltype(x))y); };
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto min(double2 x, vector_element_t<double2> y) __NOEXCEPT { return __spirv::__make_fmin_common_call<double2>(x, (decltype(x))y); }
__ALWAYS_INLINE auto min(double3 x, vector_element_t<double3> y) __NOEXCEPT { return __spirv::__make_fmin_common_call<double3>(x, (decltype(x))y); }
__ALWAYS_INLINE auto min(double4 x, vector_element_t<double4> y) __NOEXCEPT { return __spirv::__make_fmin_common_call<double4>(x, (decltype(x))y); }
__ALWAYS_INLINE auto min(double8 x, vector_element_t<double8> y) __NOEXCEPT { return __spirv::__make_fmin_common_call<double8>(x, (decltype(x))y); }
__ALWAYS_INLINE auto min(double16 x, vector_element_t<double16> y) __NOEXCEPT { return __spirv::__make_fmin_common_call<double16>(x, (decltype(x))y); };
#endif
__ALWAYS_INLINE auto min(float2 x, vector_element_t<float2> y) __NOEXCEPT { return __spirv::__make_fmin_common_call<float2>(x, (decltype(x))y); }
__ALWAYS_INLINE auto min(float3 x, vector_element_t<float3> y) __NOEXCEPT { return __spirv::__make_fmin_common_call<float3>(x, (decltype(x))y); }
__ALWAYS_INLINE auto min(float4 x, vector_element_t<float4> y) __NOEXCEPT { return __spirv::__make_fmin_common_call<float4>(x, (decltype(x))y); }
__ALWAYS_INLINE auto min(float8 x, vector_element_t<float8> y) __NOEXCEPT { return __spirv::__make_fmin_common_call<float8>(x, (decltype(x))y); }
__ALWAYS_INLINE auto min(float16 x, vector_element_t<float16> y) __NOEXCEPT { return __spirv::__make_fmin_common_call<float16>(x, (decltype(x))y); };


/// \brief returns 0 if x<edge, otherwise 1 (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto step(half edge, half x) __NOEXCEPT { return __spirv::__make_step_call<half>(edge, x); }
__ALWAYS_INLINE auto step(half2 edge, half2 x) __NOEXCEPT { return __spirv::__make_step_call<half2>(edge, x); }
__ALWAYS_INLINE auto step(half3 edge, half3 x) __NOEXCEPT { return __spirv::__make_step_call<half3>(edge, x); }
__ALWAYS_INLINE auto step(half4 edge, half4 x) __NOEXCEPT { return __spirv::__make_step_call<half4>(edge, x); }
__ALWAYS_INLINE auto step(half8 edge, half8 x) __NOEXCEPT { return __spirv::__make_step_call<half8>(edge, x); }
__ALWAYS_INLINE auto step(half16 edge, half16 x) __NOEXCEPT { return __spirv::__make_step_call<half16>(edge, x); };
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto step(double edge, double x) __NOEXCEPT { return __spirv::__make_step_call<double>(edge, x); }
__ALWAYS_INLINE auto step(double2 edge, double2 x) __NOEXCEPT { return __spirv::__make_step_call<double2>(edge, x); }
__ALWAYS_INLINE auto step(double3 edge, double3 x) __NOEXCEPT { return __spirv::__make_step_call<double3>(edge, x); }
__ALWAYS_INLINE auto step(double4 edge, double4 x) __NOEXCEPT { return __spirv::__make_step_call<double4>(edge, x); }
__ALWAYS_INLINE auto step(double8 edge, double8 x) __NOEXCEPT { return __spirv::__make_step_call<double8>(edge, x); }
__ALWAYS_INLINE auto step(double16 edge, double16 x) __NOEXCEPT { return __spirv::__make_step_call<double16>(edge, x); };
#endif
__ALWAYS_INLINE auto step(float edge, float x) __NOEXCEPT { return __spirv::__make_step_call<float>(edge, x); }
__ALWAYS_INLINE auto step(float2 edge, float2 x) __NOEXCEPT { return __spirv::__make_step_call<float2>(edge, x); }
__ALWAYS_INLINE auto step(float3 edge, float3 x) __NOEXCEPT { return __spirv::__make_step_call<float3>(edge, x); }
__ALWAYS_INLINE auto step(float4 edge, float4 x) __NOEXCEPT { return __spirv::__make_step_call<float4>(edge, x); }
__ALWAYS_INLINE auto step(float8 edge, float8 x) __NOEXCEPT { return __spirv::__make_step_call<float8>(edge, x); }
__ALWAYS_INLINE auto step(float16 edge, float16 x) __NOEXCEPT { return __spirv::__make_step_call<float16>(edge, x); };


/// \brief returns 0 if x<edge, otherwise 1 (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto step(vector_element_t<half2> edge, half2 x) __NOEXCEPT { return __spirv::__make_step_call<half2>((decltype(x))edge, x); }
__ALWAYS_INLINE auto step(vector_element_t<half3> edge, half3 x) __NOEXCEPT { return __spirv::__make_step_call<half3>((decltype(x))edge, x); }
__ALWAYS_INLINE auto step(vector_element_t<half4> edge, half4 x) __NOEXCEPT { return __spirv::__make_step_call<half4>((decltype(x))edge, x); }
__ALWAYS_INLINE auto step(vector_element_t<half8> edge, half8 x) __NOEXCEPT { return __spirv::__make_step_call<half8>((decltype(x))edge, x); }
__ALWAYS_INLINE auto step(vector_element_t<half16> edge, half16 x) __NOEXCEPT { return __spirv::__make_step_call<half16>((decltype(x))edge, x); };
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto step(vector_element_t<double2> edge, double2 x) __NOEXCEPT { return __spirv::__make_step_call<double2>((decltype(x))edge, x); }
__ALWAYS_INLINE auto step(vector_element_t<double3> edge, double3 x) __NOEXCEPT { return __spirv::__make_step_call<double3>((decltype(x))edge, x); }
__ALWAYS_INLINE auto step(vector_element_t<double4> edge, double4 x) __NOEXCEPT { return __spirv::__make_step_call<double4>((decltype(x))edge, x); }
__ALWAYS_INLINE auto step(vector_element_t<double8> edge, double8 x) __NOEXCEPT { return __spirv::__make_step_call<double8>((decltype(x))edge, x); }
__ALWAYS_INLINE auto step(vector_element_t<double16> edge, double16 x) __NOEXCEPT { return __spirv::__make_step_call<double16>((decltype(x))edge, x); };
#endif
__ALWAYS_INLINE auto step(vector_element_t<float2> edge, float2 x) __NOEXCEPT { return __spirv::__make_step_call<float2>((decltype(x))edge, x); }
__ALWAYS_INLINE auto step(vector_element_t<float3> edge, float3 x) __NOEXCEPT { return __spirv::__make_step_call<float3>((decltype(x))edge, x); }
__ALWAYS_INLINE auto step(vector_element_t<float4> edge, float4 x) __NOEXCEPT { return __spirv::__make_step_call<float4>((decltype(x))edge, x); }
__ALWAYS_INLINE auto step(vector_element_t<float8> edge, float8 x) __NOEXCEPT { return __spirv::__make_step_call<float8>((decltype(x))edge, x); }
__ALWAYS_INLINE auto step(vector_element_t<float16> edge, float16 x) __NOEXCEPT { return __spirv::__make_step_call<float16>((decltype(x))edge, x); };


/// \brief clamps x to range [edge0, edge1] than maps it to [0, 1] and returns smooth cubic Hermit interpolation
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto smoothstep(half edge0, half edge1, half x) __NOEXCEPT { return __spirv::__make_smoothstep_call<half>(edge0, edge1, x); }
__ALWAYS_INLINE auto smoothstep(half2 edge0, half2 edge1, half2 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<half2>(edge0, edge1, x); }
__ALWAYS_INLINE auto smoothstep(half3 edge0, half3 edge1, half3 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<half3>(edge0, edge1, x); }
__ALWAYS_INLINE auto smoothstep(half4 edge0, half4 edge1, half4 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<half4>(edge0, edge1, x); }
__ALWAYS_INLINE auto smoothstep(half8 edge0, half8 edge1, half8 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<half8>(edge0, edge1, x); }
__ALWAYS_INLINE auto smoothstep(half16 edge0, half16 edge1, half16 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<half16>(edge0, edge1, x); };
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto smoothstep(double edge0, double edge1, double x) __NOEXCEPT { return __spirv::__make_smoothstep_call<double>(edge0, edge1, x); }
__ALWAYS_INLINE auto smoothstep(double2 edge0, double2 edge1, double2 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<double2>(edge0, edge1, x); }
__ALWAYS_INLINE auto smoothstep(double3 edge0, double3 edge1, double3 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<double3>(edge0, edge1, x); }
__ALWAYS_INLINE auto smoothstep(double4 edge0, double4 edge1, double4 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<double4>(edge0, edge1, x); }
__ALWAYS_INLINE auto smoothstep(double8 edge0, double8 edge1, double8 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<double8>(edge0, edge1, x); }
__ALWAYS_INLINE auto smoothstep(double16 edge0, double16 edge1, double16 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<double16>(edge0, edge1, x); };
#endif
__ALWAYS_INLINE auto smoothstep(float edge0, float edge1, float x) __NOEXCEPT { return __spirv::__make_smoothstep_call<float>(edge0, edge1, x); }
__ALWAYS_INLINE auto smoothstep(float2 edge0, float2 edge1, float2 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<float2>(edge0, edge1, x); }
__ALWAYS_INLINE auto smoothstep(float3 edge0, float3 edge1, float3 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<float3>(edge0, edge1, x); }
__ALWAYS_INLINE auto smoothstep(float4 edge0, float4 edge1, float4 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<float4>(edge0, edge1, x); }
__ALWAYS_INLINE auto smoothstep(float8 edge0, float8 edge1, float8 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<float8>(edge0, edge1, x); }
__ALWAYS_INLINE auto smoothstep(float16 edge0, float16 edge1, float16 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<float16>(edge0, edge1, x); };


/// \brief clamps x to range [edge0, edge1] than maps it to [0, 1] and returns smooth cubic Hermit interpolation
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto smoothstep(vector_element_t<half2> edge0, vector_element_t<half2> edge1, half2 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<half2>((decltype(x))edge0, (decltype(x))edge1, x); }
__ALWAYS_INLINE auto smoothstep(vector_element_t<half3> edge0, vector_element_t<half3> edge1, half3 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<half3>((decltype(x))edge0, (decltype(x))edge1, x); }
__ALWAYS_INLINE auto smoothstep(vector_element_t<half4> edge0, vector_element_t<half4> edge1, half4 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<half4>((decltype(x))edge0, (decltype(x))edge1, x); }
__ALWAYS_INLINE auto smoothstep(vector_element_t<half8> edge0, vector_element_t<half8> edge1, half8 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<half8>((decltype(x))edge0, (decltype(x))edge1, x); }
__ALWAYS_INLINE auto smoothstep(vector_element_t<half16> edge0, vector_element_t<half16> edge1, half16 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<half16>((decltype(x))edge0, (decltype(x))edge1, x); };
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto smoothstep(vector_element_t<double2> edge0, vector_element_t<double2> edge1, double2 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<double2>((decltype(x))edge0, (decltype(x))edge1, x); }
__ALWAYS_INLINE auto smoothstep(vector_element_t<double3> edge0, vector_element_t<double3> edge1, double3 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<double3>((decltype(x))edge0, (decltype(x))edge1, x); }
__ALWAYS_INLINE auto smoothstep(vector_element_t<double4> edge0, vector_element_t<double4> edge1, double4 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<double4>((decltype(x))edge0, (decltype(x))edge1, x); }
__ALWAYS_INLINE auto smoothstep(vector_element_t<double8> edge0, vector_element_t<double8> edge1, double8 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<double8>((decltype(x))edge0, (decltype(x))edge1, x); }
__ALWAYS_INLINE auto smoothstep(vector_element_t<double16> edge0, vector_element_t<double16> edge1, double16 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<double16>((decltype(x))edge0, (decltype(x))edge1, x); };
#endif
__ALWAYS_INLINE auto smoothstep(vector_element_t<float2> edge0, vector_element_t<float2> edge1, float2 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<float2>((decltype(x))edge0, (decltype(x))edge1, x); }
__ALWAYS_INLINE auto smoothstep(vector_element_t<float3> edge0, vector_element_t<float3> edge1, float3 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<float3>((decltype(x))edge0, (decltype(x))edge1, x); }
__ALWAYS_INLINE auto smoothstep(vector_element_t<float4> edge0, vector_element_t<float4> edge1, float4 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<float4>((decltype(x))edge0, (decltype(x))edge1, x); }
__ALWAYS_INLINE auto smoothstep(vector_element_t<float8> edge0, vector_element_t<float8> edge1, float8 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<float8>((decltype(x))edge0, (decltype(x))edge1, x); }
__ALWAYS_INLINE auto smoothstep(vector_element_t<float16> edge0, vector_element_t<float16> edge1, float16 x) __NOEXCEPT { return __spirv::__make_smoothstep_call<float16>((decltype(x))edge0, (decltype(x))edge1, x); };


/// \brief returns fmin(fmax(x, minval), maxval) per component
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto clamp(half x, half min, half max) __NOEXCEPT { return __spirv::__make_fclamp_call<half>(x, min, max); }
__ALWAYS_INLINE auto clamp(half2 x, half2 min, half2 max) __NOEXCEPT { return __spirv::__make_fclamp_call<half2>(x, min, max); }
__ALWAYS_INLINE auto clamp(half3 x, half3 min, half3 max) __NOEXCEPT { return __spirv::__make_fclamp_call<half3>(x, min, max); }
__ALWAYS_INLINE auto clamp(half4 x, half4 min, half4 max) __NOEXCEPT { return __spirv::__make_fclamp_call<half4>(x, min, max); }
__ALWAYS_INLINE auto clamp(half8 x, half8 min, half8 max) __NOEXCEPT { return __spirv::__make_fclamp_call<half8>(x, min, max); }
__ALWAYS_INLINE auto clamp(half16 x, half16 min, half16 max) __NOEXCEPT { return __spirv::__make_fclamp_call<half16>(x, min, max); };
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto clamp(double x, double min, double max) __NOEXCEPT { return __spirv::__make_fclamp_call<double>(x, min, max); }
__ALWAYS_INLINE auto clamp(double2 x, double2 min, double2 max) __NOEXCEPT { return __spirv::__make_fclamp_call<double2>(x, min, max); }
__ALWAYS_INLINE auto clamp(double3 x, double3 min, double3 max) __NOEXCEPT { return __spirv::__make_fclamp_call<double3>(x, min, max); }
__ALWAYS_INLINE auto clamp(double4 x, double4 min, double4 max) __NOEXCEPT { return __spirv::__make_fclamp_call<double4>(x, min, max); }
__ALWAYS_INLINE auto clamp(double8 x, double8 min, double8 max) __NOEXCEPT { return __spirv::__make_fclamp_call<double8>(x, min, max); }
__ALWAYS_INLINE auto clamp(double16 x, double16 min, double16 max) __NOEXCEPT { return __spirv::__make_fclamp_call<double16>(x, min, max); };
#endif
__ALWAYS_INLINE auto clamp(float x, float min, float max) __NOEXCEPT { return __spirv::__make_fclamp_call<float>(x, min, max); }
__ALWAYS_INLINE auto clamp(float2 x, float2 min, float2 max) __NOEXCEPT { return __spirv::__make_fclamp_call<float2>(x, min, max); }
__ALWAYS_INLINE auto clamp(float3 x, float3 min, float3 max) __NOEXCEPT { return __spirv::__make_fclamp_call<float3>(x, min, max); }
__ALWAYS_INLINE auto clamp(float4 x, float4 min, float4 max) __NOEXCEPT { return __spirv::__make_fclamp_call<float4>(x, min, max); }
__ALWAYS_INLINE auto clamp(float8 x, float8 min, float8 max) __NOEXCEPT { return __spirv::__make_fclamp_call<float8>(x, min, max); }
__ALWAYS_INLINE auto clamp(float16 x, float16 min, float16 max) __NOEXCEPT { return __spirv::__make_fclamp_call<float16>(x, min, max); };


/// \brief clamps each of x's components to [minval, maxval] range
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto clamp(half2 x, vector_element_t<half2> min, vector_element_t<half2> max) __NOEXCEPT { return __spirv::__make_fclamp_call<half2>(x, half2{min}, half2{max}); }
__ALWAYS_INLINE auto clamp(half3 x, vector_element_t<half3> min, vector_element_t<half3> max) __NOEXCEPT { return __spirv::__make_fclamp_call<half3>(x, half3{min}, half3{max}); }
__ALWAYS_INLINE auto clamp(half4 x, vector_element_t<half4> min, vector_element_t<half4> max) __NOEXCEPT { return __spirv::__make_fclamp_call<half4>(x, half4{min}, half4{max}); }
__ALWAYS_INLINE auto clamp(half8 x, vector_element_t<half8> min, vector_element_t<half8> max) __NOEXCEPT { return __spirv::__make_fclamp_call<half8>(x, half8{min}, half8{max}); }
__ALWAYS_INLINE auto clamp(half16 x, vector_element_t<half16> min, vector_element_t<half16> max) __NOEXCEPT { return __spirv::__make_fclamp_call<half16>(x, half16{min}, half16{max}); };
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto clamp(double2 x, vector_element_t<double2> min, vector_element_t<double2> max) __NOEXCEPT { return __spirv::__make_fclamp_call<double2>(x, double2{min}, double2{max}); }
__ALWAYS_INLINE auto clamp(double3 x, vector_element_t<double3> min, vector_element_t<double3> max) __NOEXCEPT { return __spirv::__make_fclamp_call<double3>(x, double3{min}, double3{max}); }
__ALWAYS_INLINE auto clamp(double4 x, vector_element_t<double4> min, vector_element_t<double4> max) __NOEXCEPT { return __spirv::__make_fclamp_call<double4>(x, double4{min}, double4{max}); }
__ALWAYS_INLINE auto clamp(double8 x, vector_element_t<double8> min, vector_element_t<double8> max) __NOEXCEPT { return __spirv::__make_fclamp_call<double8>(x, double8{min}, double8{max}); }
__ALWAYS_INLINE auto clamp(double16 x, vector_element_t<double16> min, vector_element_t<double16> max) __NOEXCEPT { return __spirv::__make_fclamp_call<double16>(x, double16{min}, double16{max}); };
#endif
__ALWAYS_INLINE auto clamp(float2 x, vector_element_t<float2> min, vector_element_t<float2> max) __NOEXCEPT { return __spirv::__make_fclamp_call<float2>(x, float2{min}, float2{max}); }
__ALWAYS_INLINE auto clamp(float3 x, vector_element_t<float3> min, vector_element_t<float3> max) __NOEXCEPT { return __spirv::__make_fclamp_call<float3>(x, float3{min}, float3{max}); }
__ALWAYS_INLINE auto clamp(float4 x, vector_element_t<float4> min, vector_element_t<float4> max) __NOEXCEPT { return __spirv::__make_fclamp_call<float4>(x, float4{min}, float4{max}); }
__ALWAYS_INLINE auto clamp(float8 x, vector_element_t<float8> min, vector_element_t<float8> max) __NOEXCEPT { return __spirv::__make_fclamp_call<float8>(x, float8{min}, float8{max}); }
__ALWAYS_INLINE auto clamp(float16 x, vector_element_t<float16> min, vector_element_t<float16> max) __NOEXCEPT { return __spirv::__make_fclamp_call<float16>(x, float16{min}, float16{max}); };


/// \brief returns linear blend x + (y-x)*a per component. undefined if a is not in range [0, 1]
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto mix(half x, half y, half a) __NOEXCEPT { return __spirv::__make_mix_call<half>(x, y, a); }
__ALWAYS_INLINE auto mix(half2 x, half2 y, half2 a) __NOEXCEPT { return __spirv::__make_mix_call<half2>(x, y, a); }
__ALWAYS_INLINE auto mix(half3 x, half3 y, half3 a) __NOEXCEPT { return __spirv::__make_mix_call<half3>(x, y, a); }
__ALWAYS_INLINE auto mix(half4 x, half4 y, half4 a) __NOEXCEPT { return __spirv::__make_mix_call<half4>(x, y, a); }
__ALWAYS_INLINE auto mix(half8 x, half8 y, half8 a) __NOEXCEPT { return __spirv::__make_mix_call<half8>(x, y, a); }
__ALWAYS_INLINE auto mix(half16 x, half16 y, half16 a) __NOEXCEPT { return __spirv::__make_mix_call<half16>(x, y, a); };
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto mix(double x, double y, double a) __NOEXCEPT { return __spirv::__make_mix_call<double>(x, y, a); }
__ALWAYS_INLINE auto mix(double2 x, double2 y, double2 a) __NOEXCEPT { return __spirv::__make_mix_call<double2>(x, y, a); }
__ALWAYS_INLINE auto mix(double3 x, double3 y, double3 a) __NOEXCEPT { return __spirv::__make_mix_call<double3>(x, y, a); }
__ALWAYS_INLINE auto mix(double4 x, double4 y, double4 a) __NOEXCEPT { return __spirv::__make_mix_call<double4>(x, y, a); }
__ALWAYS_INLINE auto mix(double8 x, double8 y, double8 a) __NOEXCEPT { return __spirv::__make_mix_call<double8>(x, y, a); }
__ALWAYS_INLINE auto mix(double16 x, double16 y, double16 a) __NOEXCEPT { return __spirv::__make_mix_call<double16>(x, y, a); };
#endif
__ALWAYS_INLINE auto mix(float x, float y, float a) __NOEXCEPT { return __spirv::__make_mix_call<float>(x, y, a); }
__ALWAYS_INLINE auto mix(float2 x, float2 y, float2 a) __NOEXCEPT { return __spirv::__make_mix_call<float2>(x, y, a); }
__ALWAYS_INLINE auto mix(float3 x, float3 y, float3 a) __NOEXCEPT { return __spirv::__make_mix_call<float3>(x, y, a); }
__ALWAYS_INLINE auto mix(float4 x, float4 y, float4 a) __NOEXCEPT { return __spirv::__make_mix_call<float4>(x, y, a); }
__ALWAYS_INLINE auto mix(float8 x, float8 y, float8 a) __NOEXCEPT { return __spirv::__make_mix_call<float8>(x, y, a); }
__ALWAYS_INLINE auto mix(float16 x, float16 y, float16 a) __NOEXCEPT { return __spirv::__make_mix_call<float16>(x, y, a); };


/// \brief returns linear blend x + (y-x)*a per component. undefined if a is not in range [0, 1]
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto mix(half2 x, half2 y, vector_element_t<half2> a) __NOEXCEPT { return __spirv::__make_mix_call<half2>(x, y, (decltype(x))a); }
__ALWAYS_INLINE auto mix(half3 x, half3 y, vector_element_t<half3> a) __NOEXCEPT { return __spirv::__make_mix_call<half3>(x, y, (decltype(x))a); }
__ALWAYS_INLINE auto mix(half4 x, half4 y, vector_element_t<half4> a) __NOEXCEPT { return __spirv::__make_mix_call<half4>(x, y, (decltype(x))a); }
__ALWAYS_INLINE auto mix(half8 x, half8 y, vector_element_t<half8> a) __NOEXCEPT { return __spirv::__make_mix_call<half8>(x, y, (decltype(x))a); }
__ALWAYS_INLINE auto mix(half16 x, half16 y, vector_element_t<half16> a) __NOEXCEPT { return __spirv::__make_mix_call<half16>(x, y, (decltype(x))a); };
#endif
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto mix(double2 x, double2 y, vector_element_t<double2> a) __NOEXCEPT { return __spirv::__make_mix_call<double2>(x, y, (decltype(x))a); }
__ALWAYS_INLINE auto mix(double3 x, double3 y, vector_element_t<double3> a) __NOEXCEPT { return __spirv::__make_mix_call<double3>(x, y, (decltype(x))a); }
__ALWAYS_INLINE auto mix(double4 x, double4 y, vector_element_t<double4> a) __NOEXCEPT { return __spirv::__make_mix_call<double4>(x, y, (decltype(x))a); }
__ALWAYS_INLINE auto mix(double8 x, double8 y, vector_element_t<double8> a) __NOEXCEPT { return __spirv::__make_mix_call<double8>(x, y, (decltype(x))a); }
__ALWAYS_INLINE auto mix(double16 x, double16 y, vector_element_t<double16> a) __NOEXCEPT { return __spirv::__make_mix_call<double16>(x, y, (decltype(x))a); };
#endif
__ALWAYS_INLINE auto mix(float2 x, float2 y, vector_element_t<float2> a) __NOEXCEPT { return __spirv::__make_mix_call<float2>(x, y, (decltype(x))a); }
__ALWAYS_INLINE auto mix(float3 x, float3 y, vector_element_t<float3> a) __NOEXCEPT { return __spirv::__make_mix_call<float3>(x, y, (decltype(x))a); }
__ALWAYS_INLINE auto mix(float4 x, float4 y, vector_element_t<float4> a) __NOEXCEPT { return __spirv::__make_mix_call<float4>(x, y, (decltype(x))a); }
__ALWAYS_INLINE auto mix(float8 x, float8 y, vector_element_t<float8> a) __NOEXCEPT { return __spirv::__make_mix_call<float8>(x, y, (decltype(x))a); }
__ALWAYS_INLINE auto mix(float16 x, float16 y, vector_element_t<float16> a) __NOEXCEPT { return __spirv::__make_mix_call<float16>(x, y, (decltype(x))a); };

}
