//
// Copyright (c) 2015-2016 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
//

#pragma once

#include <opencl_type_traits>
#include <opencl_convert>
#include <opencl_memory>

namespace cl
{

namespace __spirv
{
    MAKE_SPIRV_CALLABLE_WITH_TEMPLATE_RETTYPE(vloadn)
    MAKE_SPIRV_CALLABLE(vstoren)

    MAKE_SPIRV_CALLABLE_WITH_TEMPLATE_RETTYPE(vload_half)
    MAKE_SPIRV_CALLABLE_WITH_TEMPLATE_RETTYPE(vload_halfn)

    template <rounding_mode Rmode, typename... Args>
    void vstore_half(Args... args);

    template <rounding_mode Rmode, typename... Args>
    void vstore_halfn(Args... args);

    MAKE_SPIRV_CALLABLE_WITH_TEMPLATE_RETTYPE(vloada_halfn)

    template <rounding_mode Rmode, typename... Args>
    void vstorea_halfn(Args... args);
};

namespace __details
{

template <size_t N> struct __vload_half_helper  { __ALWAYS_INLINE static auto __make_call(size_t offset, const half* ptr)               { return __spirv::__make_vload_halfn_call<make_vector_t<float, N>>(offset, ptr, N); }
                                                  __ALWAYS_INLINE static auto __make_call(size_t offset, const constant_ptr<half> ptr)  { return __spirv::__make_vload_halfn_call<make_vector_t<float, N>>(offset, ptr.get(), N); } };

template <> struct __vload_half_helper<1>       { __ALWAYS_INLINE static auto __make_call(size_t offset, const half* ptr)               { return __spirv::__make_vload_half_call<float>(offset, ptr); }
                                                  __ALWAYS_INLINE static auto __make_call(size_t offset, const constant_ptr<half> ptr)  { return __spirv::__make_vload_half_call<float>(offset, ptr.get()); } };

template <size_t N> struct __vstore_half_helper { template <rounding_mode Rmode, typename T>
                                                  __ALWAYS_INLINE static auto __make_call(T data, size_t offset, const half* ptr)               { return __spirv::vstore_halfn<Rmode>(data, offset, ptr); }
                                                  template <rounding_mode Rmode, typename T>
                                                  __ALWAYS_INLINE static auto __make_call(T data, size_t offset, const constant_ptr<half> ptr)  { return __spirv::vstore_halfn<Rmode>(data, offset, ptr.get()); }};

template <> struct __vstore_half_helper<1>      { template <rounding_mode Rmode, typename T>
                                                  __ALWAYS_INLINE static auto __make_call(T data, size_t offset, const half* ptr)               { return __spirv::vstore_half<Rmode>(data, offset, ptr); }
                                                  template <rounding_mode Rmode, typename T>
                                                  __ALWAYS_INLINE static auto __make_call(T data, size_t offset, const constant_ptr<half> ptr)  { return __spirv::vstore_half<Rmode>(data, offset, ptr.get()); }};

} //end namespace __details


template <size_t N, class T>
__ALWAYS_INLINE enable_if_t<!is_same<make_vector_t<T, N>, T>::value, make_vector_t<T, N>>
vload(size_t offset, const T* ptr)
{
    return __spirv::__make_vloadn_call<make_vector_t<T,N>>(offset, ptr, N);
}

template <size_t N, class T>
__ALWAYS_INLINE enable_if_t<!is_same<make_vector_t<T, N>, T>::value, make_vector_t<T, N>>
vload(size_t offset, const constant_ptr<T> ptr)
{
    return __spirv::__make_vloadn_call<make_vector_t<T,N>>(offset, ptr.get(), N);
}



template <class T>
__ALWAYS_INLINE enable_if_t<is_vector_type<T>::value, void>
vstore(T data, size_t offset, vector_element_t<T>* ptr)
{
    return __spirv::__make_vstoren_call<void>(data, offset, ptr);
}



template <size_t N>
__ALWAYS_INLINE enable_if_t<(!is_same<make_vector_t<float, N>, float>::value || N == 1), make_vector_t<float, N>>
vload_half(size_t offset, const half* ptr)
{
    return __details::__vload_half_helper<N>::__make_call(offset, ptr);
}

template <size_t N>
__ALWAYS_INLINE enable_if_t<(!is_same<make_vector_t<float, N>, float>::value || N == 1), make_vector_t<float, N>>
vload_half(size_t offset, const constant_ptr<half> ptr)
{
    return __details::__vload_half_helper<N>::__make_call(offset, ptr);
}



template <rounding_mode Rmode = rounding_mode::rte, typename T>
__ALWAYS_INLINE enable_if_t<
                            is_same<remove_cv_t<vector_element_t<T>>, float>::value
#ifdef cl_khr_fp64
                            || is_same<remove_cv_t<vector_element_t<T>>, double>::value
#endif
                            , void>
vstore_half(T data, size_t offset, half* ptr)
{
    return __details::__vstore_half_helper<vector_size<T>::value>::template __make_call<Rmode>(data, offset, ptr);
}



template <size_t N>
__ALWAYS_INLINE enable_if_t<!is_same<make_vector_t<float, N>, float>::value, make_vector_t<float, N>>
vloada_half(size_t offset, const half* ptr)
{
    return __spirv::__make_vloada_halfn_call<make_vector_t<float,N>>(offset, ptr);
}

template <size_t N>
__ALWAYS_INLINE enable_if_t<!is_same<make_vector_t<float, N>, float>::value, make_vector_t<float, N>>
vloada_half(size_t offset, const constant_ptr<half> ptr)
{
    return __spirv::__make_vloada_halfn_call<make_vector_t<float,N>>(offset, ptr.get());
}



template <rounding_mode Rmode = rounding_mode::rte, typename T>
__ALWAYS_INLINE enable_if_t<
                            is_vector_type<T>::value && (
                            is_same<remove_cv_t<vector_element_t<T>>, float>::value
#ifdef cl_khr_fp64
                            || is_same<remove_cv_t<vector_element_t<T>>, double>::value
#endif
                            ), void>
vstorea_half(T data, size_t offset, half* ptr)
{
    return __spirv::vstorea_halfn<Rmode>(data, offset, ptr);
}

} //end namespace cl
