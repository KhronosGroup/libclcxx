#ifndef __OPENCL_TYPE_TRAITS
#define __OPENCL_TYPE_TRAITS

#if defined(__clang_major__) && (__clang_major__ > 11)

// These clang extensions are necessary to include type traits from C++17
#ifndef __cl_clang_function_pointers
#error "Missing __cl_clang_function_pointers extension support"
#endif
#pragma OPENCL EXTENSION __cl_clang_function_pointers : enable
#ifndef __cl_clang_variadic_functions
#error "Missing __cl_clang_variadic_functions extension support"
#endif
#pragma OPENCL EXTENSION __cl_clang_variadic_functions : enable
#include <type_traits>
#pragma OPENCL EXTENSION __cl_clang_function_pointers : disable
#pragma OPENCL EXTENSION __cl_clang_variadic_functions : disable

namespace std {

// is_signed

template <> struct is_signed<int2> : public true_type {};
template <> struct is_signed<int3> : public true_type {};
template <> struct is_signed<int4> : public true_type {};
template <> struct is_signed<int8> : public true_type {};
template <> struct is_signed<int16> : public true_type {};

template <> struct is_signed<char2> : public true_type {};
template <> struct is_signed<char3> : public true_type {};
template <> struct is_signed<char4> : public true_type {};
template <> struct is_signed<char8> : public true_type {};
template <> struct is_signed<char16> : public true_type {};

template <> struct is_signed<short2> : public true_type {};
template <> struct is_signed<short3> : public true_type {};
template <> struct is_signed<short4> : public true_type {};
template <> struct is_signed<short8> : public true_type {};
template <> struct is_signed<short16> : public true_type {};

template <> struct is_signed<long2> : public true_type {};
template <> struct is_signed<long3> : public true_type {};
template <> struct is_signed<long4> : public true_type {};
template <> struct is_signed<long8> : public true_type {};
template <> struct is_signed<long16> : public true_type {};

// is_unsigned

template <> struct is_unsigned<uint2> : public true_type {};
template <> struct is_unsigned<uint3> : public true_type {};
template <> struct is_unsigned<uint4> : public true_type {};
template <> struct is_unsigned<uint8> : public true_type {};
template <> struct is_unsigned<uint16> : public true_type {};

template <> struct is_unsigned<uchar2> : public true_type {};
template <> struct is_unsigned<uchar3> : public true_type {};
template <> struct is_unsigned<uchar4> : public true_type {};
template <> struct is_unsigned<uchar8> : public true_type {};
template <> struct is_unsigned<uchar16> : public true_type {};

template <> struct is_unsigned<ushort2> : public true_type {};
template <> struct is_unsigned<ushort3> : public true_type {};
template <> struct is_unsigned<ushort4> : public true_type {};
template <> struct is_unsigned<ushort8> : public true_type {};
template <> struct is_unsigned<ushort16> : public true_type {};

template <> struct is_unsigned<ulong2> : public true_type {};
template <> struct is_unsigned<ulong3> : public true_type {};
template <> struct is_unsigned<ulong4> : public true_type {};
template <> struct is_unsigned<ulong8> : public true_type {};
template <> struct is_unsigned<ulong16> : public true_type {};

// make_signed

template <> struct make_signed<int2> { typedef int2 type; };
template <> struct make_signed<int3> { typedef int3 type; };
template <> struct make_signed<int4> { typedef int4 type; };
template <> struct make_signed<int8> { typedef int8 type; };
template <> struct make_signed<int16> { typedef int16 type; };

template <> struct make_signed<char2> { typedef char2 type; };
template <> struct make_signed<char3> { typedef char3 type; };
template <> struct make_signed<char4> { typedef char4 type; };
template <> struct make_signed<char8> { typedef char8 type; };
template <> struct make_signed<char16> { typedef char16 type; };

template <> struct make_signed<short2> { typedef short2 type; };
template <> struct make_signed<short3> { typedef short3 type; };
template <> struct make_signed<short4> { typedef short4 type; };
template <> struct make_signed<short8> { typedef short8 type; };
template <> struct make_signed<short16> { typedef short16 type; };

template <> struct make_signed<long2> { typedef long2 type; };
template <> struct make_signed<long3> { typedef long3 type; };
template <> struct make_signed<long4> { typedef long4 type; };
template <> struct make_signed<long8> { typedef long8 type; };
template <> struct make_signed<long16> { typedef long16 type; };

template <> struct make_signed<uint2> { typedef int2 type; };
template <> struct make_signed<uint3> { typedef int3 type; };
template <> struct make_signed<uint4> { typedef int4 type; };
template <> struct make_signed<uint8> { typedef int8 type; };
template <> struct make_signed<uint16> { typedef int16 type; };

template <> struct make_signed<uchar2> { typedef char2 type; };
template <> struct make_signed<uchar3> { typedef char3 type; };
template <> struct make_signed<uchar4> { typedef char4 type; };
template <> struct make_signed<uchar8> { typedef char8 type; };
template <> struct make_signed<uchar16> { typedef char16 type; };

template <> struct make_signed<ushort2> { typedef short2 type; };
template <> struct make_signed<ushort3> { typedef short3 type; };
template <> struct make_signed<ushort4> { typedef short4 type; };
template <> struct make_signed<ushort8> { typedef short8 type; };
template <> struct make_signed<ushort16> { typedef short16 type; };

template <> struct make_signed<ulong2> { typedef long2 type; };
template <> struct make_signed<ulong3> { typedef long3 type; };
template <> struct make_signed<ulong4> { typedef long4 type; };
template <> struct make_signed<ulong8> { typedef long8 type; };
template <> struct make_signed<ulong16> { typedef long16 type; };

// make_unsigned

template <> struct make_unsigned<int2> { typedef uint2 type; };
template <> struct make_unsigned<int3> { typedef uint3 type; };
template <> struct make_unsigned<int4> { typedef uint4 type; };
template <> struct make_unsigned<int8> { typedef uint8 type; };
template <> struct make_unsigned<int16> { typedef uint16 type; };

template <> struct make_unsigned<char2> { typedef uchar2 type; };
template <> struct make_unsigned<char3> { typedef uchar3 type; };
template <> struct make_unsigned<char4> { typedef uchar4 type; };
template <> struct make_unsigned<char8> { typedef uchar8 type; };
template <> struct make_unsigned<char16> { typedef uchar16 type; };

template <> struct make_unsigned<short2> { typedef ushort2 type; };
template <> struct make_unsigned<short3> { typedef ushort3 type; };
template <> struct make_unsigned<short4> { typedef ushort4 type; };
template <> struct make_unsigned<short8> { typedef ushort8 type; };
template <> struct make_unsigned<short16> { typedef ushort16 type; };

template <> struct make_unsigned<long2> { typedef ulong2 type; };
template <> struct make_unsigned<long3> { typedef ulong3 type; };
template <> struct make_unsigned<long4> { typedef ulong4 type; };
template <> struct make_unsigned<long8> { typedef ulong8 type; };
template <> struct make_unsigned<long16> { typedef ulong16 type; };

template <> struct make_unsigned<uint2> { typedef uint2 type; };
template <> struct make_unsigned<uint3> { typedef uint3 type; };
template <> struct make_unsigned<uint4> { typedef uint4 type; };
template <> struct make_unsigned<uint8> { typedef uint8 type; };
template <> struct make_unsigned<uint16> { typedef uint16 type; };

template <> struct make_unsigned<uchar2> { typedef uchar2 type; };
template <> struct make_unsigned<uchar3> { typedef uchar3 type; };
template <> struct make_unsigned<uchar4> { typedef uchar4 type; };
template <> struct make_unsigned<uchar8> { typedef uchar8 type; };
template <> struct make_unsigned<uchar16> { typedef uchar16 type; };

template <> struct make_unsigned<ushort2> { typedef ushort2 type; };
template <> struct make_unsigned<ushort3> { typedef ushort3 type; };
template <> struct make_unsigned<ushort4> { typedef ushort4 type; };
template <> struct make_unsigned<ushort8> { typedef ushort8 type; };
template <> struct make_unsigned<ushort16> { typedef ushort16 type; };

template <> struct make_unsigned<ulong2> { typedef ulong2 type; };
template <> struct make_unsigned<ulong3> { typedef ulong3 type; };
template <> struct make_unsigned<ulong4> { typedef ulong4 type; };
template <> struct make_unsigned<ulong8> { typedef ulong8 type; };
template <> struct make_unsigned<ulong16> { typedef ulong16 type; };

// is_arithmetic

template <> struct is_arithmetic<int2> : public true_type {};
template <> struct is_arithmetic<int3> : public true_type {};
template <> struct is_arithmetic<int4> : public true_type {};
template <> struct is_arithmetic<int8> : public true_type {};
template <> struct is_arithmetic<int16> : public true_type {};

template <> struct is_arithmetic<char2> : public true_type {};
template <> struct is_arithmetic<char3> : public true_type {};
template <> struct is_arithmetic<char4> : public true_type {};
template <> struct is_arithmetic<char8> : public true_type {};
template <> struct is_arithmetic<char16> : public true_type {};

template <> struct is_arithmetic<short2> : public true_type {};
template <> struct is_arithmetic<short3> : public true_type {};
template <> struct is_arithmetic<short4> : public true_type {};
template <> struct is_arithmetic<short8> : public true_type {};
template <> struct is_arithmetic<short16> : public true_type {};

template <> struct is_arithmetic<long2> : public true_type {};
template <> struct is_arithmetic<long3> : public true_type {};
template <> struct is_arithmetic<long4> : public true_type {};
template <> struct is_arithmetic<long8> : public true_type {};
template <> struct is_arithmetic<long16> : public true_type {};

template <> struct is_arithmetic<float2> : public true_type {};
template <> struct is_arithmetic<float3> : public true_type {};
template <> struct is_arithmetic<float4> : public true_type {};
template <> struct is_arithmetic<float8> : public true_type {};
template <> struct is_arithmetic<float16> : public true_type {};

template <> struct is_arithmetic<double2> : public true_type {};
template <> struct is_arithmetic<double3> : public true_type {};
template <> struct is_arithmetic<double4> : public true_type {};
template <> struct is_arithmetic<double8> : public true_type {};
template <> struct is_arithmetic<double16> : public true_type {};

template <> struct is_arithmetic<uint2> : public true_type {};
template <> struct is_arithmetic<uint3> : public true_type {};
template <> struct is_arithmetic<uint4> : public true_type {};
template <> struct is_arithmetic<uint8> : public true_type {};
template <> struct is_arithmetic<uint16> : public true_type {};

template <> struct is_arithmetic<uchar2> : public true_type {};
template <> struct is_arithmetic<uchar3> : public true_type {};
template <> struct is_arithmetic<uchar4> : public true_type {};
template <> struct is_arithmetic<uchar8> : public true_type {};
template <> struct is_arithmetic<uchar16> : public true_type {};

template <> struct is_arithmetic<ushort2> : public true_type {};
template <> struct is_arithmetic<ushort3> : public true_type {};
template <> struct is_arithmetic<ushort4> : public true_type {};
template <> struct is_arithmetic<ushort8> : public true_type {};
template <> struct is_arithmetic<ushort16> : public true_type {};

template <> struct is_arithmetic<ulong2> : public true_type {};
template <> struct is_arithmetic<ulong3> : public true_type {};
template <> struct is_arithmetic<ulong4> : public true_type {};
template <> struct is_arithmetic<ulong8> : public true_type {};
template <> struct is_arithmetic<ulong16> : public true_type {};

// is_fundamental

template <> struct is_fundamental<int2> : public true_type {};
template <> struct is_fundamental<int3> : public true_type {};
template <> struct is_fundamental<int4> : public true_type {};
template <> struct is_fundamental<int8> : public true_type {};
template <> struct is_fundamental<int16> : public true_type {};

template <> struct is_fundamental<char2> : public true_type {};
template <> struct is_fundamental<char3> : public true_type {};
template <> struct is_fundamental<char4> : public true_type {};
template <> struct is_fundamental<char8> : public true_type {};
template <> struct is_fundamental<char16> : public true_type {};

template <> struct is_fundamental<short2> : public true_type {};
template <> struct is_fundamental<short3> : public true_type {};
template <> struct is_fundamental<short4> : public true_type {};
template <> struct is_fundamental<short8> : public true_type {};
template <> struct is_fundamental<short16> : public true_type {};

template <> struct is_fundamental<long2> : public true_type {};
template <> struct is_fundamental<long3> : public true_type {};
template <> struct is_fundamental<long4> : public true_type {};
template <> struct is_fundamental<long8> : public true_type {};
template <> struct is_fundamental<long16> : public true_type {};

template <> struct is_fundamental<float2> : public true_type {};
template <> struct is_fundamental<float3> : public true_type {};
template <> struct is_fundamental<float4> : public true_type {};
template <> struct is_fundamental<float8> : public true_type {};
template <> struct is_fundamental<float16> : public true_type {};

template <> struct is_fundamental<double2> : public true_type {};
template <> struct is_fundamental<double3> : public true_type {};
template <> struct is_fundamental<double4> : public true_type {};
template <> struct is_fundamental<double8> : public true_type {};
template <> struct is_fundamental<double16> : public true_type {};

template <> struct is_fundamental<uint2> : public true_type {};
template <> struct is_fundamental<uint3> : public true_type {};
template <> struct is_fundamental<uint4> : public true_type {};
template <> struct is_fundamental<uint8> : public true_type {};
template <> struct is_fundamental<uint16> : public true_type {};

template <> struct is_fundamental<uchar2> : public true_type {};
template <> struct is_fundamental<uchar3> : public true_type {};
template <> struct is_fundamental<uchar4> : public true_type {};
template <> struct is_fundamental<uchar8> : public true_type {};
template <> struct is_fundamental<uchar16> : public true_type {};

template <> struct is_fundamental<ushort2> : public true_type {};
template <> struct is_fundamental<ushort3> : public true_type {};
template <> struct is_fundamental<ushort4> : public true_type {};
template <> struct is_fundamental<ushort8> : public true_type {};
template <> struct is_fundamental<ushort16> : public true_type {};

template <> struct is_fundamental<ulong2> : public true_type {};
template <> struct is_fundamental<ulong3> : public true_type {};
template <> struct is_fundamental<ulong4> : public true_type {};
template <> struct is_fundamental<ulong8> : public true_type {};
template <> struct is_fundamental<ulong16> : public true_type {};

} // namespace std

#else
#error "Unsupported clang version - use clang-12 or later versions"

#endif /* if define __clang_major__ */
#endif /* define __OPENCL_TYPE_TRAITS  */
