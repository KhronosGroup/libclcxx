//
// Copyright (c) 2015-2016 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
//

#pragma once

#include <__ocl_config.h>
#include <__ocl_memory.h>
#include <__ocl_data.h>
#include <__ocl_spirv_memory_opcodes.h>
#include <__ocl_type_traits_type_generators.h>
#include <__ocl_atomic_enum.h>

namespace cl
{
namespace __details
{
/// \brief Helper trait to select the address space cast SPIR-V function.
///
template<class T>
struct __choose_dynamic_asptr_cast
{
    static_assert(__always_false<T>::value, "Invalid T.");
};

/// \brief Helper trait to select the address space cast SPIR-V function.
///
template<class T>
struct __choose_dynamic_asptr_cast<global_ptr<T>>
{
    __ALWAYS_INLINE static __global T * __make_call(__generic T *arg) __NOEXCEPT{ return __spirv::__make_OpGenericCastToPtrExplicit_ToGlobal_call(arg); }
};

/// \brief Helper trait to select the address space cast SPIR-V function.
///
template<class T>
struct __choose_dynamic_asptr_cast<local_ptr<T>>
{
    __ALWAYS_INLINE static __local T * __make_call(__generic T *arg) __NOEXCEPT{ return __spirv::__make_OpGenericCastToPtrExplicit_ToLocal_call(arg); }
};

/// \brief Helper trait to select the address space cast SPIR-V function.
///
template<class T>
struct __choose_dynamic_asptr_cast<private_ptr<T>>
{
    __ALWAYS_INLINE static __private T * __make_call(__generic T *arg) __NOEXCEPT{ return __spirv::__make_GenericCastToPtrExplicit_ToPrivate_call(arg); }
};

} // namespace __details

/// \brief Dynamic address space cast function
///
/// The function can return nullptr if the given pointer cannot be casted to specified address space pointer.
template<class To, class From>
__ALWAYS_INLINE To dynamic_asptr_cast(From *ptr)
{
    static_assert(is_same<global_ptr<From>, To>::value || is_same<local_ptr<From>, To>::value || is_same<private_ptr<From>, To>::value, "Invalid dynamic address space cast.");

    return To(__details::__choose_dynamic_asptr_cast<To>::__make_call(ptr));
}

/// \brief Local address space storage class
///
template<class T>
using local = __local __details::__data<T>;

/// \brief Constant address space storage class
///
template<class T>
using constant = __constant __details::__data_fundamental<T>;

/// \brief Global address space storage class
///
template<class T>
using global = __global __details::__data<T>;

/// \brief Private address space storage class
///
template<class T>
using priv = __private __details::__data<T>;

/// \brief Obtains direct memory address of argument
///
template <class T>
__ALWAYS_INLINE T* addressof(T& t) __NOEXCEPT { return __builtin_addressof(t); }

} // namespace cl
