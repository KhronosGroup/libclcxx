//
// Copyright (c) 2015-2016 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
//

#pragma once

#include <__ocl_config.h>

namespace cl
{
namespace __spirv
{
template<class T, unsigned int I>
struct OpSpecConstant
{
    constexpr OpSpecConstant(const T& r) __CONSTANT_QUALIFIER : _m(r) { }

    OpSpecConstant() = delete;
    OpSpecConstant(const OpSpecConstant &) = default;
    OpSpecConstant(OpSpecConstant&&) = default;

    OpSpecConstant& operator=(const OpSpecConstant&) = delete;
    OpSpecConstant& operator=(OpSpecConstant&&) = delete;

    __ALWAYS_INLINE const __CONSTANT_QUALIFIER T& get() const __CONSTANT_QUALIFIER
    {
      return *(__CONSTANT_QUALIFIER T *)this;
    }

    T _m;
};

} //end namespace __spirv

template<class T, unsigned int I>
using spec_constant = __CONSTANT_QUALIFIER __spirv::OpSpecConstant<T, I>;

template<class T, unsigned int ID>
const __CONSTANT_QUALIFIER T& get(const spec_constant<T, ID> &r) noexcept
{
    return r.get();
}

} //end namespace cl
