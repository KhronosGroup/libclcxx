//
// Copyright (c) 2015-2016 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
//

#pragma once

#include <__ocl_config.h>
#include <__ocl_atomic_enum.h>
#include <opencl_memory>

namespace cl
{

namespace __spirv
{
extern void OpControlBarrier(memory_scope execution, memory_scope memory, MemorySemantics semantics);

}

/// \brief assures that all work-items in work-group will execute this function before any of them proceeding further and simultaneously synchronizes memory within work-group's scope
///
__ALWAYS_INLINE void work_group_barrier(mem_fence flags) __NOEXCEPT
{
    __spirv::OpControlBarrier(memory_scope_work_group, memory_scope_work_group, static_cast<__spirv::MemorySemantics>(flags));
}

/// \brief assures that all work-items in work-group will execute this function before any of them proceeding further and simultaneously provides memory synchronization on 'scope' level
///
__ALWAYS_INLINE void work_group_barrier(mem_fence flags, memory_scope scope) __NOEXCEPT
{
    __spirv::OpControlBarrier(memory_scope_work_group, scope, static_cast<__spirv::MemorySemantics>(flags));
}

/// \brief assures that all work-items in sub-group will execute this function before any of them proceeding further and simultaneously synchronizes memory within sub-group's scope
///
__ALWAYS_INLINE void sub_group_barrier(mem_fence flags) __NOEXCEPT
{
    return __spirv::OpControlBarrier(memory_scope_sub_group, memory_scope_sub_group, static_cast<__spirv::MemorySemantics>(flags));
}

/// \brief assures that all work-items in sub-group will execute this function before any of them proceeding further and simultaneously provides memory synchronization on 'scope' level
///
__ALWAYS_INLINE void sub_group_barrier(mem_fence flags, memory_scope scope) __NOEXCEPT
{
    return __spirv::OpControlBarrier(memory_scope_sub_group, scope, static_cast<__spirv::MemorySemantics>(flags));
}

}