//
// Copyright (c) 2015-2016 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
//

#pragma once

#include <__ocl_functions_macros.h>
#include <opencl_type_traits>

namespace cl
{

namespace __spirv
{

MAKE_SPIRV_CALLABLE(acos);
MAKE_SPIRV_CALLABLE(acosh);
MAKE_SPIRV_CALLABLE(acospi);
MAKE_SPIRV_CALLABLE(asin);
MAKE_SPIRV_CALLABLE(asinh);
MAKE_SPIRV_CALLABLE(asinpi);
MAKE_SPIRV_CALLABLE(atan);
MAKE_SPIRV_CALLABLE(atan2);
MAKE_SPIRV_CALLABLE(atanh);
MAKE_SPIRV_CALLABLE(atanpi);
MAKE_SPIRV_CALLABLE(atan2pi);
MAKE_SPIRV_CALLABLE(cbrt);
MAKE_SPIRV_CALLABLE(ceil);
MAKE_SPIRV_CALLABLE(copysign);
MAKE_SPIRV_CALLABLE(cos);
MAKE_SPIRV_CALLABLE(cosh);
MAKE_SPIRV_CALLABLE(cospi);
MAKE_SPIRV_CALLABLE(erfc);
MAKE_SPIRV_CALLABLE(erf);
MAKE_SPIRV_CALLABLE(exp);
MAKE_SPIRV_CALLABLE(exp2);
MAKE_SPIRV_CALLABLE(exp10);
MAKE_SPIRV_CALLABLE(expm1);
MAKE_SPIRV_CALLABLE(fabs);
MAKE_SPIRV_CALLABLE(fdim);
MAKE_SPIRV_CALLABLE(floor);
MAKE_SPIRV_CALLABLE(fma);
MAKE_SPIRV_CALLABLE(fmax);
MAKE_SPIRV_CALLABLE(fmin);
MAKE_SPIRV_CALLABLE(fmod);
MAKE_SPIRV_CALLABLE(fract);
MAKE_SPIRV_CALLABLE(frexp);
MAKE_SPIRV_CALLABLE(hypot);
MAKE_SPIRV_CALLABLE(ilogb);
MAKE_SPIRV_CALLABLE(ldexp);
MAKE_SPIRV_CALLABLE(lgamma);
MAKE_SPIRV_CALLABLE(lgamma_r);
MAKE_SPIRV_CALLABLE(log);
MAKE_SPIRV_CALLABLE(log2);
MAKE_SPIRV_CALLABLE(log10);
MAKE_SPIRV_CALLABLE(log1p);
MAKE_SPIRV_CALLABLE(logb);
MAKE_SPIRV_CALLABLE(mad);
MAKE_SPIRV_CALLABLE(maxmag);
MAKE_SPIRV_CALLABLE(minmag);
MAKE_SPIRV_CALLABLE(modf);
MAKE_SPIRV_CALLABLE(nan);
MAKE_SPIRV_CALLABLE(nextafter);
MAKE_SPIRV_CALLABLE(pow);
MAKE_SPIRV_CALLABLE(pown);
MAKE_SPIRV_CALLABLE(powr);
MAKE_SPIRV_CALLABLE(remainder);
MAKE_SPIRV_CALLABLE(remquo);
MAKE_SPIRV_CALLABLE(rint);
MAKE_SPIRV_CALLABLE(rootn);
MAKE_SPIRV_CALLABLE(round);
MAKE_SPIRV_CALLABLE(rsqrt);
MAKE_SPIRV_CALLABLE(sin);
MAKE_SPIRV_CALLABLE(sincos);
MAKE_SPIRV_CALLABLE(sinh);
MAKE_SPIRV_CALLABLE(sinpi);
MAKE_SPIRV_CALLABLE(sqrt);
MAKE_SPIRV_CALLABLE(tan);
MAKE_SPIRV_CALLABLE(tanh);
MAKE_SPIRV_CALLABLE(tanpi);
MAKE_SPIRV_CALLABLE(tgamma);
MAKE_SPIRV_CALLABLE(trunc);

MAKE_SPIRV_CALLABLE(native_cos);
MAKE_SPIRV_CALLABLE(native_divide);
MAKE_SPIRV_CALLABLE(native_exp);
MAKE_SPIRV_CALLABLE(native_exp2);
MAKE_SPIRV_CALLABLE(native_exp10);
MAKE_SPIRV_CALLABLE(native_log);
MAKE_SPIRV_CALLABLE(native_log2);
MAKE_SPIRV_CALLABLE(native_log10);
MAKE_SPIRV_CALLABLE(native_powr);
MAKE_SPIRV_CALLABLE(native_recip);
MAKE_SPIRV_CALLABLE(native_rsqrt);
MAKE_SPIRV_CALLABLE(native_sin);
MAKE_SPIRV_CALLABLE(native_sqrt);
MAKE_SPIRV_CALLABLE(native_tan);

MAKE_SPIRV_CALLABLE(half_cos);
MAKE_SPIRV_CALLABLE(half_divide);
MAKE_SPIRV_CALLABLE(half_exp);
MAKE_SPIRV_CALLABLE(half_exp2);
MAKE_SPIRV_CALLABLE(half_exp10);
MAKE_SPIRV_CALLABLE(half_log);
MAKE_SPIRV_CALLABLE(half_log2);
MAKE_SPIRV_CALLABLE(half_log10);
MAKE_SPIRV_CALLABLE(half_powr);
MAKE_SPIRV_CALLABLE(half_recip);
MAKE_SPIRV_CALLABLE(half_rsqrt);
MAKE_SPIRV_CALLABLE(half_sin);
MAKE_SPIRV_CALLABLE(half_sqrt);
MAKE_SPIRV_CALLABLE(half_tan);

}


/// \brief arc cosine (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto acos(half x) __NOEXCEPT { return __spirv::__make_acos_call<half>(x); }
__ALWAYS_INLINE auto acos(half2 x) __NOEXCEPT { return __spirv::__make_acos_call<half2>(x); }
__ALWAYS_INLINE auto acos(half3 x) __NOEXCEPT { return __spirv::__make_acos_call<half3>(x); }
__ALWAYS_INLINE auto acos(half4 x) __NOEXCEPT { return __spirv::__make_acos_call<half4>(x); }
__ALWAYS_INLINE auto acos(half8 x) __NOEXCEPT { return __spirv::__make_acos_call<half8>(x); }
__ALWAYS_INLINE auto acos(half16 x) __NOEXCEPT { return __spirv::__make_acos_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto acos(double x) __NOEXCEPT { return __spirv::__make_acos_call<double>(x); }
__ALWAYS_INLINE auto acos(double2 x) __NOEXCEPT { return __spirv::__make_acos_call<double2>(x); }
__ALWAYS_INLINE auto acos(double3 x) __NOEXCEPT { return __spirv::__make_acos_call<double3>(x); }
__ALWAYS_INLINE auto acos(double4 x) __NOEXCEPT { return __spirv::__make_acos_call<double4>(x); }
__ALWAYS_INLINE auto acos(double8 x) __NOEXCEPT { return __spirv::__make_acos_call<double8>(x); }
__ALWAYS_INLINE auto acos(double16 x) __NOEXCEPT { return __spirv::__make_acos_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto acos(float x) __NOEXCEPT { return __spirv::__make_acos_call<float>(x); }
__ALWAYS_INLINE auto acos(float2 x) __NOEXCEPT { return __spirv::__make_acos_call<float2>(x); }
__ALWAYS_INLINE auto acos(float3 x) __NOEXCEPT { return __spirv::__make_acos_call<float3>(x); }
__ALWAYS_INLINE auto acos(float4 x) __NOEXCEPT { return __spirv::__make_acos_call<float4>(x); }
__ALWAYS_INLINE auto acos(float8 x) __NOEXCEPT { return __spirv::__make_acos_call<float8>(x); }
__ALWAYS_INLINE auto acos(float16 x) __NOEXCEPT { return __spirv::__make_acos_call<float16>(x); }


/// \brief inverse hyperbolic cosine (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto acosh(half x) __NOEXCEPT { return __spirv::__make_acosh_call<half>(x); }
__ALWAYS_INLINE auto acosh(half2 x) __NOEXCEPT { return __spirv::__make_acosh_call<half2>(x); }
__ALWAYS_INLINE auto acosh(half3 x) __NOEXCEPT { return __spirv::__make_acosh_call<half3>(x); }
__ALWAYS_INLINE auto acosh(half4 x) __NOEXCEPT { return __spirv::__make_acosh_call<half4>(x); }
__ALWAYS_INLINE auto acosh(half8 x) __NOEXCEPT { return __spirv::__make_acosh_call<half8>(x); }
__ALWAYS_INLINE auto acosh(half16 x) __NOEXCEPT { return __spirv::__make_acosh_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto acosh(double x) __NOEXCEPT { return __spirv::__make_acosh_call<double>(x); }
__ALWAYS_INLINE auto acosh(double2 x) __NOEXCEPT { return __spirv::__make_acosh_call<double2>(x); }
__ALWAYS_INLINE auto acosh(double3 x) __NOEXCEPT { return __spirv::__make_acosh_call<double3>(x); }
__ALWAYS_INLINE auto acosh(double4 x) __NOEXCEPT { return __spirv::__make_acosh_call<double4>(x); }
__ALWAYS_INLINE auto acosh(double8 x) __NOEXCEPT { return __spirv::__make_acosh_call<double8>(x); }
__ALWAYS_INLINE auto acosh(double16 x) __NOEXCEPT { return __spirv::__make_acosh_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto acosh(float x) __NOEXCEPT { return __spirv::__make_acosh_call<float>(x); }
__ALWAYS_INLINE auto acosh(float2 x) __NOEXCEPT { return __spirv::__make_acosh_call<float2>(x); }
__ALWAYS_INLINE auto acosh(float3 x) __NOEXCEPT { return __spirv::__make_acosh_call<float3>(x); }
__ALWAYS_INLINE auto acosh(float4 x) __NOEXCEPT { return __spirv::__make_acosh_call<float4>(x); }
__ALWAYS_INLINE auto acosh(float8 x) __NOEXCEPT { return __spirv::__make_acosh_call<float8>(x); }
__ALWAYS_INLINE auto acosh(float16 x) __NOEXCEPT { return __spirv::__make_acosh_call<float16>(x); }


/// \brief acos(x)/PI (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto acospi(half x) __NOEXCEPT { return __spirv::__make_acospi_call<half>(x); }
__ALWAYS_INLINE auto acospi(half2 x) __NOEXCEPT { return __spirv::__make_acospi_call<half2>(x); }
__ALWAYS_INLINE auto acospi(half3 x) __NOEXCEPT { return __spirv::__make_acospi_call<half3>(x); }
__ALWAYS_INLINE auto acospi(half4 x) __NOEXCEPT { return __spirv::__make_acospi_call<half4>(x); }
__ALWAYS_INLINE auto acospi(half8 x) __NOEXCEPT { return __spirv::__make_acospi_call<half8>(x); }
__ALWAYS_INLINE auto acospi(half16 x) __NOEXCEPT { return __spirv::__make_acospi_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto acospi(double x) __NOEXCEPT { return __spirv::__make_acospi_call<double>(x); }
__ALWAYS_INLINE auto acospi(double2 x) __NOEXCEPT { return __spirv::__make_acospi_call<double2>(x); }
__ALWAYS_INLINE auto acospi(double3 x) __NOEXCEPT { return __spirv::__make_acospi_call<double3>(x); }
__ALWAYS_INLINE auto acospi(double4 x) __NOEXCEPT { return __spirv::__make_acospi_call<double4>(x); }
__ALWAYS_INLINE auto acospi(double8 x) __NOEXCEPT { return __spirv::__make_acospi_call<double8>(x); }
__ALWAYS_INLINE auto acospi(double16 x) __NOEXCEPT { return __spirv::__make_acospi_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto acospi(float x) __NOEXCEPT { return __spirv::__make_acospi_call<float>(x); }
__ALWAYS_INLINE auto acospi(float2 x) __NOEXCEPT { return __spirv::__make_acospi_call<float2>(x); }
__ALWAYS_INLINE auto acospi(float3 x) __NOEXCEPT { return __spirv::__make_acospi_call<float3>(x); }
__ALWAYS_INLINE auto acospi(float4 x) __NOEXCEPT { return __spirv::__make_acospi_call<float4>(x); }
__ALWAYS_INLINE auto acospi(float8 x) __NOEXCEPT { return __spirv::__make_acospi_call<float8>(x); }
__ALWAYS_INLINE auto acospi(float16 x) __NOEXCEPT { return __spirv::__make_acospi_call<float16>(x); }


/// \brief arc sine (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto asin(half x) __NOEXCEPT { return __spirv::__make_asin_call<half>(x); }
__ALWAYS_INLINE auto asin(half2 x) __NOEXCEPT { return __spirv::__make_asin_call<half2>(x); }
__ALWAYS_INLINE auto asin(half3 x) __NOEXCEPT { return __spirv::__make_asin_call<half3>(x); }
__ALWAYS_INLINE auto asin(half4 x) __NOEXCEPT { return __spirv::__make_asin_call<half4>(x); }
__ALWAYS_INLINE auto asin(half8 x) __NOEXCEPT { return __spirv::__make_asin_call<half8>(x); }
__ALWAYS_INLINE auto asin(half16 x) __NOEXCEPT { return __spirv::__make_asin_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto asin(double x) __NOEXCEPT { return __spirv::__make_asin_call<double>(x); }
__ALWAYS_INLINE auto asin(double2 x) __NOEXCEPT { return __spirv::__make_asin_call<double2>(x); }
__ALWAYS_INLINE auto asin(double3 x) __NOEXCEPT { return __spirv::__make_asin_call<double3>(x); }
__ALWAYS_INLINE auto asin(double4 x) __NOEXCEPT { return __spirv::__make_asin_call<double4>(x); }
__ALWAYS_INLINE auto asin(double8 x) __NOEXCEPT { return __spirv::__make_asin_call<double8>(x); }
__ALWAYS_INLINE auto asin(double16 x) __NOEXCEPT { return __spirv::__make_asin_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto asin(float x) __NOEXCEPT { return __spirv::__make_asin_call<float>(x); }
__ALWAYS_INLINE auto asin(float2 x) __NOEXCEPT { return __spirv::__make_asin_call<float2>(x); }
__ALWAYS_INLINE auto asin(float3 x) __NOEXCEPT { return __spirv::__make_asin_call<float3>(x); }
__ALWAYS_INLINE auto asin(float4 x) __NOEXCEPT { return __spirv::__make_asin_call<float4>(x); }
__ALWAYS_INLINE auto asin(float8 x) __NOEXCEPT { return __spirv::__make_asin_call<float8>(x); }
__ALWAYS_INLINE auto asin(float16 x) __NOEXCEPT { return __spirv::__make_asin_call<float16>(x); }


/// \brief inverse hyperbolic sine (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto asinh(half x) __NOEXCEPT { return __spirv::__make_asinh_call<half>(x); }
__ALWAYS_INLINE auto asinh(half2 x) __NOEXCEPT { return __spirv::__make_asinh_call<half2>(x); }
__ALWAYS_INLINE auto asinh(half3 x) __NOEXCEPT { return __spirv::__make_asinh_call<half3>(x); }
__ALWAYS_INLINE auto asinh(half4 x) __NOEXCEPT { return __spirv::__make_asinh_call<half4>(x); }
__ALWAYS_INLINE auto asinh(half8 x) __NOEXCEPT { return __spirv::__make_asinh_call<half8>(x); }
__ALWAYS_INLINE auto asinh(half16 x) __NOEXCEPT { return __spirv::__make_asinh_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto asinh(double x) __NOEXCEPT { return __spirv::__make_asinh_call<double>(x); }
__ALWAYS_INLINE auto asinh(double2 x) __NOEXCEPT { return __spirv::__make_asinh_call<double2>(x); }
__ALWAYS_INLINE auto asinh(double3 x) __NOEXCEPT { return __spirv::__make_asinh_call<double3>(x); }
__ALWAYS_INLINE auto asinh(double4 x) __NOEXCEPT { return __spirv::__make_asinh_call<double4>(x); }
__ALWAYS_INLINE auto asinh(double8 x) __NOEXCEPT { return __spirv::__make_asinh_call<double8>(x); }
__ALWAYS_INLINE auto asinh(double16 x) __NOEXCEPT { return __spirv::__make_asinh_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto asinh(float x) __NOEXCEPT { return __spirv::__make_asinh_call<float>(x); }
__ALWAYS_INLINE auto asinh(float2 x) __NOEXCEPT { return __spirv::__make_asinh_call<float2>(x); }
__ALWAYS_INLINE auto asinh(float3 x) __NOEXCEPT { return __spirv::__make_asinh_call<float3>(x); }
__ALWAYS_INLINE auto asinh(float4 x) __NOEXCEPT { return __spirv::__make_asinh_call<float4>(x); }
__ALWAYS_INLINE auto asinh(float8 x) __NOEXCEPT { return __spirv::__make_asinh_call<float8>(x); }
__ALWAYS_INLINE auto asinh(float16 x) __NOEXCEPT { return __spirv::__make_asinh_call<float16>(x); }


/// \brief asin(x)/PI (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto asinpi(half x) __NOEXCEPT { return __spirv::__make_asinpi_call<half>(x); }
__ALWAYS_INLINE auto asinpi(half2 x) __NOEXCEPT { return __spirv::__make_asinpi_call<half2>(x); }
__ALWAYS_INLINE auto asinpi(half3 x) __NOEXCEPT { return __spirv::__make_asinpi_call<half3>(x); }
__ALWAYS_INLINE auto asinpi(half4 x) __NOEXCEPT { return __spirv::__make_asinpi_call<half4>(x); }
__ALWAYS_INLINE auto asinpi(half8 x) __NOEXCEPT { return __spirv::__make_asinpi_call<half8>(x); }
__ALWAYS_INLINE auto asinpi(half16 x) __NOEXCEPT { return __spirv::__make_asinpi_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto asinpi(double x) __NOEXCEPT { return __spirv::__make_asinpi_call<double>(x); }
__ALWAYS_INLINE auto asinpi(double2 x) __NOEXCEPT { return __spirv::__make_asinpi_call<double2>(x); }
__ALWAYS_INLINE auto asinpi(double3 x) __NOEXCEPT { return __spirv::__make_asinpi_call<double3>(x); }
__ALWAYS_INLINE auto asinpi(double4 x) __NOEXCEPT { return __spirv::__make_asinpi_call<double4>(x); }
__ALWAYS_INLINE auto asinpi(double8 x) __NOEXCEPT { return __spirv::__make_asinpi_call<double8>(x); }
__ALWAYS_INLINE auto asinpi(double16 x) __NOEXCEPT { return __spirv::__make_asinpi_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto asinpi(float x) __NOEXCEPT { return __spirv::__make_asinpi_call<float>(x); }
__ALWAYS_INLINE auto asinpi(float2 x) __NOEXCEPT { return __spirv::__make_asinpi_call<float2>(x); }
__ALWAYS_INLINE auto asinpi(float3 x) __NOEXCEPT { return __spirv::__make_asinpi_call<float3>(x); }
__ALWAYS_INLINE auto asinpi(float4 x) __NOEXCEPT { return __spirv::__make_asinpi_call<float4>(x); }
__ALWAYS_INLINE auto asinpi(float8 x) __NOEXCEPT { return __spirv::__make_asinpi_call<float8>(x); }
__ALWAYS_INLINE auto asinpi(float16 x) __NOEXCEPT { return __spirv::__make_asinpi_call<float16>(x); }


/// \brief arc tangent (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto atan(half x) __NOEXCEPT { return __spirv::__make_atan_call<half>(x); }
__ALWAYS_INLINE auto atan(half2 x) __NOEXCEPT { return __spirv::__make_atan_call<half2>(x); }
__ALWAYS_INLINE auto atan(half3 x) __NOEXCEPT { return __spirv::__make_atan_call<half3>(x); }
__ALWAYS_INLINE auto atan(half4 x) __NOEXCEPT { return __spirv::__make_atan_call<half4>(x); }
__ALWAYS_INLINE auto atan(half8 x) __NOEXCEPT { return __spirv::__make_atan_call<half8>(x); }
__ALWAYS_INLINE auto atan(half16 x) __NOEXCEPT { return __spirv::__make_atan_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto atan(double x) __NOEXCEPT { return __spirv::__make_atan_call<double>(x); }
__ALWAYS_INLINE auto atan(double2 x) __NOEXCEPT { return __spirv::__make_atan_call<double2>(x); }
__ALWAYS_INLINE auto atan(double3 x) __NOEXCEPT { return __spirv::__make_atan_call<double3>(x); }
__ALWAYS_INLINE auto atan(double4 x) __NOEXCEPT { return __spirv::__make_atan_call<double4>(x); }
__ALWAYS_INLINE auto atan(double8 x) __NOEXCEPT { return __spirv::__make_atan_call<double8>(x); }
__ALWAYS_INLINE auto atan(double16 x) __NOEXCEPT { return __spirv::__make_atan_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto atan(float x) __NOEXCEPT { return __spirv::__make_atan_call<float>(x); }
__ALWAYS_INLINE auto atan(float2 x) __NOEXCEPT { return __spirv::__make_atan_call<float2>(x); }
__ALWAYS_INLINE auto atan(float3 x) __NOEXCEPT { return __spirv::__make_atan_call<float3>(x); }
__ALWAYS_INLINE auto atan(float4 x) __NOEXCEPT { return __spirv::__make_atan_call<float4>(x); }
__ALWAYS_INLINE auto atan(float8 x) __NOEXCEPT { return __spirv::__make_atan_call<float8>(x); }
__ALWAYS_INLINE auto atan(float16 x) __NOEXCEPT { return __spirv::__make_atan_call<float16>(x); }


/// \brief hyperbolic arc tangent (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto atanh(half x) __NOEXCEPT { return __spirv::__make_atanh_call<half>(x); }
__ALWAYS_INLINE auto atanh(half2 x) __NOEXCEPT { return __spirv::__make_atanh_call<half2>(x); }
__ALWAYS_INLINE auto atanh(half3 x) __NOEXCEPT { return __spirv::__make_atanh_call<half3>(x); }
__ALWAYS_INLINE auto atanh(half4 x) __NOEXCEPT { return __spirv::__make_atanh_call<half4>(x); }
__ALWAYS_INLINE auto atanh(half8 x) __NOEXCEPT { return __spirv::__make_atanh_call<half8>(x); }
__ALWAYS_INLINE auto atanh(half16 x) __NOEXCEPT { return __spirv::__make_atanh_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto atanh(double x) __NOEXCEPT { return __spirv::__make_atanh_call<double>(x); }
__ALWAYS_INLINE auto atanh(double2 x) __NOEXCEPT { return __spirv::__make_atanh_call<double2>(x); }
__ALWAYS_INLINE auto atanh(double3 x) __NOEXCEPT { return __spirv::__make_atanh_call<double3>(x); }
__ALWAYS_INLINE auto atanh(double4 x) __NOEXCEPT { return __spirv::__make_atanh_call<double4>(x); }
__ALWAYS_INLINE auto atanh(double8 x) __NOEXCEPT { return __spirv::__make_atanh_call<double8>(x); }
__ALWAYS_INLINE auto atanh(double16 x) __NOEXCEPT { return __spirv::__make_atanh_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto atanh(float x) __NOEXCEPT { return __spirv::__make_atanh_call<float>(x); }
__ALWAYS_INLINE auto atanh(float2 x) __NOEXCEPT { return __spirv::__make_atanh_call<float2>(x); }
__ALWAYS_INLINE auto atanh(float3 x) __NOEXCEPT { return __spirv::__make_atanh_call<float3>(x); }
__ALWAYS_INLINE auto atanh(float4 x) __NOEXCEPT { return __spirv::__make_atanh_call<float4>(x); }
__ALWAYS_INLINE auto atanh(float8 x) __NOEXCEPT { return __spirv::__make_atanh_call<float8>(x); }
__ALWAYS_INLINE auto atanh(float16 x) __NOEXCEPT { return __spirv::__make_atanh_call<float16>(x); }


/// \brief atan(x)/PI (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto atanpi(half x) __NOEXCEPT { return __spirv::__make_atanpi_call<half>(x); }
__ALWAYS_INLINE auto atanpi(half2 x) __NOEXCEPT { return __spirv::__make_atanpi_call<half2>(x); }
__ALWAYS_INLINE auto atanpi(half3 x) __NOEXCEPT { return __spirv::__make_atanpi_call<half3>(x); }
__ALWAYS_INLINE auto atanpi(half4 x) __NOEXCEPT { return __spirv::__make_atanpi_call<half4>(x); }
__ALWAYS_INLINE auto atanpi(half8 x) __NOEXCEPT { return __spirv::__make_atanpi_call<half8>(x); }
__ALWAYS_INLINE auto atanpi(half16 x) __NOEXCEPT { return __spirv::__make_atanpi_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto atanpi(double x) __NOEXCEPT { return __spirv::__make_atanpi_call<double>(x); }
__ALWAYS_INLINE auto atanpi(double2 x) __NOEXCEPT { return __spirv::__make_atanpi_call<double2>(x); }
__ALWAYS_INLINE auto atanpi(double3 x) __NOEXCEPT { return __spirv::__make_atanpi_call<double3>(x); }
__ALWAYS_INLINE auto atanpi(double4 x) __NOEXCEPT { return __spirv::__make_atanpi_call<double4>(x); }
__ALWAYS_INLINE auto atanpi(double8 x) __NOEXCEPT { return __spirv::__make_atanpi_call<double8>(x); }
__ALWAYS_INLINE auto atanpi(double16 x) __NOEXCEPT { return __spirv::__make_atanpi_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto atanpi(float x) __NOEXCEPT { return __spirv::__make_atanpi_call<float>(x); }
__ALWAYS_INLINE auto atanpi(float2 x) __NOEXCEPT { return __spirv::__make_atanpi_call<float2>(x); }
__ALWAYS_INLINE auto atanpi(float3 x) __NOEXCEPT { return __spirv::__make_atanpi_call<float3>(x); }
__ALWAYS_INLINE auto atanpi(float4 x) __NOEXCEPT { return __spirv::__make_atanpi_call<float4>(x); }
__ALWAYS_INLINE auto atanpi(float8 x) __NOEXCEPT { return __spirv::__make_atanpi_call<float8>(x); }
__ALWAYS_INLINE auto atanpi(float16 x) __NOEXCEPT { return __spirv::__make_atanpi_call<float16>(x); }


/// \brief cube-root (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto cbrt(half x) __NOEXCEPT { return __spirv::__make_cbrt_call<half>(x); }
__ALWAYS_INLINE auto cbrt(half2 x) __NOEXCEPT { return __spirv::__make_cbrt_call<half2>(x); }
__ALWAYS_INLINE auto cbrt(half3 x) __NOEXCEPT { return __spirv::__make_cbrt_call<half3>(x); }
__ALWAYS_INLINE auto cbrt(half4 x) __NOEXCEPT { return __spirv::__make_cbrt_call<half4>(x); }
__ALWAYS_INLINE auto cbrt(half8 x) __NOEXCEPT { return __spirv::__make_cbrt_call<half8>(x); }
__ALWAYS_INLINE auto cbrt(half16 x) __NOEXCEPT { return __spirv::__make_cbrt_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto cbrt(double x) __NOEXCEPT { return __spirv::__make_cbrt_call<double>(x); }
__ALWAYS_INLINE auto cbrt(double2 x) __NOEXCEPT { return __spirv::__make_cbrt_call<double2>(x); }
__ALWAYS_INLINE auto cbrt(double3 x) __NOEXCEPT { return __spirv::__make_cbrt_call<double3>(x); }
__ALWAYS_INLINE auto cbrt(double4 x) __NOEXCEPT { return __spirv::__make_cbrt_call<double4>(x); }
__ALWAYS_INLINE auto cbrt(double8 x) __NOEXCEPT { return __spirv::__make_cbrt_call<double8>(x); }
__ALWAYS_INLINE auto cbrt(double16 x) __NOEXCEPT { return __spirv::__make_cbrt_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto cbrt(float x) __NOEXCEPT { return __spirv::__make_cbrt_call<float>(x); }
__ALWAYS_INLINE auto cbrt(float2 x) __NOEXCEPT { return __spirv::__make_cbrt_call<float2>(x); }
__ALWAYS_INLINE auto cbrt(float3 x) __NOEXCEPT { return __spirv::__make_cbrt_call<float3>(x); }
__ALWAYS_INLINE auto cbrt(float4 x) __NOEXCEPT { return __spirv::__make_cbrt_call<float4>(x); }
__ALWAYS_INLINE auto cbrt(float8 x) __NOEXCEPT { return __spirv::__make_cbrt_call<float8>(x); }
__ALWAYS_INLINE auto cbrt(float16 x) __NOEXCEPT { return __spirv::__make_cbrt_call<float16>(x); }


/// \brief round using round to positive infinity mode
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto ceil(half x) __NOEXCEPT { return __spirv::__make_ceil_call<half>(x); }
__ALWAYS_INLINE auto ceil(half2 x) __NOEXCEPT { return __spirv::__make_ceil_call<half2>(x); }
__ALWAYS_INLINE auto ceil(half3 x) __NOEXCEPT { return __spirv::__make_ceil_call<half3>(x); }
__ALWAYS_INLINE auto ceil(half4 x) __NOEXCEPT { return __spirv::__make_ceil_call<half4>(x); }
__ALWAYS_INLINE auto ceil(half8 x) __NOEXCEPT { return __spirv::__make_ceil_call<half8>(x); }
__ALWAYS_INLINE auto ceil(half16 x) __NOEXCEPT { return __spirv::__make_ceil_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto ceil(double x) __NOEXCEPT { return __spirv::__make_ceil_call<double>(x); }
__ALWAYS_INLINE auto ceil(double2 x) __NOEXCEPT { return __spirv::__make_ceil_call<double2>(x); }
__ALWAYS_INLINE auto ceil(double3 x) __NOEXCEPT { return __spirv::__make_ceil_call<double3>(x); }
__ALWAYS_INLINE auto ceil(double4 x) __NOEXCEPT { return __spirv::__make_ceil_call<double4>(x); }
__ALWAYS_INLINE auto ceil(double8 x) __NOEXCEPT { return __spirv::__make_ceil_call<double8>(x); }
__ALWAYS_INLINE auto ceil(double16 x) __NOEXCEPT { return __spirv::__make_ceil_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto ceil(float x) __NOEXCEPT { return __spirv::__make_ceil_call<float>(x); }
__ALWAYS_INLINE auto ceil(float2 x) __NOEXCEPT { return __spirv::__make_ceil_call<float2>(x); }
__ALWAYS_INLINE auto ceil(float3 x) __NOEXCEPT { return __spirv::__make_ceil_call<float3>(x); }
__ALWAYS_INLINE auto ceil(float4 x) __NOEXCEPT { return __spirv::__make_ceil_call<float4>(x); }
__ALWAYS_INLINE auto ceil(float8 x) __NOEXCEPT { return __spirv::__make_ceil_call<float8>(x); }
__ALWAYS_INLINE auto ceil(float16 x) __NOEXCEPT { return __spirv::__make_ceil_call<float16>(x); }


/// \brief cosine (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto cos(half x) __NOEXCEPT { return __spirv::__make_cos_call<half>(x); }
__ALWAYS_INLINE auto cos(half2 x) __NOEXCEPT { return __spirv::__make_cos_call<half2>(x); }
__ALWAYS_INLINE auto cos(half3 x) __NOEXCEPT { return __spirv::__make_cos_call<half3>(x); }
__ALWAYS_INLINE auto cos(half4 x) __NOEXCEPT { return __spirv::__make_cos_call<half4>(x); }
__ALWAYS_INLINE auto cos(half8 x) __NOEXCEPT { return __spirv::__make_cos_call<half8>(x); }
__ALWAYS_INLINE auto cos(half16 x) __NOEXCEPT { return __spirv::__make_cos_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto cos(double x) __NOEXCEPT { return __spirv::__make_cos_call<double>(x); }
__ALWAYS_INLINE auto cos(double2 x) __NOEXCEPT { return __spirv::__make_cos_call<double2>(x); }
__ALWAYS_INLINE auto cos(double3 x) __NOEXCEPT { return __spirv::__make_cos_call<double3>(x); }
__ALWAYS_INLINE auto cos(double4 x) __NOEXCEPT { return __spirv::__make_cos_call<double4>(x); }
__ALWAYS_INLINE auto cos(double8 x) __NOEXCEPT { return __spirv::__make_cos_call<double8>(x); }
__ALWAYS_INLINE auto cos(double16 x) __NOEXCEPT { return __spirv::__make_cos_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto cos(float x) __NOEXCEPT { return __spirv::__make_cos_call<float>(x); }
__ALWAYS_INLINE auto cos(float2 x) __NOEXCEPT { return __spirv::__make_cos_call<float2>(x); }
__ALWAYS_INLINE auto cos(float3 x) __NOEXCEPT { return __spirv::__make_cos_call<float3>(x); }
__ALWAYS_INLINE auto cos(float4 x) __NOEXCEPT { return __spirv::__make_cos_call<float4>(x); }
__ALWAYS_INLINE auto cos(float8 x) __NOEXCEPT { return __spirv::__make_cos_call<float8>(x); }
__ALWAYS_INLINE auto cos(float16 x) __NOEXCEPT { return __spirv::__make_cos_call<float16>(x); }


/// \brief hyperbolic cosine (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto cosh(half x) __NOEXCEPT { return __spirv::__make_cosh_call<half>(x); }
__ALWAYS_INLINE auto cosh(half2 x) __NOEXCEPT { return __spirv::__make_cosh_call<half2>(x); }
__ALWAYS_INLINE auto cosh(half3 x) __NOEXCEPT { return __spirv::__make_cosh_call<half3>(x); }
__ALWAYS_INLINE auto cosh(half4 x) __NOEXCEPT { return __spirv::__make_cosh_call<half4>(x); }
__ALWAYS_INLINE auto cosh(half8 x) __NOEXCEPT { return __spirv::__make_cosh_call<half8>(x); }
__ALWAYS_INLINE auto cosh(half16 x) __NOEXCEPT { return __spirv::__make_cosh_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto cosh(double x) __NOEXCEPT { return __spirv::__make_cosh_call<double>(x); }
__ALWAYS_INLINE auto cosh(double2 x) __NOEXCEPT { return __spirv::__make_cosh_call<double2>(x); }
__ALWAYS_INLINE auto cosh(double3 x) __NOEXCEPT { return __spirv::__make_cosh_call<double3>(x); }
__ALWAYS_INLINE auto cosh(double4 x) __NOEXCEPT { return __spirv::__make_cosh_call<double4>(x); }
__ALWAYS_INLINE auto cosh(double8 x) __NOEXCEPT { return __spirv::__make_cosh_call<double8>(x); }
__ALWAYS_INLINE auto cosh(double16 x) __NOEXCEPT { return __spirv::__make_cosh_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto cosh(float x) __NOEXCEPT { return __spirv::__make_cosh_call<float>(x); }
__ALWAYS_INLINE auto cosh(float2 x) __NOEXCEPT { return __spirv::__make_cosh_call<float2>(x); }
__ALWAYS_INLINE auto cosh(float3 x) __NOEXCEPT { return __spirv::__make_cosh_call<float3>(x); }
__ALWAYS_INLINE auto cosh(float4 x) __NOEXCEPT { return __spirv::__make_cosh_call<float4>(x); }
__ALWAYS_INLINE auto cosh(float8 x) __NOEXCEPT { return __spirv::__make_cosh_call<float8>(x); }
__ALWAYS_INLINE auto cosh(float16 x) __NOEXCEPT { return __spirv::__make_cosh_call<float16>(x); }


/// \brief cos(x*pi) (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto cospi(half x) __NOEXCEPT { return __spirv::__make_cospi_call<half>(x); }
__ALWAYS_INLINE auto cospi(half2 x) __NOEXCEPT { return __spirv::__make_cospi_call<half2>(x); }
__ALWAYS_INLINE auto cospi(half3 x) __NOEXCEPT { return __spirv::__make_cospi_call<half3>(x); }
__ALWAYS_INLINE auto cospi(half4 x) __NOEXCEPT { return __spirv::__make_cospi_call<half4>(x); }
__ALWAYS_INLINE auto cospi(half8 x) __NOEXCEPT { return __spirv::__make_cospi_call<half8>(x); }
__ALWAYS_INLINE auto cospi(half16 x) __NOEXCEPT { return __spirv::__make_cospi_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto cospi(double x) __NOEXCEPT { return __spirv::__make_cospi_call<double>(x); }
__ALWAYS_INLINE auto cospi(double2 x) __NOEXCEPT { return __spirv::__make_cospi_call<double2>(x); }
__ALWAYS_INLINE auto cospi(double3 x) __NOEXCEPT { return __spirv::__make_cospi_call<double3>(x); }
__ALWAYS_INLINE auto cospi(double4 x) __NOEXCEPT { return __spirv::__make_cospi_call<double4>(x); }
__ALWAYS_INLINE auto cospi(double8 x) __NOEXCEPT { return __spirv::__make_cospi_call<double8>(x); }
__ALWAYS_INLINE auto cospi(double16 x) __NOEXCEPT { return __spirv::__make_cospi_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto cospi(float x) __NOEXCEPT { return __spirv::__make_cospi_call<float>(x); }
__ALWAYS_INLINE auto cospi(float2 x) __NOEXCEPT { return __spirv::__make_cospi_call<float2>(x); }
__ALWAYS_INLINE auto cospi(float3 x) __NOEXCEPT { return __spirv::__make_cospi_call<float3>(x); }
__ALWAYS_INLINE auto cospi(float4 x) __NOEXCEPT { return __spirv::__make_cospi_call<float4>(x); }
__ALWAYS_INLINE auto cospi(float8 x) __NOEXCEPT { return __spirv::__make_cospi_call<float8>(x); }
__ALWAYS_INLINE auto cospi(float16 x) __NOEXCEPT { return __spirv::__make_cospi_call<float16>(x); }


/// \brief complementary error function (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto erfc(half x) __NOEXCEPT { return __spirv::__make_erfc_call<half>(x); }
__ALWAYS_INLINE auto erfc(half2 x) __NOEXCEPT { return __spirv::__make_erfc_call<half2>(x); }
__ALWAYS_INLINE auto erfc(half3 x) __NOEXCEPT { return __spirv::__make_erfc_call<half3>(x); }
__ALWAYS_INLINE auto erfc(half4 x) __NOEXCEPT { return __spirv::__make_erfc_call<half4>(x); }
__ALWAYS_INLINE auto erfc(half8 x) __NOEXCEPT { return __spirv::__make_erfc_call<half8>(x); }
__ALWAYS_INLINE auto erfc(half16 x) __NOEXCEPT { return __spirv::__make_erfc_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto erfc(double x) __NOEXCEPT { return __spirv::__make_erfc_call<double>(x); }
__ALWAYS_INLINE auto erfc(double2 x) __NOEXCEPT { return __spirv::__make_erfc_call<double2>(x); }
__ALWAYS_INLINE auto erfc(double3 x) __NOEXCEPT { return __spirv::__make_erfc_call<double3>(x); }
__ALWAYS_INLINE auto erfc(double4 x) __NOEXCEPT { return __spirv::__make_erfc_call<double4>(x); }
__ALWAYS_INLINE auto erfc(double8 x) __NOEXCEPT { return __spirv::__make_erfc_call<double8>(x); }
__ALWAYS_INLINE auto erfc(double16 x) __NOEXCEPT { return __spirv::__make_erfc_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto erfc(float x) __NOEXCEPT { return __spirv::__make_erfc_call<float>(x); }
__ALWAYS_INLINE auto erfc(float2 x) __NOEXCEPT { return __spirv::__make_erfc_call<float2>(x); }
__ALWAYS_INLINE auto erfc(float3 x) __NOEXCEPT { return __spirv::__make_erfc_call<float3>(x); }
__ALWAYS_INLINE auto erfc(float4 x) __NOEXCEPT { return __spirv::__make_erfc_call<float4>(x); }
__ALWAYS_INLINE auto erfc(float8 x) __NOEXCEPT { return __spirv::__make_erfc_call<float8>(x); }
__ALWAYS_INLINE auto erfc(float16 x) __NOEXCEPT { return __spirv::__make_erfc_call<float16>(x); }


/// \brief error function (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto erf(half x) __NOEXCEPT { return __spirv::__make_erf_call<half>(x); }
__ALWAYS_INLINE auto erf(half2 x) __NOEXCEPT { return __spirv::__make_erf_call<half2>(x); }
__ALWAYS_INLINE auto erf(half3 x) __NOEXCEPT { return __spirv::__make_erf_call<half3>(x); }
__ALWAYS_INLINE auto erf(half4 x) __NOEXCEPT { return __spirv::__make_erf_call<half4>(x); }
__ALWAYS_INLINE auto erf(half8 x) __NOEXCEPT { return __spirv::__make_erf_call<half8>(x); }
__ALWAYS_INLINE auto erf(half16 x) __NOEXCEPT { return __spirv::__make_erf_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto erf(double x) __NOEXCEPT { return __spirv::__make_erf_call<double>(x); }
__ALWAYS_INLINE auto erf(double2 x) __NOEXCEPT { return __spirv::__make_erf_call<double2>(x); }
__ALWAYS_INLINE auto erf(double3 x) __NOEXCEPT { return __spirv::__make_erf_call<double3>(x); }
__ALWAYS_INLINE auto erf(double4 x) __NOEXCEPT { return __spirv::__make_erf_call<double4>(x); }
__ALWAYS_INLINE auto erf(double8 x) __NOEXCEPT { return __spirv::__make_erf_call<double8>(x); }
__ALWAYS_INLINE auto erf(double16 x) __NOEXCEPT { return __spirv::__make_erf_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto erf(float x) __NOEXCEPT { return __spirv::__make_erf_call<float>(x); }
__ALWAYS_INLINE auto erf(float2 x) __NOEXCEPT { return __spirv::__make_erf_call<float2>(x); }
__ALWAYS_INLINE auto erf(float3 x) __NOEXCEPT { return __spirv::__make_erf_call<float3>(x); }
__ALWAYS_INLINE auto erf(float4 x) __NOEXCEPT { return __spirv::__make_erf_call<float4>(x); }
__ALWAYS_INLINE auto erf(float8 x) __NOEXCEPT { return __spirv::__make_erf_call<float8>(x); }
__ALWAYS_INLINE auto erf(float16 x) __NOEXCEPT { return __spirv::__make_erf_call<float16>(x); }


/// \brief e^x (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto exp(half x) __NOEXCEPT { return __spirv::__make_exp_call<half>(x); }
__ALWAYS_INLINE auto exp(half2 x) __NOEXCEPT { return __spirv::__make_exp_call<half2>(x); }
__ALWAYS_INLINE auto exp(half3 x) __NOEXCEPT { return __spirv::__make_exp_call<half3>(x); }
__ALWAYS_INLINE auto exp(half4 x) __NOEXCEPT { return __spirv::__make_exp_call<half4>(x); }
__ALWAYS_INLINE auto exp(half8 x) __NOEXCEPT { return __spirv::__make_exp_call<half8>(x); }
__ALWAYS_INLINE auto exp(half16 x) __NOEXCEPT { return __spirv::__make_exp_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto exp(double x) __NOEXCEPT { return __spirv::__make_exp_call<double>(x); }
__ALWAYS_INLINE auto exp(double2 x) __NOEXCEPT { return __spirv::__make_exp_call<double2>(x); }
__ALWAYS_INLINE auto exp(double3 x) __NOEXCEPT { return __spirv::__make_exp_call<double3>(x); }
__ALWAYS_INLINE auto exp(double4 x) __NOEXCEPT { return __spirv::__make_exp_call<double4>(x); }
__ALWAYS_INLINE auto exp(double8 x) __NOEXCEPT { return __spirv::__make_exp_call<double8>(x); }
__ALWAYS_INLINE auto exp(double16 x) __NOEXCEPT { return __spirv::__make_exp_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto exp(float x) __NOEXCEPT { return __spirv::__make_exp_call<float>(x); }
__ALWAYS_INLINE auto exp(float2 x) __NOEXCEPT { return __spirv::__make_exp_call<float2>(x); }
__ALWAYS_INLINE auto exp(float3 x) __NOEXCEPT { return __spirv::__make_exp_call<float3>(x); }
__ALWAYS_INLINE auto exp(float4 x) __NOEXCEPT { return __spirv::__make_exp_call<float4>(x); }
__ALWAYS_INLINE auto exp(float8 x) __NOEXCEPT { return __spirv::__make_exp_call<float8>(x); }
__ALWAYS_INLINE auto exp(float16 x) __NOEXCEPT { return __spirv::__make_exp_call<float16>(x); }


/// brief 2^x (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto exp2(half x) __NOEXCEPT { return __spirv::__make_exp2_call<half>(x); }
__ALWAYS_INLINE auto exp2(half2 x) __NOEXCEPT { return __spirv::__make_exp2_call<half2>(x); }
__ALWAYS_INLINE auto exp2(half3 x) __NOEXCEPT { return __spirv::__make_exp2_call<half3>(x); }
__ALWAYS_INLINE auto exp2(half4 x) __NOEXCEPT { return __spirv::__make_exp2_call<half4>(x); }
__ALWAYS_INLINE auto exp2(half8 x) __NOEXCEPT { return __spirv::__make_exp2_call<half8>(x); }
__ALWAYS_INLINE auto exp2(half16 x) __NOEXCEPT { return __spirv::__make_exp2_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto exp2(double x) __NOEXCEPT { return __spirv::__make_exp2_call<double>(x); }
__ALWAYS_INLINE auto exp2(double2 x) __NOEXCEPT { return __spirv::__make_exp2_call<double2>(x); }
__ALWAYS_INLINE auto exp2(double3 x) __NOEXCEPT { return __spirv::__make_exp2_call<double3>(x); }
__ALWAYS_INLINE auto exp2(double4 x) __NOEXCEPT { return __spirv::__make_exp2_call<double4>(x); }
__ALWAYS_INLINE auto exp2(double8 x) __NOEXCEPT { return __spirv::__make_exp2_call<double8>(x); }
__ALWAYS_INLINE auto exp2(double16 x) __NOEXCEPT { return __spirv::__make_exp2_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto exp2(float x) __NOEXCEPT { return __spirv::__make_exp2_call<float>(x); }
__ALWAYS_INLINE auto exp2(float2 x) __NOEXCEPT { return __spirv::__make_exp2_call<float2>(x); }
__ALWAYS_INLINE auto exp2(float3 x) __NOEXCEPT { return __spirv::__make_exp2_call<float3>(x); }
__ALWAYS_INLINE auto exp2(float4 x) __NOEXCEPT { return __spirv::__make_exp2_call<float4>(x); }
__ALWAYS_INLINE auto exp2(float8 x) __NOEXCEPT { return __spirv::__make_exp2_call<float8>(x); }
__ALWAYS_INLINE auto exp2(float16 x) __NOEXCEPT { return __spirv::__make_exp2_call<float16>(x); }


/// \brief 10^x (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto exp10(half x) __NOEXCEPT { return __spirv::__make_exp10_call<half>(x); }
__ALWAYS_INLINE auto exp10(half2 x) __NOEXCEPT { return __spirv::__make_exp10_call<half2>(x); }
__ALWAYS_INLINE auto exp10(half3 x) __NOEXCEPT { return __spirv::__make_exp10_call<half3>(x); }
__ALWAYS_INLINE auto exp10(half4 x) __NOEXCEPT { return __spirv::__make_exp10_call<half4>(x); }
__ALWAYS_INLINE auto exp10(half8 x) __NOEXCEPT { return __spirv::__make_exp10_call<half8>(x); }
__ALWAYS_INLINE auto exp10(half16 x) __NOEXCEPT { return __spirv::__make_exp10_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto exp10(double x) __NOEXCEPT { return __spirv::__make_exp10_call<double>(x); }
__ALWAYS_INLINE auto exp10(double2 x) __NOEXCEPT { return __spirv::__make_exp10_call<double2>(x); }
__ALWAYS_INLINE auto exp10(double3 x) __NOEXCEPT { return __spirv::__make_exp10_call<double3>(x); }
__ALWAYS_INLINE auto exp10(double4 x) __NOEXCEPT { return __spirv::__make_exp10_call<double4>(x); }
__ALWAYS_INLINE auto exp10(double8 x) __NOEXCEPT { return __spirv::__make_exp10_call<double8>(x); }
__ALWAYS_INLINE auto exp10(double16 x) __NOEXCEPT { return __spirv::__make_exp10_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto exp10(float x) __NOEXCEPT { return __spirv::__make_exp10_call<float>(x); }
__ALWAYS_INLINE auto exp10(float2 x) __NOEXCEPT { return __spirv::__make_exp10_call<float2>(x); }
__ALWAYS_INLINE auto exp10(float3 x) __NOEXCEPT { return __spirv::__make_exp10_call<float3>(x); }
__ALWAYS_INLINE auto exp10(float4 x) __NOEXCEPT { return __spirv::__make_exp10_call<float4>(x); }
__ALWAYS_INLINE auto exp10(float8 x) __NOEXCEPT { return __spirv::__make_exp10_call<float8>(x); }
__ALWAYS_INLINE auto exp10(float16 x) __NOEXCEPT { return __spirv::__make_exp10_call<float16>(x); }


/// \brief e^x - 1.0 (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto expm1(half x) __NOEXCEPT { return __spirv::__make_expm1_call<half>(x); }
__ALWAYS_INLINE auto expm1(half2 x) __NOEXCEPT { return __spirv::__make_expm1_call<half2>(x); }
__ALWAYS_INLINE auto expm1(half3 x) __NOEXCEPT { return __spirv::__make_expm1_call<half3>(x); }
__ALWAYS_INLINE auto expm1(half4 x) __NOEXCEPT { return __spirv::__make_expm1_call<half4>(x); }
__ALWAYS_INLINE auto expm1(half8 x) __NOEXCEPT { return __spirv::__make_expm1_call<half8>(x); }
__ALWAYS_INLINE auto expm1(half16 x) __NOEXCEPT { return __spirv::__make_expm1_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto expm1(double x) __NOEXCEPT { return __spirv::__make_expm1_call<double>(x); }
__ALWAYS_INLINE auto expm1(double2 x) __NOEXCEPT { return __spirv::__make_expm1_call<double2>(x); }
__ALWAYS_INLINE auto expm1(double3 x) __NOEXCEPT { return __spirv::__make_expm1_call<double3>(x); }
__ALWAYS_INLINE auto expm1(double4 x) __NOEXCEPT { return __spirv::__make_expm1_call<double4>(x); }
__ALWAYS_INLINE auto expm1(double8 x) __NOEXCEPT { return __spirv::__make_expm1_call<double8>(x); }
__ALWAYS_INLINE auto expm1(double16 x) __NOEXCEPT { return __spirv::__make_expm1_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto expm1(float x) __NOEXCEPT { return __spirv::__make_expm1_call<float>(x); }
__ALWAYS_INLINE auto expm1(float2 x) __NOEXCEPT { return __spirv::__make_expm1_call<float2>(x); }
__ALWAYS_INLINE auto expm1(float3 x) __NOEXCEPT { return __spirv::__make_expm1_call<float3>(x); }
__ALWAYS_INLINE auto expm1(float4 x) __NOEXCEPT { return __spirv::__make_expm1_call<float4>(x); }
__ALWAYS_INLINE auto expm1(float8 x) __NOEXCEPT { return __spirv::__make_expm1_call<float8>(x); }
__ALWAYS_INLINE auto expm1(float16 x) __NOEXCEPT { return __spirv::__make_expm1_call<float16>(x); }


/// \brief |x| (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto fabs(half x) __NOEXCEPT { return __spirv::__make_fabs_call<half>(x); }
__ALWAYS_INLINE auto fabs(half2 x) __NOEXCEPT { return __spirv::__make_fabs_call<half2>(x); }
__ALWAYS_INLINE auto fabs(half3 x) __NOEXCEPT { return __spirv::__make_fabs_call<half3>(x); }
__ALWAYS_INLINE auto fabs(half4 x) __NOEXCEPT { return __spirv::__make_fabs_call<half4>(x); }
__ALWAYS_INLINE auto fabs(half8 x) __NOEXCEPT { return __spirv::__make_fabs_call<half8>(x); }
__ALWAYS_INLINE auto fabs(half16 x) __NOEXCEPT { return __spirv::__make_fabs_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto fabs(double x) __NOEXCEPT { return __spirv::__make_fabs_call<double>(x); }
__ALWAYS_INLINE auto fabs(double2 x) __NOEXCEPT { return __spirv::__make_fabs_call<double2>(x); }
__ALWAYS_INLINE auto fabs(double3 x) __NOEXCEPT { return __spirv::__make_fabs_call<double3>(x); }
__ALWAYS_INLINE auto fabs(double4 x) __NOEXCEPT { return __spirv::__make_fabs_call<double4>(x); }
__ALWAYS_INLINE auto fabs(double8 x) __NOEXCEPT { return __spirv::__make_fabs_call<double8>(x); }
__ALWAYS_INLINE auto fabs(double16 x) __NOEXCEPT { return __spirv::__make_fabs_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto fabs(float x) __NOEXCEPT { return __spirv::__make_fabs_call<float>(x); }
__ALWAYS_INLINE auto fabs(float2 x) __NOEXCEPT { return __spirv::__make_fabs_call<float2>(x); }
__ALWAYS_INLINE auto fabs(float3 x) __NOEXCEPT { return __spirv::__make_fabs_call<float3>(x); }
__ALWAYS_INLINE auto fabs(float4 x) __NOEXCEPT { return __spirv::__make_fabs_call<float4>(x); }
__ALWAYS_INLINE auto fabs(float8 x) __NOEXCEPT { return __spirv::__make_fabs_call<float8>(x); }
__ALWAYS_INLINE auto fabs(float16 x) __NOEXCEPT { return __spirv::__make_fabs_call<float16>(x); }


/// \brief round using round to negative infinity mode
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto floor(half x) __NOEXCEPT { return __spirv::__make_floor_call<half>(x); }
__ALWAYS_INLINE auto floor(half2 x) __NOEXCEPT { return __spirv::__make_floor_call<half2>(x); }
__ALWAYS_INLINE auto floor(half3 x) __NOEXCEPT { return __spirv::__make_floor_call<half3>(x); }
__ALWAYS_INLINE auto floor(half4 x) __NOEXCEPT { return __spirv::__make_floor_call<half4>(x); }
__ALWAYS_INLINE auto floor(half8 x) __NOEXCEPT { return __spirv::__make_floor_call<half8>(x); }
__ALWAYS_INLINE auto floor(half16 x) __NOEXCEPT { return __spirv::__make_floor_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto floor(double x) __NOEXCEPT { return __spirv::__make_floor_call<double>(x); }
__ALWAYS_INLINE auto floor(double2 x) __NOEXCEPT { return __spirv::__make_floor_call<double2>(x); }
__ALWAYS_INLINE auto floor(double3 x) __NOEXCEPT { return __spirv::__make_floor_call<double3>(x); }
__ALWAYS_INLINE auto floor(double4 x) __NOEXCEPT { return __spirv::__make_floor_call<double4>(x); }
__ALWAYS_INLINE auto floor(double8 x) __NOEXCEPT { return __spirv::__make_floor_call<double8>(x); }
__ALWAYS_INLINE auto floor(double16 x) __NOEXCEPT { return __spirv::__make_floor_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto floor(float x) __NOEXCEPT { return __spirv::__make_floor_call<float>(x); }
__ALWAYS_INLINE auto floor(float2 x) __NOEXCEPT { return __spirv::__make_floor_call<float2>(x); }
__ALWAYS_INLINE auto floor(float3 x) __NOEXCEPT { return __spirv::__make_floor_call<float3>(x); }
__ALWAYS_INLINE auto floor(float4 x) __NOEXCEPT { return __spirv::__make_floor_call<float4>(x); }
__ALWAYS_INLINE auto floor(float8 x) __NOEXCEPT { return __spirv::__make_floor_call<float8>(x); }
__ALWAYS_INLINE auto floor(float16 x) __NOEXCEPT { return __spirv::__make_floor_call<float16>(x); }


/// \brief natural logarithm
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto log(half x) __NOEXCEPT { return __spirv::__make_log_call<half>(x); }
__ALWAYS_INLINE auto log(half2 x) __NOEXCEPT { return __spirv::__make_log_call<half2>(x); }
__ALWAYS_INLINE auto log(half3 x) __NOEXCEPT { return __spirv::__make_log_call<half3>(x); }
__ALWAYS_INLINE auto log(half4 x) __NOEXCEPT { return __spirv::__make_log_call<half4>(x); }
__ALWAYS_INLINE auto log(half8 x) __NOEXCEPT { return __spirv::__make_log_call<half8>(x); }
__ALWAYS_INLINE auto log(half16 x) __NOEXCEPT { return __spirv::__make_log_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto log(double x) __NOEXCEPT { return __spirv::__make_log_call<double>(x); }
__ALWAYS_INLINE auto log(double2 x) __NOEXCEPT { return __spirv::__make_log_call<double2>(x); }
__ALWAYS_INLINE auto log(double3 x) __NOEXCEPT { return __spirv::__make_log_call<double3>(x); }
__ALWAYS_INLINE auto log(double4 x) __NOEXCEPT { return __spirv::__make_log_call<double4>(x); }
__ALWAYS_INLINE auto log(double8 x) __NOEXCEPT { return __spirv::__make_log_call<double8>(x); }
__ALWAYS_INLINE auto log(double16 x) __NOEXCEPT { return __spirv::__make_log_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto log(float x) __NOEXCEPT { return __spirv::__make_log_call<float>(x); }
__ALWAYS_INLINE auto log(float2 x) __NOEXCEPT { return __spirv::__make_log_call<float2>(x); }
__ALWAYS_INLINE auto log(float3 x) __NOEXCEPT { return __spirv::__make_log_call<float3>(x); }
__ALWAYS_INLINE auto log(float4 x) __NOEXCEPT { return __spirv::__make_log_call<float4>(x); }
__ALWAYS_INLINE auto log(float8 x) __NOEXCEPT { return __spirv::__make_log_call<float8>(x); }
__ALWAYS_INLINE auto log(float16 x) __NOEXCEPT { return __spirv::__make_log_call<float16>(x); }


/// \brief base 2 logarithm
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto log2(half x) __NOEXCEPT { return __spirv::__make_log2_call<half>(x); }
__ALWAYS_INLINE auto log2(half2 x) __NOEXCEPT { return __spirv::__make_log2_call<half2>(x); }
__ALWAYS_INLINE auto log2(half3 x) __NOEXCEPT { return __spirv::__make_log2_call<half3>(x); }
__ALWAYS_INLINE auto log2(half4 x) __NOEXCEPT { return __spirv::__make_log2_call<half4>(x); }
__ALWAYS_INLINE auto log2(half8 x) __NOEXCEPT { return __spirv::__make_log2_call<half8>(x); }
__ALWAYS_INLINE auto log2(half16 x) __NOEXCEPT { return __spirv::__make_log2_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto log2(double x) __NOEXCEPT { return __spirv::__make_log2_call<double>(x); }
__ALWAYS_INLINE auto log2(double2 x) __NOEXCEPT { return __spirv::__make_log2_call<double2>(x); }
__ALWAYS_INLINE auto log2(double3 x) __NOEXCEPT { return __spirv::__make_log2_call<double3>(x); }
__ALWAYS_INLINE auto log2(double4 x) __NOEXCEPT { return __spirv::__make_log2_call<double4>(x); }
__ALWAYS_INLINE auto log2(double8 x) __NOEXCEPT { return __spirv::__make_log2_call<double8>(x); }
__ALWAYS_INLINE auto log2(double16 x) __NOEXCEPT { return __spirv::__make_log2_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto log2(float x) __NOEXCEPT { return __spirv::__make_log2_call<float>(x); }
__ALWAYS_INLINE auto log2(float2 x) __NOEXCEPT { return __spirv::__make_log2_call<float2>(x); }
__ALWAYS_INLINE auto log2(float3 x) __NOEXCEPT { return __spirv::__make_log2_call<float3>(x); }
__ALWAYS_INLINE auto log2(float4 x) __NOEXCEPT { return __spirv::__make_log2_call<float4>(x); }
__ALWAYS_INLINE auto log2(float8 x) __NOEXCEPT { return __spirv::__make_log2_call<float8>(x); }
__ALWAYS_INLINE auto log2(float16 x) __NOEXCEPT { return __spirv::__make_log2_call<float16>(x); }


/// \brief base 10 logarithm
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto log10(half x) __NOEXCEPT { return __spirv::__make_log10_call<half>(x); }
__ALWAYS_INLINE auto log10(half2 x) __NOEXCEPT { return __spirv::__make_log10_call<half2>(x); }
__ALWAYS_INLINE auto log10(half3 x) __NOEXCEPT { return __spirv::__make_log10_call<half3>(x); }
__ALWAYS_INLINE auto log10(half4 x) __NOEXCEPT { return __spirv::__make_log10_call<half4>(x); }
__ALWAYS_INLINE auto log10(half8 x) __NOEXCEPT { return __spirv::__make_log10_call<half8>(x); }
__ALWAYS_INLINE auto log10(half16 x) __NOEXCEPT { return __spirv::__make_log10_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto log10(double x) __NOEXCEPT { return __spirv::__make_log10_call<double>(x); }
__ALWAYS_INLINE auto log10(double2 x) __NOEXCEPT { return __spirv::__make_log10_call<double2>(x); }
__ALWAYS_INLINE auto log10(double3 x) __NOEXCEPT { return __spirv::__make_log10_call<double3>(x); }
__ALWAYS_INLINE auto log10(double4 x) __NOEXCEPT { return __spirv::__make_log10_call<double4>(x); }
__ALWAYS_INLINE auto log10(double8 x) __NOEXCEPT { return __spirv::__make_log10_call<double8>(x); }
__ALWAYS_INLINE auto log10(double16 x) __NOEXCEPT { return __spirv::__make_log10_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto log10(float x) __NOEXCEPT { return __spirv::__make_log10_call<float>(x); }
__ALWAYS_INLINE auto log10(float2 x) __NOEXCEPT { return __spirv::__make_log10_call<float2>(x); }
__ALWAYS_INLINE auto log10(float3 x) __NOEXCEPT { return __spirv::__make_log10_call<float3>(x); }
__ALWAYS_INLINE auto log10(float4 x) __NOEXCEPT { return __spirv::__make_log10_call<float4>(x); }
__ALWAYS_INLINE auto log10(float8 x) __NOEXCEPT { return __spirv::__make_log10_call<float8>(x); }
__ALWAYS_INLINE auto log10(float16 x) __NOEXCEPT { return __spirv::__make_log10_call<float16>(x); }


/// \brief natural logarithm of x+1
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto log1p(half x) __NOEXCEPT { return __spirv::__make_log1p_call<half>(x); }
__ALWAYS_INLINE auto log1p(half2 x) __NOEXCEPT { return __spirv::__make_log1p_call<half2>(x); }
__ALWAYS_INLINE auto log1p(half3 x) __NOEXCEPT { return __spirv::__make_log1p_call<half3>(x); }
__ALWAYS_INLINE auto log1p(half4 x) __NOEXCEPT { return __spirv::__make_log1p_call<half4>(x); }
__ALWAYS_INLINE auto log1p(half8 x) __NOEXCEPT { return __spirv::__make_log1p_call<half8>(x); }
__ALWAYS_INLINE auto log1p(half16 x) __NOEXCEPT { return __spirv::__make_log1p_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto log1p(double x) __NOEXCEPT { return __spirv::__make_log1p_call<double>(x); }
__ALWAYS_INLINE auto log1p(double2 x) __NOEXCEPT { return __spirv::__make_log1p_call<double2>(x); }
__ALWAYS_INLINE auto log1p(double3 x) __NOEXCEPT { return __spirv::__make_log1p_call<double3>(x); }
__ALWAYS_INLINE auto log1p(double4 x) __NOEXCEPT { return __spirv::__make_log1p_call<double4>(x); }
__ALWAYS_INLINE auto log1p(double8 x) __NOEXCEPT { return __spirv::__make_log1p_call<double8>(x); }
__ALWAYS_INLINE auto log1p(double16 x) __NOEXCEPT { return __spirv::__make_log1p_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto log1p(float x) __NOEXCEPT { return __spirv::__make_log1p_call<float>(x); }
__ALWAYS_INLINE auto log1p(float2 x) __NOEXCEPT { return __spirv::__make_log1p_call<float2>(x); }
__ALWAYS_INLINE auto log1p(float3 x) __NOEXCEPT { return __spirv::__make_log1p_call<float3>(x); }
__ALWAYS_INLINE auto log1p(float4 x) __NOEXCEPT { return __spirv::__make_log1p_call<float4>(x); }
__ALWAYS_INLINE auto log1p(float8 x) __NOEXCEPT { return __spirv::__make_log1p_call<float8>(x); }
__ALWAYS_INLINE auto log1p(float16 x) __NOEXCEPT { return __spirv::__make_log1p_call<float16>(x); }


/// \brief natural logarithm
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto logb(half x) __NOEXCEPT { return __spirv::__make_logb_call<half>(x); }
__ALWAYS_INLINE auto logb(half2 x) __NOEXCEPT { return __spirv::__make_logb_call<half2>(x); }
__ALWAYS_INLINE auto logb(half3 x) __NOEXCEPT { return __spirv::__make_logb_call<half3>(x); }
__ALWAYS_INLINE auto logb(half4 x) __NOEXCEPT { return __spirv::__make_logb_call<half4>(x); }
__ALWAYS_INLINE auto logb(half8 x) __NOEXCEPT { return __spirv::__make_logb_call<half8>(x); }
__ALWAYS_INLINE auto logb(half16 x) __NOEXCEPT { return __spirv::__make_logb_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto logb(double x) __NOEXCEPT { return __spirv::__make_logb_call<double>(x); }
__ALWAYS_INLINE auto logb(double2 x) __NOEXCEPT { return __spirv::__make_logb_call<double2>(x); }
__ALWAYS_INLINE auto logb(double3 x) __NOEXCEPT { return __spirv::__make_logb_call<double3>(x); }
__ALWAYS_INLINE auto logb(double4 x) __NOEXCEPT { return __spirv::__make_logb_call<double4>(x); }
__ALWAYS_INLINE auto logb(double8 x) __NOEXCEPT { return __spirv::__make_logb_call<double8>(x); }
__ALWAYS_INLINE auto logb(double16 x) __NOEXCEPT { return __spirv::__make_logb_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto logb(float x) __NOEXCEPT { return __spirv::__make_logb_call<float>(x); }
__ALWAYS_INLINE auto logb(float2 x) __NOEXCEPT { return __spirv::__make_logb_call<float2>(x); }
__ALWAYS_INLINE auto logb(float3 x) __NOEXCEPT { return __spirv::__make_logb_call<float3>(x); }
__ALWAYS_INLINE auto logb(float4 x) __NOEXCEPT { return __spirv::__make_logb_call<float4>(x); }
__ALWAYS_INLINE auto logb(float8 x) __NOEXCEPT { return __spirv::__make_logb_call<float8>(x); }
__ALWAYS_INLINE auto logb(float16 x) __NOEXCEPT { return __spirv::__make_logb_call<float16>(x); }


/// \brief returns natural logarithm of absolute value of the gamma function
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto lgamma(half x) __NOEXCEPT { return __spirv::__make_lgamma_call<half>(x); }
__ALWAYS_INLINE auto lgamma(half2 x) __NOEXCEPT { return __spirv::__make_lgamma_call<half2>(x); }
__ALWAYS_INLINE auto lgamma(half3 x) __NOEXCEPT { return __spirv::__make_lgamma_call<half3>(x); }
__ALWAYS_INLINE auto lgamma(half4 x) __NOEXCEPT { return __spirv::__make_lgamma_call<half4>(x); }
__ALWAYS_INLINE auto lgamma(half8 x) __NOEXCEPT { return __spirv::__make_lgamma_call<half8>(x); }
__ALWAYS_INLINE auto lgamma(half16 x) __NOEXCEPT { return __spirv::__make_lgamma_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto lgamma(double x) __NOEXCEPT { return __spirv::__make_lgamma_call<double>(x); }
__ALWAYS_INLINE auto lgamma(double2 x) __NOEXCEPT { return __spirv::__make_lgamma_call<double2>(x); }
__ALWAYS_INLINE auto lgamma(double3 x) __NOEXCEPT { return __spirv::__make_lgamma_call<double3>(x); }
__ALWAYS_INLINE auto lgamma(double4 x) __NOEXCEPT { return __spirv::__make_lgamma_call<double4>(x); }
__ALWAYS_INLINE auto lgamma(double8 x) __NOEXCEPT { return __spirv::__make_lgamma_call<double8>(x); }
__ALWAYS_INLINE auto lgamma(double16 x) __NOEXCEPT { return __spirv::__make_lgamma_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto lgamma(float x) __NOEXCEPT { return __spirv::__make_lgamma_call<float>(x); }
__ALWAYS_INLINE auto lgamma(float2 x) __NOEXCEPT { return __spirv::__make_lgamma_call<float2>(x); }
__ALWAYS_INLINE auto lgamma(float3 x) __NOEXCEPT { return __spirv::__make_lgamma_call<float3>(x); }
__ALWAYS_INLINE auto lgamma(float4 x) __NOEXCEPT { return __spirv::__make_lgamma_call<float4>(x); }
__ALWAYS_INLINE auto lgamma(float8 x) __NOEXCEPT { return __spirv::__make_lgamma_call<float8>(x); }
__ALWAYS_INLINE auto lgamma(float16 x) __NOEXCEPT { return __spirv::__make_lgamma_call<float16>(x); }


/// \brief round using round to nearest even mode
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto rint(half x) __NOEXCEPT { return __spirv::__make_rint_call<half>(x); }
__ALWAYS_INLINE auto rint(half2 x) __NOEXCEPT { return __spirv::__make_rint_call<half2>(x); }
__ALWAYS_INLINE auto rint(half3 x) __NOEXCEPT { return __spirv::__make_rint_call<half3>(x); }
__ALWAYS_INLINE auto rint(half4 x) __NOEXCEPT { return __spirv::__make_rint_call<half4>(x); }
__ALWAYS_INLINE auto rint(half8 x) __NOEXCEPT { return __spirv::__make_rint_call<half8>(x); }
__ALWAYS_INLINE auto rint(half16 x) __NOEXCEPT { return __spirv::__make_rint_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto rint(double x) __NOEXCEPT { return __spirv::__make_rint_call<double>(x); }
__ALWAYS_INLINE auto rint(double2 x) __NOEXCEPT { return __spirv::__make_rint_call<double2>(x); }
__ALWAYS_INLINE auto rint(double3 x) __NOEXCEPT { return __spirv::__make_rint_call<double3>(x); }
__ALWAYS_INLINE auto rint(double4 x) __NOEXCEPT { return __spirv::__make_rint_call<double4>(x); }
__ALWAYS_INLINE auto rint(double8 x) __NOEXCEPT { return __spirv::__make_rint_call<double8>(x); }
__ALWAYS_INLINE auto rint(double16 x) __NOEXCEPT { return __spirv::__make_rint_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto rint(float x) __NOEXCEPT { return __spirv::__make_rint_call<float>(x); }
__ALWAYS_INLINE auto rint(float2 x) __NOEXCEPT { return __spirv::__make_rint_call<float2>(x); }
__ALWAYS_INLINE auto rint(float3 x) __NOEXCEPT { return __spirv::__make_rint_call<float3>(x); }
__ALWAYS_INLINE auto rint(float4 x) __NOEXCEPT { return __spirv::__make_rint_call<float4>(x); }
__ALWAYS_INLINE auto rint(float8 x) __NOEXCEPT { return __spirv::__make_rint_call<float8>(x); }
__ALWAYS_INLINE auto rint(float16 x) __NOEXCEPT { return __spirv::__make_rint_call<float16>(x); }


#ifdef cl_khr_fp16
/// \brief round to integer nearest to x, rounding halfway cases away from zero (regardless of the current rounding mode)
#endif //cl_khr_fp16
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto round(half x) __NOEXCEPT { return __spirv::__make_round_call<half>(x); }
__ALWAYS_INLINE auto round(half2 x) __NOEXCEPT { return __spirv::__make_round_call<half2>(x); }
__ALWAYS_INLINE auto round(half3 x) __NOEXCEPT { return __spirv::__make_round_call<half3>(x); }
__ALWAYS_INLINE auto round(half4 x) __NOEXCEPT { return __spirv::__make_round_call<half4>(x); }
__ALWAYS_INLINE auto round(half8 x) __NOEXCEPT { return __spirv::__make_round_call<half8>(x); }
__ALWAYS_INLINE auto round(half16 x) __NOEXCEPT { return __spirv::__make_round_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto round(double x) __NOEXCEPT { return __spirv::__make_round_call<double>(x); }
__ALWAYS_INLINE auto round(double2 x) __NOEXCEPT { return __spirv::__make_round_call<double2>(x); }
__ALWAYS_INLINE auto round(double3 x) __NOEXCEPT { return __spirv::__make_round_call<double3>(x); }
__ALWAYS_INLINE auto round(double4 x) __NOEXCEPT { return __spirv::__make_round_call<double4>(x); }
__ALWAYS_INLINE auto round(double8 x) __NOEXCEPT { return __spirv::__make_round_call<double8>(x); }
__ALWAYS_INLINE auto round(double16 x) __NOEXCEPT { return __spirv::__make_round_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto round(float x) __NOEXCEPT { return __spirv::__make_round_call<float>(x); }
__ALWAYS_INLINE auto round(float2 x) __NOEXCEPT { return __spirv::__make_round_call<float2>(x); }
__ALWAYS_INLINE auto round(float3 x) __NOEXCEPT { return __spirv::__make_round_call<float3>(x); }
__ALWAYS_INLINE auto round(float4 x) __NOEXCEPT { return __spirv::__make_round_call<float4>(x); }
__ALWAYS_INLINE auto round(float8 x) __NOEXCEPT { return __spirv::__make_round_call<float8>(x); }
__ALWAYS_INLINE auto round(float16 x) __NOEXCEPT { return __spirv::__make_round_call<float16>(x); }


/// \brief inverse square root
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto rsqrt(half x) __NOEXCEPT { return __spirv::__make_rsqrt_call<half>(x); }
__ALWAYS_INLINE auto rsqrt(half2 x) __NOEXCEPT { return __spirv::__make_rsqrt_call<half2>(x); }
__ALWAYS_INLINE auto rsqrt(half3 x) __NOEXCEPT { return __spirv::__make_rsqrt_call<half3>(x); }
__ALWAYS_INLINE auto rsqrt(half4 x) __NOEXCEPT { return __spirv::__make_rsqrt_call<half4>(x); }
__ALWAYS_INLINE auto rsqrt(half8 x) __NOEXCEPT { return __spirv::__make_rsqrt_call<half8>(x); }
__ALWAYS_INLINE auto rsqrt(half16 x) __NOEXCEPT { return __spirv::__make_rsqrt_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto rsqrt(double x) __NOEXCEPT { return __spirv::__make_rsqrt_call<double>(x); }
__ALWAYS_INLINE auto rsqrt(double2 x) __NOEXCEPT { return __spirv::__make_rsqrt_call<double2>(x); }
__ALWAYS_INLINE auto rsqrt(double3 x) __NOEXCEPT { return __spirv::__make_rsqrt_call<double3>(x); }
__ALWAYS_INLINE auto rsqrt(double4 x) __NOEXCEPT { return __spirv::__make_rsqrt_call<double4>(x); }
__ALWAYS_INLINE auto rsqrt(double8 x) __NOEXCEPT { return __spirv::__make_rsqrt_call<double8>(x); }
__ALWAYS_INLINE auto rsqrt(double16 x) __NOEXCEPT { return __spirv::__make_rsqrt_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto rsqrt(float x) __NOEXCEPT { return __spirv::__make_rsqrt_call<float>(x); }
__ALWAYS_INLINE auto rsqrt(float2 x) __NOEXCEPT { return __spirv::__make_rsqrt_call<float2>(x); }
__ALWAYS_INLINE auto rsqrt(float3 x) __NOEXCEPT { return __spirv::__make_rsqrt_call<float3>(x); }
__ALWAYS_INLINE auto rsqrt(float4 x) __NOEXCEPT { return __spirv::__make_rsqrt_call<float4>(x); }
__ALWAYS_INLINE auto rsqrt(float8 x) __NOEXCEPT { return __spirv::__make_rsqrt_call<float8>(x); }
__ALWAYS_INLINE auto rsqrt(float16 x) __NOEXCEPT { return __spirv::__make_rsqrt_call<float16>(x); }


/// \brief returns sine
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto sin(half x) __NOEXCEPT { return __spirv::__make_sin_call<half>(x); }
__ALWAYS_INLINE auto sin(half2 x) __NOEXCEPT { return __spirv::__make_sin_call<half2>(x); }
__ALWAYS_INLINE auto sin(half3 x) __NOEXCEPT { return __spirv::__make_sin_call<half3>(x); }
__ALWAYS_INLINE auto sin(half4 x) __NOEXCEPT { return __spirv::__make_sin_call<half4>(x); }
__ALWAYS_INLINE auto sin(half8 x) __NOEXCEPT { return __spirv::__make_sin_call<half8>(x); }
__ALWAYS_INLINE auto sin(half16 x) __NOEXCEPT { return __spirv::__make_sin_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto sin(double x) __NOEXCEPT { return __spirv::__make_sin_call<double>(x); }
__ALWAYS_INLINE auto sin(double2 x) __NOEXCEPT { return __spirv::__make_sin_call<double2>(x); }
__ALWAYS_INLINE auto sin(double3 x) __NOEXCEPT { return __spirv::__make_sin_call<double3>(x); }
__ALWAYS_INLINE auto sin(double4 x) __NOEXCEPT { return __spirv::__make_sin_call<double4>(x); }
__ALWAYS_INLINE auto sin(double8 x) __NOEXCEPT { return __spirv::__make_sin_call<double8>(x); }
__ALWAYS_INLINE auto sin(double16 x) __NOEXCEPT { return __spirv::__make_sin_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto sin(float x) __NOEXCEPT { return __spirv::__make_sin_call<float>(x); }
__ALWAYS_INLINE auto sin(float2 x) __NOEXCEPT { return __spirv::__make_sin_call<float2>(x); }
__ALWAYS_INLINE auto sin(float3 x) __NOEXCEPT { return __spirv::__make_sin_call<float3>(x); }
__ALWAYS_INLINE auto sin(float4 x) __NOEXCEPT { return __spirv::__make_sin_call<float4>(x); }
__ALWAYS_INLINE auto sin(float8 x) __NOEXCEPT { return __spirv::__make_sin_call<float8>(x); }
__ALWAYS_INLINE auto sin(float16 x) __NOEXCEPT { return __spirv::__make_sin_call<float16>(x); }


/// \brief hyperbolic sine
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto sinh(half x) __NOEXCEPT { return __spirv::__make_sinh_call<half>(x); }
__ALWAYS_INLINE auto sinh(half2 x) __NOEXCEPT { return __spirv::__make_sinh_call<half2>(x); }
__ALWAYS_INLINE auto sinh(half3 x) __NOEXCEPT { return __spirv::__make_sinh_call<half3>(x); }
__ALWAYS_INLINE auto sinh(half4 x) __NOEXCEPT { return __spirv::__make_sinh_call<half4>(x); }
__ALWAYS_INLINE auto sinh(half8 x) __NOEXCEPT { return __spirv::__make_sinh_call<half8>(x); }
__ALWAYS_INLINE auto sinh(half16 x) __NOEXCEPT { return __spirv::__make_sinh_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto sinh(double x) __NOEXCEPT { return __spirv::__make_sinh_call<double>(x); }
__ALWAYS_INLINE auto sinh(double2 x) __NOEXCEPT { return __spirv::__make_sinh_call<double2>(x); }
__ALWAYS_INLINE auto sinh(double3 x) __NOEXCEPT { return __spirv::__make_sinh_call<double3>(x); }
__ALWAYS_INLINE auto sinh(double4 x) __NOEXCEPT { return __spirv::__make_sinh_call<double4>(x); }
__ALWAYS_INLINE auto sinh(double8 x) __NOEXCEPT { return __spirv::__make_sinh_call<double8>(x); }
__ALWAYS_INLINE auto sinh(double16 x) __NOEXCEPT { return __spirv::__make_sinh_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto sinh(float x) __NOEXCEPT { return __spirv::__make_sinh_call<float>(x); }
__ALWAYS_INLINE auto sinh(float2 x) __NOEXCEPT { return __spirv::__make_sinh_call<float2>(x); }
__ALWAYS_INLINE auto sinh(float3 x) __NOEXCEPT { return __spirv::__make_sinh_call<float3>(x); }
__ALWAYS_INLINE auto sinh(float4 x) __NOEXCEPT { return __spirv::__make_sinh_call<float4>(x); }
__ALWAYS_INLINE auto sinh(float8 x) __NOEXCEPT { return __spirv::__make_sinh_call<float8>(x); }
__ALWAYS_INLINE auto sinh(float16 x) __NOEXCEPT { return __spirv::__make_sinh_call<float16>(x); }


/// \brief sin(pi*x)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto sinpi(half x) __NOEXCEPT { return __spirv::__make_sinpi_call<half>(x); }
__ALWAYS_INLINE auto sinpi(half2 x) __NOEXCEPT { return __spirv::__make_sinpi_call<half2>(x); }
__ALWAYS_INLINE auto sinpi(half3 x) __NOEXCEPT { return __spirv::__make_sinpi_call<half3>(x); }
__ALWAYS_INLINE auto sinpi(half4 x) __NOEXCEPT { return __spirv::__make_sinpi_call<half4>(x); }
__ALWAYS_INLINE auto sinpi(half8 x) __NOEXCEPT { return __spirv::__make_sinpi_call<half8>(x); }
__ALWAYS_INLINE auto sinpi(half16 x) __NOEXCEPT { return __spirv::__make_sinpi_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto sinpi(double x) __NOEXCEPT { return __spirv::__make_sinpi_call<double>(x); }
__ALWAYS_INLINE auto sinpi(double2 x) __NOEXCEPT { return __spirv::__make_sinpi_call<double2>(x); }
__ALWAYS_INLINE auto sinpi(double3 x) __NOEXCEPT { return __spirv::__make_sinpi_call<double3>(x); }
__ALWAYS_INLINE auto sinpi(double4 x) __NOEXCEPT { return __spirv::__make_sinpi_call<double4>(x); }
__ALWAYS_INLINE auto sinpi(double8 x) __NOEXCEPT { return __spirv::__make_sinpi_call<double8>(x); }
__ALWAYS_INLINE auto sinpi(double16 x) __NOEXCEPT { return __spirv::__make_sinpi_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto sinpi(float x) __NOEXCEPT { return __spirv::__make_sinpi_call<float>(x); }
__ALWAYS_INLINE auto sinpi(float2 x) __NOEXCEPT { return __spirv::__make_sinpi_call<float2>(x); }
__ALWAYS_INLINE auto sinpi(float3 x) __NOEXCEPT { return __spirv::__make_sinpi_call<float3>(x); }
__ALWAYS_INLINE auto sinpi(float4 x) __NOEXCEPT { return __spirv::__make_sinpi_call<float4>(x); }
__ALWAYS_INLINE auto sinpi(float8 x) __NOEXCEPT { return __spirv::__make_sinpi_call<float8>(x); }
__ALWAYS_INLINE auto sinpi(float16 x) __NOEXCEPT { return __spirv::__make_sinpi_call<float16>(x); }


/// \brief square root
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto sqrt(half x) __NOEXCEPT { return __spirv::__make_sqrt_call<half>(x); }
__ALWAYS_INLINE auto sqrt(half2 x) __NOEXCEPT { return __spirv::__make_sqrt_call<half2>(x); }
__ALWAYS_INLINE auto sqrt(half3 x) __NOEXCEPT { return __spirv::__make_sqrt_call<half3>(x); }
__ALWAYS_INLINE auto sqrt(half4 x) __NOEXCEPT { return __spirv::__make_sqrt_call<half4>(x); }
__ALWAYS_INLINE auto sqrt(half8 x) __NOEXCEPT { return __spirv::__make_sqrt_call<half8>(x); }
__ALWAYS_INLINE auto sqrt(half16 x) __NOEXCEPT { return __spirv::__make_sqrt_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto sqrt(double x) __NOEXCEPT { return __spirv::__make_sqrt_call<double>(x); }
__ALWAYS_INLINE auto sqrt(double2 x) __NOEXCEPT { return __spirv::__make_sqrt_call<double2>(x); }
__ALWAYS_INLINE auto sqrt(double3 x) __NOEXCEPT { return __spirv::__make_sqrt_call<double3>(x); }
__ALWAYS_INLINE auto sqrt(double4 x) __NOEXCEPT { return __spirv::__make_sqrt_call<double4>(x); }
__ALWAYS_INLINE auto sqrt(double8 x) __NOEXCEPT { return __spirv::__make_sqrt_call<double8>(x); }
__ALWAYS_INLINE auto sqrt(double16 x) __NOEXCEPT { return __spirv::__make_sqrt_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto sqrt(float x) __NOEXCEPT { return __spirv::__make_sqrt_call<float>(x); }
__ALWAYS_INLINE auto sqrt(float2 x) __NOEXCEPT { return __spirv::__make_sqrt_call<float2>(x); }
__ALWAYS_INLINE auto sqrt(float3 x) __NOEXCEPT { return __spirv::__make_sqrt_call<float3>(x); }
__ALWAYS_INLINE auto sqrt(float4 x) __NOEXCEPT { return __spirv::__make_sqrt_call<float4>(x); }
__ALWAYS_INLINE auto sqrt(float8 x) __NOEXCEPT { return __spirv::__make_sqrt_call<float8>(x); }
__ALWAYS_INLINE auto sqrt(float16 x) __NOEXCEPT { return __spirv::__make_sqrt_call<float16>(x); }


/// \brief tangent
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto tan(half x) __NOEXCEPT { return __spirv::__make_tan_call<half>(x); }
__ALWAYS_INLINE auto tan(half2 x) __NOEXCEPT { return __spirv::__make_tan_call<half2>(x); }
__ALWAYS_INLINE auto tan(half3 x) __NOEXCEPT { return __spirv::__make_tan_call<half3>(x); }
__ALWAYS_INLINE auto tan(half4 x) __NOEXCEPT { return __spirv::__make_tan_call<half4>(x); }
__ALWAYS_INLINE auto tan(half8 x) __NOEXCEPT { return __spirv::__make_tan_call<half8>(x); }
__ALWAYS_INLINE auto tan(half16 x) __NOEXCEPT { return __spirv::__make_tan_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto tan(double x) __NOEXCEPT { return __spirv::__make_tan_call<double>(x); }
__ALWAYS_INLINE auto tan(double2 x) __NOEXCEPT { return __spirv::__make_tan_call<double2>(x); }
__ALWAYS_INLINE auto tan(double3 x) __NOEXCEPT { return __spirv::__make_tan_call<double3>(x); }
__ALWAYS_INLINE auto tan(double4 x) __NOEXCEPT { return __spirv::__make_tan_call<double4>(x); }
__ALWAYS_INLINE auto tan(double8 x) __NOEXCEPT { return __spirv::__make_tan_call<double8>(x); }
__ALWAYS_INLINE auto tan(double16 x) __NOEXCEPT { return __spirv::__make_tan_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto tan(float x) __NOEXCEPT { return __spirv::__make_tan_call<float>(x); }
__ALWAYS_INLINE auto tan(float2 x) __NOEXCEPT { return __spirv::__make_tan_call<float2>(x); }
__ALWAYS_INLINE auto tan(float3 x) __NOEXCEPT { return __spirv::__make_tan_call<float3>(x); }
__ALWAYS_INLINE auto tan(float4 x) __NOEXCEPT { return __spirv::__make_tan_call<float4>(x); }
__ALWAYS_INLINE auto tan(float8 x) __NOEXCEPT { return __spirv::__make_tan_call<float8>(x); }
__ALWAYS_INLINE auto tan(float16 x) __NOEXCEPT { return __spirv::__make_tan_call<float16>(x); }


/// \brief hyperbolic tangent
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto tanh(half x) __NOEXCEPT { return __spirv::__make_tanh_call<half>(x); }
__ALWAYS_INLINE auto tanh(half2 x) __NOEXCEPT { return __spirv::__make_tanh_call<half2>(x); }
__ALWAYS_INLINE auto tanh(half3 x) __NOEXCEPT { return __spirv::__make_tanh_call<half3>(x); }
__ALWAYS_INLINE auto tanh(half4 x) __NOEXCEPT { return __spirv::__make_tanh_call<half4>(x); }
__ALWAYS_INLINE auto tanh(half8 x) __NOEXCEPT { return __spirv::__make_tanh_call<half8>(x); }
__ALWAYS_INLINE auto tanh(half16 x) __NOEXCEPT { return __spirv::__make_tanh_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto tanh(double x) __NOEXCEPT { return __spirv::__make_tanh_call<double>(x); }
__ALWAYS_INLINE auto tanh(double2 x) __NOEXCEPT { return __spirv::__make_tanh_call<double2>(x); }
__ALWAYS_INLINE auto tanh(double3 x) __NOEXCEPT { return __spirv::__make_tanh_call<double3>(x); }
__ALWAYS_INLINE auto tanh(double4 x) __NOEXCEPT { return __spirv::__make_tanh_call<double4>(x); }
__ALWAYS_INLINE auto tanh(double8 x) __NOEXCEPT { return __spirv::__make_tanh_call<double8>(x); }
__ALWAYS_INLINE auto tanh(double16 x) __NOEXCEPT { return __spirv::__make_tanh_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto tanh(float x) __NOEXCEPT { return __spirv::__make_tanh_call<float>(x); }
__ALWAYS_INLINE auto tanh(float2 x) __NOEXCEPT { return __spirv::__make_tanh_call<float2>(x); }
__ALWAYS_INLINE auto tanh(float3 x) __NOEXCEPT { return __spirv::__make_tanh_call<float3>(x); }
__ALWAYS_INLINE auto tanh(float4 x) __NOEXCEPT { return __spirv::__make_tanh_call<float4>(x); }
__ALWAYS_INLINE auto tanh(float8 x) __NOEXCEPT { return __spirv::__make_tanh_call<float8>(x); }
__ALWAYS_INLINE auto tanh(float16 x) __NOEXCEPT { return __spirv::__make_tanh_call<float16>(x); }


/// \brief tan(pi*x)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto tanpi(half x) __NOEXCEPT { return __spirv::__make_tanpi_call<half>(x); }
__ALWAYS_INLINE auto tanpi(half2 x) __NOEXCEPT { return __spirv::__make_tanpi_call<half2>(x); }
__ALWAYS_INLINE auto tanpi(half3 x) __NOEXCEPT { return __spirv::__make_tanpi_call<half3>(x); }
__ALWAYS_INLINE auto tanpi(half4 x) __NOEXCEPT { return __spirv::__make_tanpi_call<half4>(x); }
__ALWAYS_INLINE auto tanpi(half8 x) __NOEXCEPT { return __spirv::__make_tanpi_call<half8>(x); }
__ALWAYS_INLINE auto tanpi(half16 x) __NOEXCEPT { return __spirv::__make_tanpi_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto tanpi(double x) __NOEXCEPT { return __spirv::__make_tanpi_call<double>(x); }
__ALWAYS_INLINE auto tanpi(double2 x) __NOEXCEPT { return __spirv::__make_tanpi_call<double2>(x); }
__ALWAYS_INLINE auto tanpi(double3 x) __NOEXCEPT { return __spirv::__make_tanpi_call<double3>(x); }
__ALWAYS_INLINE auto tanpi(double4 x) __NOEXCEPT { return __spirv::__make_tanpi_call<double4>(x); }
__ALWAYS_INLINE auto tanpi(double8 x) __NOEXCEPT { return __spirv::__make_tanpi_call<double8>(x); }
__ALWAYS_INLINE auto tanpi(double16 x) __NOEXCEPT { return __spirv::__make_tanpi_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto tanpi(float x) __NOEXCEPT { return __spirv::__make_tanpi_call<float>(x); }
__ALWAYS_INLINE auto tanpi(float2 x) __NOEXCEPT { return __spirv::__make_tanpi_call<float2>(x); }
__ALWAYS_INLINE auto tanpi(float3 x) __NOEXCEPT { return __spirv::__make_tanpi_call<float3>(x); }
__ALWAYS_INLINE auto tanpi(float4 x) __NOEXCEPT { return __spirv::__make_tanpi_call<float4>(x); }
__ALWAYS_INLINE auto tanpi(float8 x) __NOEXCEPT { return __spirv::__make_tanpi_call<float8>(x); }
__ALWAYS_INLINE auto tanpi(float16 x) __NOEXCEPT { return __spirv::__make_tanpi_call<float16>(x); }


/// \brief gamma function
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto tgamma(half x) __NOEXCEPT { return __spirv::__make_tgamma_call<half>(x); }
__ALWAYS_INLINE auto tgamma(half2 x) __NOEXCEPT { return __spirv::__make_tgamma_call<half2>(x); }
__ALWAYS_INLINE auto tgamma(half3 x) __NOEXCEPT { return __spirv::__make_tgamma_call<half3>(x); }
__ALWAYS_INLINE auto tgamma(half4 x) __NOEXCEPT { return __spirv::__make_tgamma_call<half4>(x); }
__ALWAYS_INLINE auto tgamma(half8 x) __NOEXCEPT { return __spirv::__make_tgamma_call<half8>(x); }
__ALWAYS_INLINE auto tgamma(half16 x) __NOEXCEPT { return __spirv::__make_tgamma_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto tgamma(double x) __NOEXCEPT { return __spirv::__make_tgamma_call<double>(x); }
__ALWAYS_INLINE auto tgamma(double2 x) __NOEXCEPT { return __spirv::__make_tgamma_call<double2>(x); }
__ALWAYS_INLINE auto tgamma(double3 x) __NOEXCEPT { return __spirv::__make_tgamma_call<double3>(x); }
__ALWAYS_INLINE auto tgamma(double4 x) __NOEXCEPT { return __spirv::__make_tgamma_call<double4>(x); }
__ALWAYS_INLINE auto tgamma(double8 x) __NOEXCEPT { return __spirv::__make_tgamma_call<double8>(x); }
__ALWAYS_INLINE auto tgamma(double16 x) __NOEXCEPT { return __spirv::__make_tgamma_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto tgamma(float x) __NOEXCEPT { return __spirv::__make_tgamma_call<float>(x); }
__ALWAYS_INLINE auto tgamma(float2 x) __NOEXCEPT { return __spirv::__make_tgamma_call<float2>(x); }
__ALWAYS_INLINE auto tgamma(float3 x) __NOEXCEPT { return __spirv::__make_tgamma_call<float3>(x); }
__ALWAYS_INLINE auto tgamma(float4 x) __NOEXCEPT { return __spirv::__make_tgamma_call<float4>(x); }
__ALWAYS_INLINE auto tgamma(float8 x) __NOEXCEPT { return __spirv::__make_tgamma_call<float8>(x); }
__ALWAYS_INLINE auto tgamma(float16 x) __NOEXCEPT { return __spirv::__make_tgamma_call<float16>(x); }


/// \brief round using round to zero mode
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto trunc(half x) __NOEXCEPT { return __spirv::__make_trunc_call<half>(x); }
__ALWAYS_INLINE auto trunc(half2 x) __NOEXCEPT { return __spirv::__make_trunc_call<half2>(x); }
__ALWAYS_INLINE auto trunc(half3 x) __NOEXCEPT { return __spirv::__make_trunc_call<half3>(x); }
__ALWAYS_INLINE auto trunc(half4 x) __NOEXCEPT { return __spirv::__make_trunc_call<half4>(x); }
__ALWAYS_INLINE auto trunc(half8 x) __NOEXCEPT { return __spirv::__make_trunc_call<half8>(x); }
__ALWAYS_INLINE auto trunc(half16 x) __NOEXCEPT { return __spirv::__make_trunc_call<half16>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto trunc(double x) __NOEXCEPT { return __spirv::__make_trunc_call<double>(x); }
__ALWAYS_INLINE auto trunc(double2 x) __NOEXCEPT { return __spirv::__make_trunc_call<double2>(x); }
__ALWAYS_INLINE auto trunc(double3 x) __NOEXCEPT { return __spirv::__make_trunc_call<double3>(x); }
__ALWAYS_INLINE auto trunc(double4 x) __NOEXCEPT { return __spirv::__make_trunc_call<double4>(x); }
__ALWAYS_INLINE auto trunc(double8 x) __NOEXCEPT { return __spirv::__make_trunc_call<double8>(x); }
__ALWAYS_INLINE auto trunc(double16 x) __NOEXCEPT { return __spirv::__make_trunc_call<double16>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto trunc(float x) __NOEXCEPT { return __spirv::__make_trunc_call<float>(x); }
__ALWAYS_INLINE auto trunc(float2 x) __NOEXCEPT { return __spirv::__make_trunc_call<float2>(x); }
__ALWAYS_INLINE auto trunc(float3 x) __NOEXCEPT { return __spirv::__make_trunc_call<float3>(x); }
__ALWAYS_INLINE auto trunc(float4 x) __NOEXCEPT { return __spirv::__make_trunc_call<float4>(x); }
__ALWAYS_INLINE auto trunc(float8 x) __NOEXCEPT { return __spirv::__make_trunc_call<float8>(x); }
__ALWAYS_INLINE auto trunc(float16 x) __NOEXCEPT { return __spirv::__make_trunc_call<float16>(x); }


/// \brief arc tangent of y/x (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto atan2(half y, half x) __NOEXCEPT { return __spirv::__make_atan2_call<half>(y, x); }
__ALWAYS_INLINE auto atan2(half2 y, half2 x) __NOEXCEPT { return __spirv::__make_atan2_call<half2>(y, x); }
__ALWAYS_INLINE auto atan2(half3 y, half3 x) __NOEXCEPT { return __spirv::__make_atan2_call<half3>(y, x); }
__ALWAYS_INLINE auto atan2(half4 y, half4 x) __NOEXCEPT { return __spirv::__make_atan2_call<half4>(y, x); }
__ALWAYS_INLINE auto atan2(half8 y, half8 x) __NOEXCEPT { return __spirv::__make_atan2_call<half8>(y, x); }
__ALWAYS_INLINE auto atan2(half16 y, half16 x) __NOEXCEPT { return __spirv::__make_atan2_call<half16>(y, x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto atan2(double y, double x) __NOEXCEPT { return __spirv::__make_atan2_call<double>(y, x); }
__ALWAYS_INLINE auto atan2(double2 y, double2 x) __NOEXCEPT { return __spirv::__make_atan2_call<double2>(y, x); }
__ALWAYS_INLINE auto atan2(double3 y, double3 x) __NOEXCEPT { return __spirv::__make_atan2_call<double3>(y, x); }
__ALWAYS_INLINE auto atan2(double4 y, double4 x) __NOEXCEPT { return __spirv::__make_atan2_call<double4>(y, x); }
__ALWAYS_INLINE auto atan2(double8 y, double8 x) __NOEXCEPT { return __spirv::__make_atan2_call<double8>(y, x); }
__ALWAYS_INLINE auto atan2(double16 y, double16 x) __NOEXCEPT { return __spirv::__make_atan2_call<double16>(y, x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto atan2(float y, float x) __NOEXCEPT { return __spirv::__make_atan2_call<float>(y, x); }
__ALWAYS_INLINE auto atan2(float2 y, float2 x) __NOEXCEPT { return __spirv::__make_atan2_call<float2>(y, x); }
__ALWAYS_INLINE auto atan2(float3 y, float3 x) __NOEXCEPT { return __spirv::__make_atan2_call<float3>(y, x); }
__ALWAYS_INLINE auto atan2(float4 y, float4 x) __NOEXCEPT { return __spirv::__make_atan2_call<float4>(y, x); }
__ALWAYS_INLINE auto atan2(float8 y, float8 x) __NOEXCEPT { return __spirv::__make_atan2_call<float8>(y, x); }
__ALWAYS_INLINE auto atan2(float16 y, float16 x) __NOEXCEPT { return __spirv::__make_atan2_call<float16>(y, x); }


/// \brief atan2(x,y)/PI (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto atan2pi(half y, half x) __NOEXCEPT { return __spirv::__make_atan2pi_call<half>(y, x); }
__ALWAYS_INLINE auto atan2pi(half2 y, half2 x) __NOEXCEPT { return __spirv::__make_atan2pi_call<half2>(y, x); }
__ALWAYS_INLINE auto atan2pi(half3 y, half3 x) __NOEXCEPT { return __spirv::__make_atan2pi_call<half3>(y, x); }
__ALWAYS_INLINE auto atan2pi(half4 y, half4 x) __NOEXCEPT { return __spirv::__make_atan2pi_call<half4>(y, x); }
__ALWAYS_INLINE auto atan2pi(half8 y, half8 x) __NOEXCEPT { return __spirv::__make_atan2pi_call<half8>(y, x); }
__ALWAYS_INLINE auto atan2pi(half16 y, half16 x) __NOEXCEPT { return __spirv::__make_atan2pi_call<half16>(y, x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto atan2pi(double y, double x) __NOEXCEPT { return __spirv::__make_atan2pi_call<double>(y, x); }
__ALWAYS_INLINE auto atan2pi(double2 y, double2 x) __NOEXCEPT { return __spirv::__make_atan2pi_call<double2>(y, x); }
__ALWAYS_INLINE auto atan2pi(double3 y, double3 x) __NOEXCEPT { return __spirv::__make_atan2pi_call<double3>(y, x); }
__ALWAYS_INLINE auto atan2pi(double4 y, double4 x) __NOEXCEPT { return __spirv::__make_atan2pi_call<double4>(y, x); }
__ALWAYS_INLINE auto atan2pi(double8 y, double8 x) __NOEXCEPT { return __spirv::__make_atan2pi_call<double8>(y, x); }
__ALWAYS_INLINE auto atan2pi(double16 y, double16 x) __NOEXCEPT { return __spirv::__make_atan2pi_call<double16>(y, x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto atan2pi(float y, float x) __NOEXCEPT { return __spirv::__make_atan2pi_call<float>(y, x); }
__ALWAYS_INLINE auto atan2pi(float2 y, float2 x) __NOEXCEPT { return __spirv::__make_atan2pi_call<float2>(y, x); }
__ALWAYS_INLINE auto atan2pi(float3 y, float3 x) __NOEXCEPT { return __spirv::__make_atan2pi_call<float3>(y, x); }
__ALWAYS_INLINE auto atan2pi(float4 y, float4 x) __NOEXCEPT { return __spirv::__make_atan2pi_call<float4>(y, x); }
__ALWAYS_INLINE auto atan2pi(float8 y, float8 x) __NOEXCEPT { return __spirv::__make_atan2pi_call<float8>(y, x); }
__ALWAYS_INLINE auto atan2pi(float16 y, float16 x) __NOEXCEPT { return __spirv::__make_atan2pi_call<float16>(y, x); }


/// \brief returns x with its sign changed to match y's sign (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto copysign(half x, half y) __NOEXCEPT { return __spirv::__make_copysign_call<half>(x, y); }
__ALWAYS_INLINE auto copysign(half2 x, half2 y) __NOEXCEPT { return __spirv::__make_copysign_call<half2>(x, y); }
__ALWAYS_INLINE auto copysign(half3 x, half3 y) __NOEXCEPT { return __spirv::__make_copysign_call<half3>(x, y); }
__ALWAYS_INLINE auto copysign(half4 x, half4 y) __NOEXCEPT { return __spirv::__make_copysign_call<half4>(x, y); }
__ALWAYS_INLINE auto copysign(half8 x, half8 y) __NOEXCEPT { return __spirv::__make_copysign_call<half8>(x, y); }
__ALWAYS_INLINE auto copysign(half16 x, half16 y) __NOEXCEPT { return __spirv::__make_copysign_call<half16>(x, y); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto copysign(double x, double y) __NOEXCEPT { return __spirv::__make_copysign_call<double>(x, y); }
__ALWAYS_INLINE auto copysign(double2 x, double2 y) __NOEXCEPT { return __spirv::__make_copysign_call<double2>(x, y); }
__ALWAYS_INLINE auto copysign(double3 x, double3 y) __NOEXCEPT { return __spirv::__make_copysign_call<double3>(x, y); }
__ALWAYS_INLINE auto copysign(double4 x, double4 y) __NOEXCEPT { return __spirv::__make_copysign_call<double4>(x, y); }
__ALWAYS_INLINE auto copysign(double8 x, double8 y) __NOEXCEPT { return __spirv::__make_copysign_call<double8>(x, y); }
__ALWAYS_INLINE auto copysign(double16 x, double16 y) __NOEXCEPT { return __spirv::__make_copysign_call<double16>(x, y); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto copysign(float x, float y) __NOEXCEPT { return __spirv::__make_copysign_call<float>(x, y); }
__ALWAYS_INLINE auto copysign(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_copysign_call<float2>(x, y); }
__ALWAYS_INLINE auto copysign(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_copysign_call<float3>(x, y); }
__ALWAYS_INLINE auto copysign(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_copysign_call<float4>(x, y); }
__ALWAYS_INLINE auto copysign(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_copysign_call<float8>(x, y); }
__ALWAYS_INLINE auto copysign(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_copysign_call<float16>(x, y); }


/// \brief fmax(x-y, 0) (per component)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto fdim(half x, half y) __NOEXCEPT { return __spirv::__make_fdim_call<half>(x, y); }
__ALWAYS_INLINE auto fdim(half2 x, half2 y) __NOEXCEPT { return __spirv::__make_fdim_call<half2>(x, y); }
__ALWAYS_INLINE auto fdim(half3 x, half3 y) __NOEXCEPT { return __spirv::__make_fdim_call<half3>(x, y); }
__ALWAYS_INLINE auto fdim(half4 x, half4 y) __NOEXCEPT { return __spirv::__make_fdim_call<half4>(x, y); }
__ALWAYS_INLINE auto fdim(half8 x, half8 y) __NOEXCEPT { return __spirv::__make_fdim_call<half8>(x, y); }
__ALWAYS_INLINE auto fdim(half16 x, half16 y) __NOEXCEPT { return __spirv::__make_fdim_call<half16>(x, y); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto fdim(double x, double y) __NOEXCEPT { return __spirv::__make_fdim_call<double>(x, y); }
__ALWAYS_INLINE auto fdim(double2 x, double2 y) __NOEXCEPT { return __spirv::__make_fdim_call<double2>(x, y); }
__ALWAYS_INLINE auto fdim(double3 x, double3 y) __NOEXCEPT { return __spirv::__make_fdim_call<double3>(x, y); }
__ALWAYS_INLINE auto fdim(double4 x, double4 y) __NOEXCEPT { return __spirv::__make_fdim_call<double4>(x, y); }
__ALWAYS_INLINE auto fdim(double8 x, double8 y) __NOEXCEPT { return __spirv::__make_fdim_call<double8>(x, y); }
__ALWAYS_INLINE auto fdim(double16 x, double16 y) __NOEXCEPT { return __spirv::__make_fdim_call<double16>(x, y); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto fdim(float x, float y) __NOEXCEPT { return __spirv::__make_fdim_call<float>(x, y); }
__ALWAYS_INLINE auto fdim(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_fdim_call<float2>(x, y); }
__ALWAYS_INLINE auto fdim(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_fdim_call<float3>(x, y); }
__ALWAYS_INLINE auto fdim(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_fdim_call<float4>(x, y); }
__ALWAYS_INLINE auto fdim(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_fdim_call<float8>(x, y); }
__ALWAYS_INLINE auto fdim(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_fdim_call<float16>(x, y); }


/// \brief if neither x and y are NaN returns (x < y ? y : x); if one is NaN, returns other; if both are NaN, returns NaN.
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto fmax(half x, half y) __NOEXCEPT { return __spirv::__make_fmax_call<half>(x, y); }
__ALWAYS_INLINE auto fmax(half2 x, half2 y) __NOEXCEPT { return __spirv::__make_fmax_call<half2>(x, y); }
__ALWAYS_INLINE auto fmax(half3 x, half3 y) __NOEXCEPT { return __spirv::__make_fmax_call<half3>(x, y); }
__ALWAYS_INLINE auto fmax(half4 x, half4 y) __NOEXCEPT { return __spirv::__make_fmax_call<half4>(x, y); }
__ALWAYS_INLINE auto fmax(half8 x, half8 y) __NOEXCEPT { return __spirv::__make_fmax_call<half8>(x, y); }
__ALWAYS_INLINE auto fmax(half16 x, half16 y) __NOEXCEPT { return __spirv::__make_fmax_call<half16>(x, y); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto fmax(double x, double y) __NOEXCEPT { return __spirv::__make_fmax_call<double>(x, y); }
__ALWAYS_INLINE auto fmax(double2 x, double2 y) __NOEXCEPT { return __spirv::__make_fmax_call<double2>(x, y); }
__ALWAYS_INLINE auto fmax(double3 x, double3 y) __NOEXCEPT { return __spirv::__make_fmax_call<double3>(x, y); }
__ALWAYS_INLINE auto fmax(double4 x, double4 y) __NOEXCEPT { return __spirv::__make_fmax_call<double4>(x, y); }
__ALWAYS_INLINE auto fmax(double8 x, double8 y) __NOEXCEPT { return __spirv::__make_fmax_call<double8>(x, y); }
__ALWAYS_INLINE auto fmax(double16 x, double16 y) __NOEXCEPT { return __spirv::__make_fmax_call<double16>(x, y); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto fmax(float x, float y) __NOEXCEPT { return __spirv::__make_fmax_call<float>(x, y); }
__ALWAYS_INLINE auto fmax(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_fmax_call<float2>(x, y); }
__ALWAYS_INLINE auto fmax(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_fmax_call<float3>(x, y); }
__ALWAYS_INLINE auto fmax(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_fmax_call<float4>(x, y); }
__ALWAYS_INLINE auto fmax(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_fmax_call<float8>(x, y); }
__ALWAYS_INLINE auto fmax(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_fmax_call<float16>(x, y); }


/// \brief if neither x and y are NaN returns (y < x ? y : x); if one is NaN, returns other; if both are NaN, returns NaN.
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto fmin(half x, half y) __NOEXCEPT { return __spirv::__make_fmin_call<half>(x, y); }
__ALWAYS_INLINE auto fmin(half2 x, half2 y) __NOEXCEPT { return __spirv::__make_fmin_call<half2>(x, y); }
__ALWAYS_INLINE auto fmin(half3 x, half3 y) __NOEXCEPT { return __spirv::__make_fmin_call<half3>(x, y); }
__ALWAYS_INLINE auto fmin(half4 x, half4 y) __NOEXCEPT { return __spirv::__make_fmin_call<half4>(x, y); }
__ALWAYS_INLINE auto fmin(half8 x, half8 y) __NOEXCEPT { return __spirv::__make_fmin_call<half8>(x, y); }
__ALWAYS_INLINE auto fmin(half16 x, half16 y) __NOEXCEPT { return __spirv::__make_fmin_call<half16>(x, y); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto fmin(double x, double y) __NOEXCEPT { return __spirv::__make_fmin_call<double>(x, y); }
__ALWAYS_INLINE auto fmin(double2 x, double2 y) __NOEXCEPT { return __spirv::__make_fmin_call<double2>(x, y); }
__ALWAYS_INLINE auto fmin(double3 x, double3 y) __NOEXCEPT { return __spirv::__make_fmin_call<double3>(x, y); }
__ALWAYS_INLINE auto fmin(double4 x, double4 y) __NOEXCEPT { return __spirv::__make_fmin_call<double4>(x, y); }
__ALWAYS_INLINE auto fmin(double8 x, double8 y) __NOEXCEPT { return __spirv::__make_fmin_call<double8>(x, y); }
__ALWAYS_INLINE auto fmin(double16 x, double16 y) __NOEXCEPT { return __spirv::__make_fmin_call<double16>(x, y); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto fmin(float x, float y) __NOEXCEPT { return __spirv::__make_fmin_call<float>(x, y); }
__ALWAYS_INLINE auto fmin(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_fmin_call<float2>(x, y); }
__ALWAYS_INLINE auto fmin(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_fmin_call<float3>(x, y); }
__ALWAYS_INLINE auto fmin(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_fmin_call<float4>(x, y); }
__ALWAYS_INLINE auto fmin(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_fmin_call<float8>(x, y); }
__ALWAYS_INLINE auto fmin(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_fmin_call<float16>(x, y); }


/// \brief returns x - y*trunc(x/y)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto fmod(half x, half y) __NOEXCEPT { return __spirv::__make_fmod_call<half>(x, y); }
__ALWAYS_INLINE auto fmod(half2 x, half2 y) __NOEXCEPT { return __spirv::__make_fmod_call<half2>(x, y); }
__ALWAYS_INLINE auto fmod(half3 x, half3 y) __NOEXCEPT { return __spirv::__make_fmod_call<half3>(x, y); }
__ALWAYS_INLINE auto fmod(half4 x, half4 y) __NOEXCEPT { return __spirv::__make_fmod_call<half4>(x, y); }
__ALWAYS_INLINE auto fmod(half8 x, half8 y) __NOEXCEPT { return __spirv::__make_fmod_call<half8>(x, y); }
__ALWAYS_INLINE auto fmod(half16 x, half16 y) __NOEXCEPT { return __spirv::__make_fmod_call<half16>(x, y); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto fmod(double x, double y) __NOEXCEPT { return __spirv::__make_fmod_call<double>(x, y); }
__ALWAYS_INLINE auto fmod(double2 x, double2 y) __NOEXCEPT { return __spirv::__make_fmod_call<double2>(x, y); }
__ALWAYS_INLINE auto fmod(double3 x, double3 y) __NOEXCEPT { return __spirv::__make_fmod_call<double3>(x, y); }
__ALWAYS_INLINE auto fmod(double4 x, double4 y) __NOEXCEPT { return __spirv::__make_fmod_call<double4>(x, y); }
__ALWAYS_INLINE auto fmod(double8 x, double8 y) __NOEXCEPT { return __spirv::__make_fmod_call<double8>(x, y); }
__ALWAYS_INLINE auto fmod(double16 x, double16 y) __NOEXCEPT { return __spirv::__make_fmod_call<double16>(x, y); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto fmod(float x, float y) __NOEXCEPT { return __spirv::__make_fmod_call<float>(x, y); }
__ALWAYS_INLINE auto fmod(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_fmod_call<float2>(x, y); }
__ALWAYS_INLINE auto fmod(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_fmod_call<float3>(x, y); }
__ALWAYS_INLINE auto fmod(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_fmod_call<float4>(x, y); }
__ALWAYS_INLINE auto fmod(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_fmod_call<float8>(x, y); }
__ALWAYS_INLINE auto fmod(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_fmod_call<float16>(x, y); }


/// \brief returns square root of x^2 + y^2 without undue overflow or underflow
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto hypot(half x, half y) __NOEXCEPT { return __spirv::__make_hypot_call<half>(x, y); }
__ALWAYS_INLINE auto hypot(half2 x, half2 y) __NOEXCEPT { return __spirv::__make_hypot_call<half2>(x, y); }
__ALWAYS_INLINE auto hypot(half3 x, half3 y) __NOEXCEPT { return __spirv::__make_hypot_call<half3>(x, y); }
__ALWAYS_INLINE auto hypot(half4 x, half4 y) __NOEXCEPT { return __spirv::__make_hypot_call<half4>(x, y); }
__ALWAYS_INLINE auto hypot(half8 x, half8 y) __NOEXCEPT { return __spirv::__make_hypot_call<half8>(x, y); }
__ALWAYS_INLINE auto hypot(half16 x, half16 y) __NOEXCEPT { return __spirv::__make_hypot_call<half16>(x, y); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto hypot(double x, double y) __NOEXCEPT { return __spirv::__make_hypot_call<double>(x, y); }
__ALWAYS_INLINE auto hypot(double2 x, double2 y) __NOEXCEPT { return __spirv::__make_hypot_call<double2>(x, y); }
__ALWAYS_INLINE auto hypot(double3 x, double3 y) __NOEXCEPT { return __spirv::__make_hypot_call<double3>(x, y); }
__ALWAYS_INLINE auto hypot(double4 x, double4 y) __NOEXCEPT { return __spirv::__make_hypot_call<double4>(x, y); }
__ALWAYS_INLINE auto hypot(double8 x, double8 y) __NOEXCEPT { return __spirv::__make_hypot_call<double8>(x, y); }
__ALWAYS_INLINE auto hypot(double16 x, double16 y) __NOEXCEPT { return __spirv::__make_hypot_call<double16>(x, y); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto hypot(float x, float y) __NOEXCEPT { return __spirv::__make_hypot_call<float>(x, y); }
__ALWAYS_INLINE auto hypot(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_hypot_call<float2>(x, y); }
__ALWAYS_INLINE auto hypot(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_hypot_call<float3>(x, y); }
__ALWAYS_INLINE auto hypot(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_hypot_call<float4>(x, y); }
__ALWAYS_INLINE auto hypot(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_hypot_call<float8>(x, y); }
__ALWAYS_INLINE auto hypot(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_hypot_call<float16>(x, y); }


/// \brief returns x if |x|>|y|, y if |y|>|x|, otherwise fmax(x, y)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto maxmag(half x, half y) __NOEXCEPT { return __spirv::__make_maxmag_call<half>(x, y); }
__ALWAYS_INLINE auto maxmag(half2 x, half2 y) __NOEXCEPT { return __spirv::__make_maxmag_call<half2>(x, y); }
__ALWAYS_INLINE auto maxmag(half3 x, half3 y) __NOEXCEPT { return __spirv::__make_maxmag_call<half3>(x, y); }
__ALWAYS_INLINE auto maxmag(half4 x, half4 y) __NOEXCEPT { return __spirv::__make_maxmag_call<half4>(x, y); }
__ALWAYS_INLINE auto maxmag(half8 x, half8 y) __NOEXCEPT { return __spirv::__make_maxmag_call<half8>(x, y); }
__ALWAYS_INLINE auto maxmag(half16 x, half16 y) __NOEXCEPT { return __spirv::__make_maxmag_call<half16>(x, y); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto maxmag(double x, double y) __NOEXCEPT { return __spirv::__make_maxmag_call<double>(x, y); }
__ALWAYS_INLINE auto maxmag(double2 x, double2 y) __NOEXCEPT { return __spirv::__make_maxmag_call<double2>(x, y); }
__ALWAYS_INLINE auto maxmag(double3 x, double3 y) __NOEXCEPT { return __spirv::__make_maxmag_call<double3>(x, y); }
__ALWAYS_INLINE auto maxmag(double4 x, double4 y) __NOEXCEPT { return __spirv::__make_maxmag_call<double4>(x, y); }
__ALWAYS_INLINE auto maxmag(double8 x, double8 y) __NOEXCEPT { return __spirv::__make_maxmag_call<double8>(x, y); }
__ALWAYS_INLINE auto maxmag(double16 x, double16 y) __NOEXCEPT { return __spirv::__make_maxmag_call<double16>(x, y); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto maxmag(float x, float y) __NOEXCEPT { return __spirv::__make_maxmag_call<float>(x, y); }
__ALWAYS_INLINE auto maxmag(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_maxmag_call<float2>(x, y); }
__ALWAYS_INLINE auto maxmag(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_maxmag_call<float3>(x, y); }
__ALWAYS_INLINE auto maxmag(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_maxmag_call<float4>(x, y); }
__ALWAYS_INLINE auto maxmag(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_maxmag_call<float8>(x, y); }
__ALWAYS_INLINE auto maxmag(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_maxmag_call<float16>(x, y); }


/// \brief returns x if |x|<|y|, y if |y|<|x|, otherwise fmin(x, y)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto minmag(half x, half y) __NOEXCEPT { return __spirv::__make_minmag_call<half>(x, y); }
__ALWAYS_INLINE auto minmag(half2 x, half2 y) __NOEXCEPT { return __spirv::__make_minmag_call<half2>(x, y); }
__ALWAYS_INLINE auto minmag(half3 x, half3 y) __NOEXCEPT { return __spirv::__make_minmag_call<half3>(x, y); }
__ALWAYS_INLINE auto minmag(half4 x, half4 y) __NOEXCEPT { return __spirv::__make_minmag_call<half4>(x, y); }
__ALWAYS_INLINE auto minmag(half8 x, half8 y) __NOEXCEPT { return __spirv::__make_minmag_call<half8>(x, y); }
__ALWAYS_INLINE auto minmag(half16 x, half16 y) __NOEXCEPT { return __spirv::__make_minmag_call<half16>(x, y); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto minmag(double x, double y) __NOEXCEPT { return __spirv::__make_minmag_call<double>(x, y); }
__ALWAYS_INLINE auto minmag(double2 x, double2 y) __NOEXCEPT { return __spirv::__make_minmag_call<double2>(x, y); }
__ALWAYS_INLINE auto minmag(double3 x, double3 y) __NOEXCEPT { return __spirv::__make_minmag_call<double3>(x, y); }
__ALWAYS_INLINE auto minmag(double4 x, double4 y) __NOEXCEPT { return __spirv::__make_minmag_call<double4>(x, y); }
__ALWAYS_INLINE auto minmag(double8 x, double8 y) __NOEXCEPT { return __spirv::__make_minmag_call<double8>(x, y); }
__ALWAYS_INLINE auto minmag(double16 x, double16 y) __NOEXCEPT { return __spirv::__make_minmag_call<double16>(x, y); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto minmag(float x, float y) __NOEXCEPT { return __spirv::__make_minmag_call<float>(x, y); }
__ALWAYS_INLINE auto minmag(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_minmag_call<float2>(x, y); }
__ALWAYS_INLINE auto minmag(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_minmag_call<float3>(x, y); }
__ALWAYS_INLINE auto minmag(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_minmag_call<float4>(x, y); }
__ALWAYS_INLINE auto minmag(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_minmag_call<float8>(x, y); }
__ALWAYS_INLINE auto minmag(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_minmag_call<float16>(x, y); }


/// \brief computes next representable single-precision floating point value following x in the direction of y
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto nextafter(half x, half y) __NOEXCEPT { return __spirv::__make_nextafter_call<half>(x, y); }
__ALWAYS_INLINE auto nextafter(half2 x, half2 y) __NOEXCEPT { return __spirv::__make_nextafter_call<half2>(x, y); }
__ALWAYS_INLINE auto nextafter(half3 x, half3 y) __NOEXCEPT { return __spirv::__make_nextafter_call<half3>(x, y); }
__ALWAYS_INLINE auto nextafter(half4 x, half4 y) __NOEXCEPT { return __spirv::__make_nextafter_call<half4>(x, y); }
__ALWAYS_INLINE auto nextafter(half8 x, half8 y) __NOEXCEPT { return __spirv::__make_nextafter_call<half8>(x, y); }
__ALWAYS_INLINE auto nextafter(half16 x, half16 y) __NOEXCEPT { return __spirv::__make_nextafter_call<half16>(x, y); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto nextafter(double x, double y) __NOEXCEPT { return __spirv::__make_nextafter_call<double>(x, y); }
__ALWAYS_INLINE auto nextafter(double2 x, double2 y) __NOEXCEPT { return __spirv::__make_nextafter_call<double2>(x, y); }
__ALWAYS_INLINE auto nextafter(double3 x, double3 y) __NOEXCEPT { return __spirv::__make_nextafter_call<double3>(x, y); }
__ALWAYS_INLINE auto nextafter(double4 x, double4 y) __NOEXCEPT { return __spirv::__make_nextafter_call<double4>(x, y); }
__ALWAYS_INLINE auto nextafter(double8 x, double8 y) __NOEXCEPT { return __spirv::__make_nextafter_call<double8>(x, y); }
__ALWAYS_INLINE auto nextafter(double16 x, double16 y) __NOEXCEPT { return __spirv::__make_nextafter_call<double16>(x, y); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto nextafter(float x, float y) __NOEXCEPT { return __spirv::__make_nextafter_call<float>(x, y); }
__ALWAYS_INLINE auto nextafter(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_nextafter_call<float2>(x, y); }
__ALWAYS_INLINE auto nextafter(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_nextafter_call<float3>(x, y); }
__ALWAYS_INLINE auto nextafter(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_nextafter_call<float4>(x, y); }
__ALWAYS_INLINE auto nextafter(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_nextafter_call<float8>(x, y); }
__ALWAYS_INLINE auto nextafter(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_nextafter_call<float16>(x, y); }


/// \brief x^y
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto pow(half x, half y) __NOEXCEPT { return __spirv::__make_pow_call<half>(x, y); }
__ALWAYS_INLINE auto pow(half2 x, half2 y) __NOEXCEPT { return __spirv::__make_pow_call<half2>(x, y); }
__ALWAYS_INLINE auto pow(half3 x, half3 y) __NOEXCEPT { return __spirv::__make_pow_call<half3>(x, y); }
__ALWAYS_INLINE auto pow(half4 x, half4 y) __NOEXCEPT { return __spirv::__make_pow_call<half4>(x, y); }
__ALWAYS_INLINE auto pow(half8 x, half8 y) __NOEXCEPT { return __spirv::__make_pow_call<half8>(x, y); }
__ALWAYS_INLINE auto pow(half16 x, half16 y) __NOEXCEPT { return __spirv::__make_pow_call<half16>(x, y); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto pow(double x, double y) __NOEXCEPT { return __spirv::__make_pow_call<double>(x, y); }
__ALWAYS_INLINE auto pow(double2 x, double2 y) __NOEXCEPT { return __spirv::__make_pow_call<double2>(x, y); }
__ALWAYS_INLINE auto pow(double3 x, double3 y) __NOEXCEPT { return __spirv::__make_pow_call<double3>(x, y); }
__ALWAYS_INLINE auto pow(double4 x, double4 y) __NOEXCEPT { return __spirv::__make_pow_call<double4>(x, y); }
__ALWAYS_INLINE auto pow(double8 x, double8 y) __NOEXCEPT { return __spirv::__make_pow_call<double8>(x, y); }
__ALWAYS_INLINE auto pow(double16 x, double16 y) __NOEXCEPT { return __spirv::__make_pow_call<double16>(x, y); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto pow(float x, float y) __NOEXCEPT { return __spirv::__make_pow_call<float>(x, y); }
__ALWAYS_INLINE auto pow(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_pow_call<float2>(x, y); }
__ALWAYS_INLINE auto pow(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_pow_call<float3>(x, y); }
__ALWAYS_INLINE auto pow(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_pow_call<float4>(x, y); }
__ALWAYS_INLINE auto pow(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_pow_call<float8>(x, y); }
__ALWAYS_INLINE auto pow(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_pow_call<float16>(x, y); }


/// \brief x^y, where x >= 0
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto powr(half x, half y) __NOEXCEPT { return __spirv::__make_powr_call<half>(x, y); }
__ALWAYS_INLINE auto powr(half2 x, half2 y) __NOEXCEPT { return __spirv::__make_powr_call<half2>(x, y); }
__ALWAYS_INLINE auto powr(half3 x, half3 y) __NOEXCEPT { return __spirv::__make_powr_call<half3>(x, y); }
__ALWAYS_INLINE auto powr(half4 x, half4 y) __NOEXCEPT { return __spirv::__make_powr_call<half4>(x, y); }
__ALWAYS_INLINE auto powr(half8 x, half8 y) __NOEXCEPT { return __spirv::__make_powr_call<half8>(x, y); }
__ALWAYS_INLINE auto powr(half16 x, half16 y) __NOEXCEPT { return __spirv::__make_powr_call<half16>(x, y); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto powr(double x, double y) __NOEXCEPT { return __spirv::__make_powr_call<double>(x, y); }
__ALWAYS_INLINE auto powr(double2 x, double2 y) __NOEXCEPT { return __spirv::__make_powr_call<double2>(x, y); }
__ALWAYS_INLINE auto powr(double3 x, double3 y) __NOEXCEPT { return __spirv::__make_powr_call<double3>(x, y); }
__ALWAYS_INLINE auto powr(double4 x, double4 y) __NOEXCEPT { return __spirv::__make_powr_call<double4>(x, y); }
__ALWAYS_INLINE auto powr(double8 x, double8 y) __NOEXCEPT { return __spirv::__make_powr_call<double8>(x, y); }
__ALWAYS_INLINE auto powr(double16 x, double16 y) __NOEXCEPT { return __spirv::__make_powr_call<double16>(x, y); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto powr(float x, float y) __NOEXCEPT { return __spirv::__make_powr_call<float>(x, y); }
__ALWAYS_INLINE auto powr(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_powr_call<float2>(x, y); }
__ALWAYS_INLINE auto powr(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_powr_call<float3>(x, y); }
__ALWAYS_INLINE auto powr(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_powr_call<float4>(x, y); }
__ALWAYS_INLINE auto powr(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_powr_call<float8>(x, y); }
__ALWAYS_INLINE auto powr(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_powr_call<float16>(x, y); }


/// \brief computes r, sush as: r = x - n*y, where n is integer nereast to x/y
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto remainder(half x, half y) __NOEXCEPT { return __spirv::__make_remainder_call<half>(x, y); }
__ALWAYS_INLINE auto remainder(half2 x, half2 y) __NOEXCEPT { return __spirv::__make_remainder_call<half2>(x, y); }
__ALWAYS_INLINE auto remainder(half3 x, half3 y) __NOEXCEPT { return __spirv::__make_remainder_call<half3>(x, y); }
__ALWAYS_INLINE auto remainder(half4 x, half4 y) __NOEXCEPT { return __spirv::__make_remainder_call<half4>(x, y); }
__ALWAYS_INLINE auto remainder(half8 x, half8 y) __NOEXCEPT { return __spirv::__make_remainder_call<half8>(x, y); }
__ALWAYS_INLINE auto remainder(half16 x, half16 y) __NOEXCEPT { return __spirv::__make_remainder_call<half16>(x, y); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto remainder(double x, double y) __NOEXCEPT { return __spirv::__make_remainder_call<double>(x, y); }
__ALWAYS_INLINE auto remainder(double2 x, double2 y) __NOEXCEPT { return __spirv::__make_remainder_call<double2>(x, y); }
__ALWAYS_INLINE auto remainder(double3 x, double3 y) __NOEXCEPT { return __spirv::__make_remainder_call<double3>(x, y); }
__ALWAYS_INLINE auto remainder(double4 x, double4 y) __NOEXCEPT { return __spirv::__make_remainder_call<double4>(x, y); }
__ALWAYS_INLINE auto remainder(double8 x, double8 y) __NOEXCEPT { return __spirv::__make_remainder_call<double8>(x, y); }
__ALWAYS_INLINE auto remainder(double16 x, double16 y) __NOEXCEPT { return __spirv::__make_remainder_call<double16>(x, y); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto remainder(float x, float y) __NOEXCEPT { return __spirv::__make_remainder_call<float>(x, y); }
__ALWAYS_INLINE auto remainder(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_remainder_call<float2>(x, y); }
__ALWAYS_INLINE auto remainder(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_remainder_call<float3>(x, y); }
__ALWAYS_INLINE auto remainder(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_remainder_call<float4>(x, y); }
__ALWAYS_INLINE auto remainder(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_remainder_call<float8>(x, y); }
__ALWAYS_INLINE auto remainder(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_remainder_call<float16>(x, y); }

/// \brief returns correctly rounded sum of c with infinitely precise product of a and b. Intermediate rounding doesn't occur. Edge case behaviour is per IEEE 754-2008 standard
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto fma(half a, half b, half c) __NOEXCEPT { return __spirv::__make_fma_call<half>(a, b, c); }
__ALWAYS_INLINE auto fma(half2 a, half2 b, half2 c) __NOEXCEPT { return __spirv::__make_fma_call<half2>(a, b, c); }
__ALWAYS_INLINE auto fma(half3 a, half3 b, half3 c) __NOEXCEPT { return __spirv::__make_fma_call<half3>(a, b, c); }
__ALWAYS_INLINE auto fma(half4 a, half4 b, half4 c) __NOEXCEPT { return __spirv::__make_fma_call<half4>(a, b, c); }
__ALWAYS_INLINE auto fma(half8 a, half8 b, half8 c) __NOEXCEPT { return __spirv::__make_fma_call<half8>(a, b, c); }
__ALWAYS_INLINE auto fma(half16 a, half16 b, half16 c) __NOEXCEPT { return __spirv::__make_fma_call<half16>(a, b, c); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto fma(double a, double b, double c) __NOEXCEPT { return __spirv::__make_fma_call<double>(a, b, c); }
__ALWAYS_INLINE auto fma(double2 a, double2 b, double2 c) __NOEXCEPT { return __spirv::__make_fma_call<double2>(a, b, c); }
__ALWAYS_INLINE auto fma(double3 a, double3 b, double3 c) __NOEXCEPT { return __spirv::__make_fma_call<double3>(a, b, c); }
__ALWAYS_INLINE auto fma(double4 a, double4 b, double4 c) __NOEXCEPT { return __spirv::__make_fma_call<double4>(a, b, c); }
__ALWAYS_INLINE auto fma(double8 a, double8 b, double8 c) __NOEXCEPT { return __spirv::__make_fma_call<double8>(a, b, c); }
__ALWAYS_INLINE auto fma(double16 a, double16 b, double16 c) __NOEXCEPT { return __spirv::__make_fma_call<double16>(a, b, c); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto fma(float a, float b, float c) __NOEXCEPT { return __spirv::__make_fma_call<float>(a, b, c); }
__ALWAYS_INLINE auto fma(float2 a, float2 b, float2 c) __NOEXCEPT { return __spirv::__make_fma_call<float2>(a, b, c); }
__ALWAYS_INLINE auto fma(float3 a, float3 b, float3 c) __NOEXCEPT { return __spirv::__make_fma_call<float3>(a, b, c); }
__ALWAYS_INLINE auto fma(float4 a, float4 b, float4 c) __NOEXCEPT { return __spirv::__make_fma_call<float4>(a, b, c); }
__ALWAYS_INLINE auto fma(float8 a, float8 b, float8 c) __NOEXCEPT { return __spirv::__make_fma_call<float8>(a, b, c); }
__ALWAYS_INLINE auto fma(float16 a, float16 b, float16 c) __NOEXCEPT { return __spirv::__make_fma_call<float16>(a, b, c); }


/// \brief approximates a*b + c, favors speed over accuracy. Rounding and super/subnormal intermediates handling are not defined
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto mad(half a, half b, half c) __NOEXCEPT { return __spirv::__make_mad_call<half>(a, b, c); }
__ALWAYS_INLINE auto mad(half2 a, half2 b, half2 c) __NOEXCEPT { return __spirv::__make_mad_call<half2>(a, b, c); }
__ALWAYS_INLINE auto mad(half3 a, half3 b, half3 c) __NOEXCEPT { return __spirv::__make_mad_call<half3>(a, b, c); }
__ALWAYS_INLINE auto mad(half4 a, half4 b, half4 c) __NOEXCEPT { return __spirv::__make_mad_call<half4>(a, b, c); }
__ALWAYS_INLINE auto mad(half8 a, half8 b, half8 c) __NOEXCEPT { return __spirv::__make_mad_call<half8>(a, b, c); }
__ALWAYS_INLINE auto mad(half16 a, half16 b, half16 c) __NOEXCEPT { return __spirv::__make_mad_call<half16>(a, b, c); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto mad(double a, double b, double c) __NOEXCEPT { return __spirv::__make_mad_call<double>(a, b, c); }
__ALWAYS_INLINE auto mad(double2 a, double2 b, double2 c) __NOEXCEPT { return __spirv::__make_mad_call<double2>(a, b, c); }
__ALWAYS_INLINE auto mad(double3 a, double3 b, double3 c) __NOEXCEPT { return __spirv::__make_mad_call<double3>(a, b, c); }
__ALWAYS_INLINE auto mad(double4 a, double4 b, double4 c) __NOEXCEPT { return __spirv::__make_mad_call<double4>(a, b, c); }
__ALWAYS_INLINE auto mad(double8 a, double8 b, double8 c) __NOEXCEPT { return __spirv::__make_mad_call<double8>(a, b, c); }
__ALWAYS_INLINE auto mad(double16 a, double16 b, double16 c) __NOEXCEPT { return __spirv::__make_mad_call<double16>(a, b, c); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto mad(float a, float b, float c) __NOEXCEPT { return __spirv::__make_mad_call<float>(a, b, c); }
__ALWAYS_INLINE auto mad(float2 a, float2 b, float2 c) __NOEXCEPT { return __spirv::__make_mad_call<float2>(a, b, c); }
__ALWAYS_INLINE auto mad(float3 a, float3 b, float3 c) __NOEXCEPT { return __spirv::__make_mad_call<float3>(a, b, c); }
__ALWAYS_INLINE auto mad(float4 a, float4 b, float4 c) __NOEXCEPT { return __spirv::__make_mad_call<float4>(a, b, c); }
__ALWAYS_INLINE auto mad(float8 a, float8 b, float8 c) __NOEXCEPT { return __spirv::__make_mad_call<float8>(a, b, c); }
__ALWAYS_INLINE auto mad(float16 a, float16 b, float16 c) __NOEXCEPT { return __spirv::__make_mad_call<float16>(a, b, c); }


/// \brief if neither x and y are NaN returns (x < y ? y : x); if one is NaN, returns other; if both are NaN, returns NaN.
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto fmax(half2 x, vector_element_t<half2> y) __NOEXCEPT { return __spirv::__make_fmax_call<half2>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmax(half3 x, vector_element_t<half3> y) __NOEXCEPT { return __spirv::__make_fmax_call<half3>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmax(half4 x, vector_element_t<half4> y) __NOEXCEPT { return __spirv::__make_fmax_call<half4>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmax(half8 x, vector_element_t<half8> y) __NOEXCEPT { return __spirv::__make_fmax_call<half8>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmax(half16 x, vector_element_t<half16> y) __NOEXCEPT { return __spirv::__make_fmax_call<half16>(x, (decltype(x))y); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto fmax(double2 x, vector_element_t<double2> y) __NOEXCEPT { return __spirv::__make_fmax_call<double2>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmax(double3 x, vector_element_t<double3> y) __NOEXCEPT { return __spirv::__make_fmax_call<double3>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmax(double4 x, vector_element_t<double4> y) __NOEXCEPT { return __spirv::__make_fmax_call<double4>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmax(double8 x, vector_element_t<double8> y) __NOEXCEPT { return __spirv::__make_fmax_call<double8>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmax(double16 x, vector_element_t<double16> y) __NOEXCEPT { return __spirv::__make_fmax_call<double16>(x, (decltype(x))y); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto fmax(float2 x, vector_element_t<float2> y) __NOEXCEPT { return __spirv::__make_fmax_call<float2>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmax(float3 x, vector_element_t<float3> y) __NOEXCEPT { return __spirv::__make_fmax_call<float3>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmax(float4 x, vector_element_t<float4> y) __NOEXCEPT { return __spirv::__make_fmax_call<float4>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmax(float8 x, vector_element_t<float8> y) __NOEXCEPT { return __spirv::__make_fmax_call<float8>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmax(float16 x, vector_element_t<float16> y) __NOEXCEPT { return __spirv::__make_fmax_call<float16>(x, (decltype(x))y); }


/// \brief if neither x and y are NaN returns (y < x ? y : x); if one is NaN, returns other; if both are NaN, returns NaN.
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto fmin(half2 x, vector_element_t<half2> y) __NOEXCEPT { return __spirv::__make_fmin_call<half2>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmin(half3 x, vector_element_t<half3> y) __NOEXCEPT { return __spirv::__make_fmin_call<half3>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmin(half4 x, vector_element_t<half4> y) __NOEXCEPT { return __spirv::__make_fmin_call<half4>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmin(half8 x, vector_element_t<half8> y) __NOEXCEPT { return __spirv::__make_fmin_call<half8>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmin(half16 x, vector_element_t<half16> y) __NOEXCEPT { return __spirv::__make_fmin_call<half16>(x, (decltype(x))y); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto fmin(double2 x, vector_element_t<double2> y) __NOEXCEPT { return __spirv::__make_fmin_call<double2>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmin(double3 x, vector_element_t<double3> y) __NOEXCEPT { return __spirv::__make_fmin_call<double3>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmin(double4 x, vector_element_t<double4> y) __NOEXCEPT { return __spirv::__make_fmin_call<double4>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmin(double8 x, vector_element_t<double8> y) __NOEXCEPT { return __spirv::__make_fmin_call<double8>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmin(double16 x, vector_element_t<double16> y) __NOEXCEPT { return __spirv::__make_fmin_call<double16>(x, (decltype(x))y); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto fmin(float2 x, vector_element_t<float2> y) __NOEXCEPT { return __spirv::__make_fmin_call<float2>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmin(float3 x, vector_element_t<float3> y) __NOEXCEPT { return __spirv::__make_fmin_call<float3>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmin(float4 x, vector_element_t<float4> y) __NOEXCEPT { return __spirv::__make_fmin_call<float4>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmin(float8 x, vector_element_t<float8> y) __NOEXCEPT { return __spirv::__make_fmin_call<float8>(x, (decltype(x))y); }
__ALWAYS_INLINE auto fmin(float16 x, vector_element_t<float16> y) __NOEXCEPT { return __spirv::__make_fmin_call<float16>(x, (decltype(x))y); }


/// \brief returns fmin(x - floor(x), 0x1.fffffep-1f). floor(x) is returned via iptr
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto fract(half x, half* iptr) __NOEXCEPT { return __spirv::__make_fract_call<half>(x, iptr); }
__ALWAYS_INLINE auto fract(half2 x, half2* iptr) __NOEXCEPT { return __spirv::__make_fract_call<half2>(x, iptr); }
__ALWAYS_INLINE auto fract(half3 x, half3* iptr) __NOEXCEPT { return __spirv::__make_fract_call<half3>(x, iptr); }
__ALWAYS_INLINE auto fract(half4 x, half4* iptr) __NOEXCEPT { return __spirv::__make_fract_call<half4>(x, iptr); }
__ALWAYS_INLINE auto fract(half8 x, half8* iptr) __NOEXCEPT { return __spirv::__make_fract_call<half8>(x, iptr); }
__ALWAYS_INLINE auto fract(half16 x, half16* iptr) __NOEXCEPT { return __spirv::__make_fract_call<half16>(x, iptr); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto fract(double x, double* iptr) __NOEXCEPT { return __spirv::__make_fract_call<double>(x, iptr); }
__ALWAYS_INLINE auto fract(double2 x, double2* iptr) __NOEXCEPT { return __spirv::__make_fract_call<double2>(x, iptr); }
__ALWAYS_INLINE auto fract(double3 x, double3* iptr) __NOEXCEPT { return __spirv::__make_fract_call<double3>(x, iptr); }
__ALWAYS_INLINE auto fract(double4 x, double4* iptr) __NOEXCEPT { return __spirv::__make_fract_call<double4>(x, iptr); }
__ALWAYS_INLINE auto fract(double8 x, double8* iptr) __NOEXCEPT { return __spirv::__make_fract_call<double8>(x, iptr); }
__ALWAYS_INLINE auto fract(double16 x, double16* iptr) __NOEXCEPT { return __spirv::__make_fract_call<double16>(x, iptr); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto fract(float x, float* iptr) __NOEXCEPT { return __spirv::__make_fract_call<float>(x, iptr); }
__ALWAYS_INLINE auto fract(float2 x, float2* iptr) __NOEXCEPT { return __spirv::__make_fract_call<float2>(x, iptr); }
__ALWAYS_INLINE auto fract(float3 x, float3* iptr) __NOEXCEPT { return __spirv::__make_fract_call<float3>(x, iptr); }
__ALWAYS_INLINE auto fract(float4 x, float4* iptr) __NOEXCEPT { return __spirv::__make_fract_call<float4>(x, iptr); }
__ALWAYS_INLINE auto fract(float8 x, float8* iptr) __NOEXCEPT { return __spirv::__make_fract_call<float8>(x, iptr); }
__ALWAYS_INLINE auto fract(float16 x, float16* iptr) __NOEXCEPT { return __spirv::__make_fract_call<float16>(x, iptr); }


/// \brief decompose x, returning fractional part and storing integer part in iptr; both values share sign with x
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto modf(half x, half* iptr) __NOEXCEPT { return __spirv::__make_modf_call<half>(x, iptr); }
__ALWAYS_INLINE auto modf(half2 x, half2* iptr) __NOEXCEPT { return __spirv::__make_modf_call<half2>(x, iptr); }
__ALWAYS_INLINE auto modf(half3 x, half3* iptr) __NOEXCEPT { return __spirv::__make_modf_call<half3>(x, iptr); }
__ALWAYS_INLINE auto modf(half4 x, half4* iptr) __NOEXCEPT { return __spirv::__make_modf_call<half4>(x, iptr); }
__ALWAYS_INLINE auto modf(half8 x, half8* iptr) __NOEXCEPT { return __spirv::__make_modf_call<half8>(x, iptr); }
__ALWAYS_INLINE auto modf(half16 x, half16* iptr) __NOEXCEPT { return __spirv::__make_modf_call<half16>(x, iptr); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto modf(double x, double* iptr) __NOEXCEPT { return __spirv::__make_modf_call<double>(x, iptr); }
__ALWAYS_INLINE auto modf(double2 x, double2* iptr) __NOEXCEPT { return __spirv::__make_modf_call<double2>(x, iptr); }
__ALWAYS_INLINE auto modf(double3 x, double3* iptr) __NOEXCEPT { return __spirv::__make_modf_call<double3>(x, iptr); }
__ALWAYS_INLINE auto modf(double4 x, double4* iptr) __NOEXCEPT { return __spirv::__make_modf_call<double4>(x, iptr); }
__ALWAYS_INLINE auto modf(double8 x, double8* iptr) __NOEXCEPT { return __spirv::__make_modf_call<double8>(x, iptr); }
__ALWAYS_INLINE auto modf(double16 x, double16* iptr) __NOEXCEPT { return __spirv::__make_modf_call<double16>(x, iptr); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto modf(float x, float* iptr) __NOEXCEPT { return __spirv::__make_modf_call<float>(x, iptr); }
__ALWAYS_INLINE auto modf(float2 x, float2* iptr) __NOEXCEPT { return __spirv::__make_modf_call<float2>(x, iptr); }
__ALWAYS_INLINE auto modf(float3 x, float3* iptr) __NOEXCEPT { return __spirv::__make_modf_call<float3>(x, iptr); }
__ALWAYS_INLINE auto modf(float4 x, float4* iptr) __NOEXCEPT { return __spirv::__make_modf_call<float4>(x, iptr); }
__ALWAYS_INLINE auto modf(float8 x, float8* iptr) __NOEXCEPT { return __spirv::__make_modf_call<float8>(x, iptr); }
__ALWAYS_INLINE auto modf(float16 x, float16* iptr) __NOEXCEPT { return __spirv::__make_modf_call<float16>(x, iptr); }


/// \brief extracts mantissa (returned) and exponent (via exp) from x, such as x = mantissa * 2^exp
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto frexp(half x, make_vector_t<int, vector_size<half>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<half>(x, exp); }
__ALWAYS_INLINE auto frexp(half2 x, make_vector_t<int, vector_size<half2>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<half2>(x, exp); }
__ALWAYS_INLINE auto frexp(half3 x, make_vector_t<int, vector_size<half3>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<half3>(x, exp); }
__ALWAYS_INLINE auto frexp(half4 x, make_vector_t<int, vector_size<half4>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<half4>(x, exp); }
__ALWAYS_INLINE auto frexp(half8 x, make_vector_t<int, vector_size<half8>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<half8>(x, exp); }
__ALWAYS_INLINE auto frexp(half16 x, make_vector_t<int, vector_size<half16>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<half16>(x, exp); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto frexp(double x, make_vector_t<int, vector_size<double>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<double>(x, exp); }
__ALWAYS_INLINE auto frexp(double2 x, make_vector_t<int, vector_size<double2>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<double2>(x, exp); }
__ALWAYS_INLINE auto frexp(double3 x, make_vector_t<int, vector_size<double3>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<double3>(x, exp); }
__ALWAYS_INLINE auto frexp(double4 x, make_vector_t<int, vector_size<double4>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<double4>(x, exp); }
__ALWAYS_INLINE auto frexp(double8 x, make_vector_t<int, vector_size<double8>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<double8>(x, exp); }
__ALWAYS_INLINE auto frexp(double16 x, make_vector_t<int, vector_size<double16>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<double16>(x, exp); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto frexp(float x, make_vector_t<int, vector_size<float>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<float>(x, exp); }
__ALWAYS_INLINE auto frexp(float2 x, make_vector_t<int, vector_size<float2>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<float2>(x, exp); }
__ALWAYS_INLINE auto frexp(float3 x, make_vector_t<int, vector_size<float3>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<float3>(x, exp); }
__ALWAYS_INLINE auto frexp(float4 x, make_vector_t<int, vector_size<float4>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<float4>(x, exp); }
__ALWAYS_INLINE auto frexp(float8 x, make_vector_t<int, vector_size<float8>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<float8>(x, exp); }
__ALWAYS_INLINE auto frexp(float16 x, make_vector_t<int, vector_size<float16>::value>* exp) __NOEXCEPT { return __spirv::__make_frexp_call<float16>(x, exp); }


/// \brief returns natural logarithm of absolute value of the gamma function, sign of the gamma function is returned via signp
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto lgamma_r(half x, make_vector_t<int, vector_size<half>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<half>(x, signp); }
__ALWAYS_INLINE auto lgamma_r(half2 x, make_vector_t<int, vector_size<half2>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<half2>(x, signp); }
__ALWAYS_INLINE auto lgamma_r(half3 x, make_vector_t<int, vector_size<half3>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<half3>(x, signp); }
__ALWAYS_INLINE auto lgamma_r(half4 x, make_vector_t<int, vector_size<half4>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<half4>(x, signp); }
__ALWAYS_INLINE auto lgamma_r(half8 x, make_vector_t<int, vector_size<half8>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<half8>(x, signp); }
__ALWAYS_INLINE auto lgamma_r(half16 x, make_vector_t<int, vector_size<half16>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<half16>(x, signp); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto lgamma_r(double x, make_vector_t<int, vector_size<double>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<double>(x, signp); }
__ALWAYS_INLINE auto lgamma_r(double2 x, make_vector_t<int, vector_size<double2>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<double2>(x, signp); }
__ALWAYS_INLINE auto lgamma_r(double3 x, make_vector_t<int, vector_size<double3>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<double3>(x, signp); }
__ALWAYS_INLINE auto lgamma_r(double4 x, make_vector_t<int, vector_size<double4>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<double4>(x, signp); }
__ALWAYS_INLINE auto lgamma_r(double8 x, make_vector_t<int, vector_size<double8>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<double8>(x, signp); }
__ALWAYS_INLINE auto lgamma_r(double16 x, make_vector_t<int, vector_size<double16>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<double16>(x, signp); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto lgamma_r(float x, make_vector_t<int, vector_size<float>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<float>(x, signp); }
__ALWAYS_INLINE auto lgamma_r(float2 x, make_vector_t<int, vector_size<float2>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<float2>(x, signp); }
__ALWAYS_INLINE auto lgamma_r(float3 x, make_vector_t<int, vector_size<float3>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<float3>(x, signp); }
__ALWAYS_INLINE auto lgamma_r(float4 x, make_vector_t<int, vector_size<float4>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<float4>(x, signp); }
__ALWAYS_INLINE auto lgamma_r(float8 x, make_vector_t<int, vector_size<float8>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<float8>(x, signp); }
__ALWAYS_INLINE auto lgamma_r(float16 x, make_vector_t<int, vector_size<float16>::value>* signp) __NOEXCEPT { return __spirv::__make_lgamma_r_call<float16>(x, signp); }


/// \brief x^y, where n is an integer
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto pown(half x, make_vector_t<int, vector_size<half>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<half>(x, y); }
__ALWAYS_INLINE auto pown(half2 x, make_vector_t<int, vector_size<half2>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<half2>(x, y); }
__ALWAYS_INLINE auto pown(half3 x, make_vector_t<int, vector_size<half3>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<half3>(x, y); }
__ALWAYS_INLINE auto pown(half4 x, make_vector_t<int, vector_size<half4>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<half4>(x, y); }
__ALWAYS_INLINE auto pown(half8 x, make_vector_t<int, vector_size<half8>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<half8>(x, y); }
__ALWAYS_INLINE auto pown(half16 x, make_vector_t<int, vector_size<half16>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<half16>(x, y); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto pown(double x, make_vector_t<int, vector_size<double>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<double>(x, y); }
__ALWAYS_INLINE auto pown(double2 x, make_vector_t<int, vector_size<double2>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<double2>(x, y); }
__ALWAYS_INLINE auto pown(double3 x, make_vector_t<int, vector_size<double3>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<double3>(x, y); }
__ALWAYS_INLINE auto pown(double4 x, make_vector_t<int, vector_size<double4>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<double4>(x, y); }
__ALWAYS_INLINE auto pown(double8 x, make_vector_t<int, vector_size<double8>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<double8>(x, y); }
__ALWAYS_INLINE auto pown(double16 x, make_vector_t<int, vector_size<double16>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<double16>(x, y); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto pown(float x, make_vector_t<int, vector_size<float>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<float>(x, y); }
__ALWAYS_INLINE auto pown(float2 x, make_vector_t<int, vector_size<float2>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<float2>(x, y); }
__ALWAYS_INLINE auto pown(float3 x, make_vector_t<int, vector_size<float3>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<float3>(x, y); }
__ALWAYS_INLINE auto pown(float4 x, make_vector_t<int, vector_size<float4>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<float4>(x, y); }
__ALWAYS_INLINE auto pown(float8 x, make_vector_t<int, vector_size<float8>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<float8>(x, y); }
__ALWAYS_INLINE auto pown(float16 x, make_vector_t<int, vector_size<float16>::value> y) __NOEXCEPT { return __spirv::__make_pown_call<float16>(x, y); }


/// \brief computes r, such as: r = x - n*y, where n is integer nereast to x/y, also stores lower seven bits of n in 'quo'
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto remquo(half x, half y, make_vector_t<int, vector_size<half>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<half>(x, y, quo); }
__ALWAYS_INLINE auto remquo(half2 x, half2 y, make_vector_t<int, vector_size<half2>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<half2>(x, y, quo); }
__ALWAYS_INLINE auto remquo(half3 x, half3 y, make_vector_t<int, vector_size<half3>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<half3>(x, y, quo); }
__ALWAYS_INLINE auto remquo(half4 x, half4 y, make_vector_t<int, vector_size<half4>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<half4>(x, y, quo); }
__ALWAYS_INLINE auto remquo(half8 x, half8 y, make_vector_t<int, vector_size<half8>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<half8>(x, y, quo); }
__ALWAYS_INLINE auto remquo(half16 x, half16 y, make_vector_t<int, vector_size<half16>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<half16>(x, y, quo); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto remquo(double x, double y, make_vector_t<int, vector_size<double>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<double>(x, y, quo); }
__ALWAYS_INLINE auto remquo(double2 x, double2 y, make_vector_t<int, vector_size<double2>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<double2>(x, y, quo); }
__ALWAYS_INLINE auto remquo(double3 x, double3 y, make_vector_t<int, vector_size<double3>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<double3>(x, y, quo); }
__ALWAYS_INLINE auto remquo(double4 x, double4 y, make_vector_t<int, vector_size<double4>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<double4>(x, y, quo); }
__ALWAYS_INLINE auto remquo(double8 x, double8 y, make_vector_t<int, vector_size<double8>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<double8>(x, y, quo); }
__ALWAYS_INLINE auto remquo(double16 x, double16 y, make_vector_t<int, vector_size<double16>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<double16>(x, y, quo); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto remquo(float x, float y, make_vector_t<int, vector_size<float>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<float>(x, y, quo); }
__ALWAYS_INLINE auto remquo(float2 x, float2 y, make_vector_t<int, vector_size<float2>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<float2>(x, y, quo); }
__ALWAYS_INLINE auto remquo(float3 x, float3 y, make_vector_t<int, vector_size<float3>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<float3>(x, y, quo); }
__ALWAYS_INLINE auto remquo(float4 x, float4 y, make_vector_t<int, vector_size<float4>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<float4>(x, y, quo); }
__ALWAYS_INLINE auto remquo(float8 x, float8 y, make_vector_t<int, vector_size<float8>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<float8>(x, y, quo); }
__ALWAYS_INLINE auto remquo(float16 x, float16 y, make_vector_t<int, vector_size<float16>::value>* quo) __NOEXCEPT { return __spirv::__make_remquo_call<float16>(x, y, quo); }


/// \brief x^(1/y)
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto rootn(half x, make_vector_t<int, vector_size<half>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<half>(x, y); }
__ALWAYS_INLINE auto rootn(half2 x, make_vector_t<int, vector_size<half2>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<half2>(x, y); }
__ALWAYS_INLINE auto rootn(half3 x, make_vector_t<int, vector_size<half3>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<half3>(x, y); }
__ALWAYS_INLINE auto rootn(half4 x, make_vector_t<int, vector_size<half4>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<half4>(x, y); }
__ALWAYS_INLINE auto rootn(half8 x, make_vector_t<int, vector_size<half8>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<half8>(x, y); }
__ALWAYS_INLINE auto rootn(half16 x, make_vector_t<int, vector_size<half16>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<half16>(x, y); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto rootn(double x, make_vector_t<int, vector_size<double>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<double>(x, y); }
__ALWAYS_INLINE auto rootn(double2 x, make_vector_t<int, vector_size<double2>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<double2>(x, y); }
__ALWAYS_INLINE auto rootn(double3 x, make_vector_t<int, vector_size<double3>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<double3>(x, y); }
__ALWAYS_INLINE auto rootn(double4 x, make_vector_t<int, vector_size<double4>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<double4>(x, y); }
__ALWAYS_INLINE auto rootn(double8 x, make_vector_t<int, vector_size<double8>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<double8>(x, y); }
__ALWAYS_INLINE auto rootn(double16 x, make_vector_t<int, vector_size<double16>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<double16>(x, y); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto rootn(float x, make_vector_t<int, vector_size<float>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<float>(x, y); }
__ALWAYS_INLINE auto rootn(float2 x, make_vector_t<int, vector_size<float2>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<float2>(x, y); }
__ALWAYS_INLINE auto rootn(float3 x, make_vector_t<int, vector_size<float3>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<float3>(x, y); }
__ALWAYS_INLINE auto rootn(float4 x, make_vector_t<int, vector_size<float4>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<float4>(x, y); }
__ALWAYS_INLINE auto rootn(float8 x, make_vector_t<int, vector_size<float8>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<float8>(x, y); }
__ALWAYS_INLINE auto rootn(float16 x, make_vector_t<int, vector_size<float16>::value> y) __NOEXCEPT { return __spirv::__make_rootn_call<float16>(x, y); }


/// \brief computes sine and cosine of x, first is returned and second stored in cosval
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto sincos(half x, half* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<half>(x, cosval); }
__ALWAYS_INLINE auto sincos(half2 x, half2* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<half2>(x, cosval); }
__ALWAYS_INLINE auto sincos(half3 x, half3* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<half3>(x, cosval); }
__ALWAYS_INLINE auto sincos(half4 x, half4* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<half4>(x, cosval); }
__ALWAYS_INLINE auto sincos(half8 x, half8* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<half8>(x, cosval); }
__ALWAYS_INLINE auto sincos(half16 x, half16* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<half16>(x, cosval); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto sincos(double x, double* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<double>(x, cosval); }
__ALWAYS_INLINE auto sincos(double2 x, double2* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<double2>(x, cosval); }
__ALWAYS_INLINE auto sincos(double3 x, double3* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<double3>(x, cosval); }
__ALWAYS_INLINE auto sincos(double4 x, double4* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<double4>(x, cosval); }
__ALWAYS_INLINE auto sincos(double8 x, double8* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<double8>(x, cosval); }
__ALWAYS_INLINE auto sincos(double16 x, double16* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<double16>(x, cosval); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto sincos(float x, float* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<float>(x, cosval); }
__ALWAYS_INLINE auto sincos(float2 x, float2* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<float2>(x, cosval); }
__ALWAYS_INLINE auto sincos(float3 x, float3* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<float3>(x, cosval); }
__ALWAYS_INLINE auto sincos(float4 x, float4* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<float4>(x, cosval); }
__ALWAYS_INLINE auto sincos(float8 x, float8* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<float8>(x, cosval); }
__ALWAYS_INLINE auto sincos(float16 x, float16* cosval) __NOEXCEPT { return __spirv::__make_sincos_call<float16>(x, cosval); }


/// \brief x * 2^k
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto ldexp(half x, make_vector_t<int, vector_size<half>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<half>(x, k); }
__ALWAYS_INLINE auto ldexp(half2 x, make_vector_t<int, vector_size<half2>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<half2>(x, k); }
__ALWAYS_INLINE auto ldexp(half3 x, make_vector_t<int, vector_size<half3>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<half3>(x, k); }
__ALWAYS_INLINE auto ldexp(half4 x, make_vector_t<int, vector_size<half4>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<half4>(x, k); }
__ALWAYS_INLINE auto ldexp(half8 x, make_vector_t<int, vector_size<half8>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<half8>(x, k); }
__ALWAYS_INLINE auto ldexp(half16 x, make_vector_t<int, vector_size<half16>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<half16>(x, k); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto ldexp(double x, make_vector_t<int, vector_size<double>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<double>(x, k); }
__ALWAYS_INLINE auto ldexp(double2 x, make_vector_t<int, vector_size<double2>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<double2>(x, k); }
__ALWAYS_INLINE auto ldexp(double3 x, make_vector_t<int, vector_size<double3>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<double3>(x, k); }
__ALWAYS_INLINE auto ldexp(double4 x, make_vector_t<int, vector_size<double4>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<double4>(x, k); }
__ALWAYS_INLINE auto ldexp(double8 x, make_vector_t<int, vector_size<double8>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<double8>(x, k); }
__ALWAYS_INLINE auto ldexp(double16 x, make_vector_t<int, vector_size<double16>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<double16>(x, k); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto ldexp(float x, make_vector_t<int, vector_size<float>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<float>(x, k); }
__ALWAYS_INLINE auto ldexp(float2 x, make_vector_t<int, vector_size<float2>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<float2>(x, k); }
__ALWAYS_INLINE auto ldexp(float3 x, make_vector_t<int, vector_size<float3>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<float3>(x, k); }
__ALWAYS_INLINE auto ldexp(float4 x, make_vector_t<int, vector_size<float4>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<float4>(x, k); }
__ALWAYS_INLINE auto ldexp(float8 x, make_vector_t<int, vector_size<float8>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<float8>(x, k); }
__ALWAYS_INLINE auto ldexp(float16 x, make_vector_t<int, vector_size<float16>::value> k) __NOEXCEPT { return __spirv::__make_ldexp_call<float16>(x, k); }


/// \brief x * 2^k
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto ldexp(half2 x, int k) __NOEXCEPT { return __spirv::__make_ldexp_call<half2>(x, (make_vector_t<int, vector_size<decltype(x)>::value>)k); }
__ALWAYS_INLINE auto ldexp(half3 x, int k) __NOEXCEPT { return __spirv::__make_ldexp_call<half3>(x, (make_vector_t<int, vector_size<decltype(x)>::value>)k); }
__ALWAYS_INLINE auto ldexp(half4 x, int k) __NOEXCEPT { return __spirv::__make_ldexp_call<half4>(x, (make_vector_t<int, vector_size<decltype(x)>::value>)k); }
__ALWAYS_INLINE auto ldexp(half8 x, int k) __NOEXCEPT { return __spirv::__make_ldexp_call<half8>(x, (make_vector_t<int, vector_size<decltype(x)>::value>)k); }
__ALWAYS_INLINE auto ldexp(half16 x, int k) __NOEXCEPT { return __spirv::__make_ldexp_call<half16>(x, (make_vector_t<int, vector_size<decltype(x)>::value>)k); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto ldexp(double2 x, int k) __NOEXCEPT { return __spirv::__make_ldexp_call<double2>(x, (make_vector_t<int, vector_size<decltype(x)>::value>)k); }
__ALWAYS_INLINE auto ldexp(double3 x, int k) __NOEXCEPT { return __spirv::__make_ldexp_call<double3>(x, (make_vector_t<int, vector_size<decltype(x)>::value>)k); }
__ALWAYS_INLINE auto ldexp(double4 x, int k) __NOEXCEPT { return __spirv::__make_ldexp_call<double4>(x, (make_vector_t<int, vector_size<decltype(x)>::value>)k); }
__ALWAYS_INLINE auto ldexp(double8 x, int k) __NOEXCEPT { return __spirv::__make_ldexp_call<double8>(x, (make_vector_t<int, vector_size<decltype(x)>::value>)k); }
__ALWAYS_INLINE auto ldexp(double16 x, int k) __NOEXCEPT { return __spirv::__make_ldexp_call<double16>(x, (make_vector_t<int, vector_size<decltype(x)>::value>)k); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto ldexp(float2 x, int k) __NOEXCEPT { return __spirv::__make_ldexp_call<float2>(x, (make_vector_t<int, vector_size<decltype(x)>::value>)k); }
__ALWAYS_INLINE auto ldexp(float3 x, int k) __NOEXCEPT { return __spirv::__make_ldexp_call<float3>(x, (make_vector_t<int, vector_size<decltype(x)>::value>)k); }
__ALWAYS_INLINE auto ldexp(float4 x, int k) __NOEXCEPT { return __spirv::__make_ldexp_call<float4>(x, (make_vector_t<int, vector_size<decltype(x)>::value>)k); }
__ALWAYS_INLINE auto ldexp(float8 x, int k) __NOEXCEPT { return __spirv::__make_ldexp_call<float8>(x, (make_vector_t<int, vector_size<decltype(x)>::value>)k); }
__ALWAYS_INLINE auto ldexp(float16 x, int k) __NOEXCEPT { return __spirv::__make_ldexp_call<float16>(x, (make_vector_t<int, vector_size<decltype(x)>::value>)k); }


/// \brief returns exponent as an integer value
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto ilogb(half x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<half>::value>>(x); }
__ALWAYS_INLINE auto ilogb(half2 x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<half2>::value>>(x); }
__ALWAYS_INLINE auto ilogb(half3 x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<half3>::value>>(x); }
__ALWAYS_INLINE auto ilogb(half4 x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<half4>::value>>(x); }
__ALWAYS_INLINE auto ilogb(half8 x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<half8>::value>>(x); }
__ALWAYS_INLINE auto ilogb(half16 x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<half16>::value>>(x); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto ilogb(double x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<double>::value>>(x); }
__ALWAYS_INLINE auto ilogb(double2 x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<double2>::value>>(x); }
__ALWAYS_INLINE auto ilogb(double3 x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<double3>::value>>(x); }
__ALWAYS_INLINE auto ilogb(double4 x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<double4>::value>>(x); }
__ALWAYS_INLINE auto ilogb(double8 x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<double8>::value>>(x); }
__ALWAYS_INLINE auto ilogb(double16 x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<double16>::value>>(x); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto ilogb(float x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<float>::value>>(x); }
__ALWAYS_INLINE auto ilogb(float2 x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<float2>::value>>(x); }
__ALWAYS_INLINE auto ilogb(float3 x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<float3>::value>>(x); }
__ALWAYS_INLINE auto ilogb(float4 x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<float4>::value>>(x); }
__ALWAYS_INLINE auto ilogb(float8 x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<float8>::value>>(x); }
__ALWAYS_INLINE auto ilogb(float16 x) __NOEXCEPT { return __spirv::__make_ilogb_call<make_vector_t<int, vector_size<float16>::value>>(x); }


namespace __details
{
    template <typename T> struct __fpt_to_int { static_assert(__always_false<T>::value, "invalid specialization"); };
#ifdef cl_khr_fp16
    template <> struct __fpt_to_int<half> { typedef ushort type; };
#endif //cl_khr_fp16
    template <> struct __fpt_to_int<float> { typedef uint type; };
#ifdef cl_khr_fp64
    template <> struct __fpt_to_int<double> { typedef ulong type; };
#endif //cl_khr_fp64


    template <typename T> struct __fp2int { typedef make_vector_t<typename __fpt_to_int<remove_cv_t<vector_element_t<T>>>::type, vector_size<T>::value> type; };
    template <typename T> using __fp2int_t = typename __fp2int<T>::type;
}

/// \brief returns nan
///
#ifdef cl_khr_fp16
__ALWAYS_INLINE auto nan(__details::__fp2int_t<half> nancode) __NOEXCEPT { return __spirv::__make_nan_call<half>(nancode); }
__ALWAYS_INLINE auto nan(__details::__fp2int_t<half2> nancode) __NOEXCEPT { return __spirv::__make_nan_call<half2>(nancode); }
__ALWAYS_INLINE auto nan(__details::__fp2int_t<half3> nancode) __NOEXCEPT { return __spirv::__make_nan_call<half3>(nancode); }
__ALWAYS_INLINE auto nan(__details::__fp2int_t<half4> nancode) __NOEXCEPT { return __spirv::__make_nan_call<half4>(nancode); }
__ALWAYS_INLINE auto nan(__details::__fp2int_t<half8> nancode) __NOEXCEPT { return __spirv::__make_nan_call<half8>(nancode); }
__ALWAYS_INLINE auto nan(__details::__fp2int_t<half16> nancode) __NOEXCEPT { return __spirv::__make_nan_call<half16>(nancode); }
#endif //cl_khr_fp16
#ifdef cl_khr_fp64
__ALWAYS_INLINE auto nan(__details::__fp2int_t<double> nancode) __NOEXCEPT { return __spirv::__make_nan_call<double>(nancode); }
__ALWAYS_INLINE auto nan(__details::__fp2int_t<double2> nancode) __NOEXCEPT { return __spirv::__make_nan_call<double2>(nancode); }
__ALWAYS_INLINE auto nan(__details::__fp2int_t<double3> nancode) __NOEXCEPT { return __spirv::__make_nan_call<double3>(nancode); }
__ALWAYS_INLINE auto nan(__details::__fp2int_t<double4> nancode) __NOEXCEPT { return __spirv::__make_nan_call<double4>(nancode); }
__ALWAYS_INLINE auto nan(__details::__fp2int_t<double8> nancode) __NOEXCEPT { return __spirv::__make_nan_call<double8>(nancode); }
__ALWAYS_INLINE auto nan(__details::__fp2int_t<double16> nancode) __NOEXCEPT { return __spirv::__make_nan_call<double16>(nancode); }
#endif //cl_khr_fp64
__ALWAYS_INLINE auto nan(__details::__fp2int_t<float> nancode) __NOEXCEPT { return __spirv::__make_nan_call<float>(nancode); }
__ALWAYS_INLINE auto nan(__details::__fp2int_t<float2> nancode) __NOEXCEPT { return __spirv::__make_nan_call<float2>(nancode); }
__ALWAYS_INLINE auto nan(__details::__fp2int_t<float3> nancode) __NOEXCEPT { return __spirv::__make_nan_call<float3>(nancode); }
__ALWAYS_INLINE auto nan(__details::__fp2int_t<float4> nancode) __NOEXCEPT { return __spirv::__make_nan_call<float4>(nancode); }
__ALWAYS_INLINE auto nan(__details::__fp2int_t<float8> nancode) __NOEXCEPT { return __spirv::__make_nan_call<float8>(nancode); }
__ALWAYS_INLINE auto nan(__details::__fp2int_t<float16> nancode) __NOEXCEPT { return __spirv::__make_nan_call<float16>(nancode); }


namespace native_math
{
__ALWAYS_INLINE auto cos(float x) __NOEXCEPT { return __spirv::__make_native_cos_call<float>(x); }
__ALWAYS_INLINE auto cos(float2 x) __NOEXCEPT { return __spirv::__make_native_cos_call<float2>(x); }
__ALWAYS_INLINE auto cos(float3 x) __NOEXCEPT { return __spirv::__make_native_cos_call<float3>(x); }
__ALWAYS_INLINE auto cos(float4 x) __NOEXCEPT { return __spirv::__make_native_cos_call<float4>(x); }
__ALWAYS_INLINE auto cos(float8 x) __NOEXCEPT { return __spirv::__make_native_cos_call<float8>(x); }
__ALWAYS_INLINE auto cos(float16 x) __NOEXCEPT { return __spirv::__make_native_cos_call<float16>(x); }

__ALWAYS_INLINE auto exp(float x) __NOEXCEPT { return __spirv::__make_native_exp_call<float>(x); }
__ALWAYS_INLINE auto exp(float2 x) __NOEXCEPT { return __spirv::__make_native_exp_call<float2>(x); }
__ALWAYS_INLINE auto exp(float3 x) __NOEXCEPT { return __spirv::__make_native_exp_call<float3>(x); }
__ALWAYS_INLINE auto exp(float4 x) __NOEXCEPT { return __spirv::__make_native_exp_call<float4>(x); }
__ALWAYS_INLINE auto exp(float8 x) __NOEXCEPT { return __spirv::__make_native_exp_call<float8>(x); }
__ALWAYS_INLINE auto exp(float16 x) __NOEXCEPT { return __spirv::__make_native_exp_call<float16>(x); }

__ALWAYS_INLINE auto exp2(float x) __NOEXCEPT { return __spirv::__make_native_exp2_call<float>(x); }
__ALWAYS_INLINE auto exp2(float2 x) __NOEXCEPT { return __spirv::__make_native_exp2_call<float2>(x); }
__ALWAYS_INLINE auto exp2(float3 x) __NOEXCEPT { return __spirv::__make_native_exp2_call<float3>(x); }
__ALWAYS_INLINE auto exp2(float4 x) __NOEXCEPT { return __spirv::__make_native_exp2_call<float4>(x); }
__ALWAYS_INLINE auto exp2(float8 x) __NOEXCEPT { return __spirv::__make_native_exp2_call<float8>(x); }
__ALWAYS_INLINE auto exp2(float16 x) __NOEXCEPT { return __spirv::__make_native_exp2_call<float16>(x); }

__ALWAYS_INLINE auto exp10(float x) __NOEXCEPT { return __spirv::__make_native_exp10_call<float>(x); }
__ALWAYS_INLINE auto exp10(float2 x) __NOEXCEPT { return __spirv::__make_native_exp10_call<float2>(x); }
__ALWAYS_INLINE auto exp10(float3 x) __NOEXCEPT { return __spirv::__make_native_exp10_call<float3>(x); }
__ALWAYS_INLINE auto exp10(float4 x) __NOEXCEPT { return __spirv::__make_native_exp10_call<float4>(x); }
__ALWAYS_INLINE auto exp10(float8 x) __NOEXCEPT { return __spirv::__make_native_exp10_call<float8>(x); }
__ALWAYS_INLINE auto exp10(float16 x) __NOEXCEPT { return __spirv::__make_native_exp10_call<float16>(x); }

__ALWAYS_INLINE auto log(float x) __NOEXCEPT { return __spirv::__make_native_log_call<float>(x); }
__ALWAYS_INLINE auto log(float2 x) __NOEXCEPT { return __spirv::__make_native_log_call<float2>(x); }
__ALWAYS_INLINE auto log(float3 x) __NOEXCEPT { return __spirv::__make_native_log_call<float3>(x); }
__ALWAYS_INLINE auto log(float4 x) __NOEXCEPT { return __spirv::__make_native_log_call<float4>(x); }
__ALWAYS_INLINE auto log(float8 x) __NOEXCEPT { return __spirv::__make_native_log_call<float8>(x); }
__ALWAYS_INLINE auto log(float16 x) __NOEXCEPT { return __spirv::__make_native_log_call<float16>(x); }

__ALWAYS_INLINE auto log2(float x) __NOEXCEPT { return __spirv::__make_native_log2_call<float>(x); }
__ALWAYS_INLINE auto log2(float2 x) __NOEXCEPT { return __spirv::__make_native_log2_call<float2>(x); }
__ALWAYS_INLINE auto log2(float3 x) __NOEXCEPT { return __spirv::__make_native_log2_call<float3>(x); }
__ALWAYS_INLINE auto log2(float4 x) __NOEXCEPT { return __spirv::__make_native_log2_call<float4>(x); }
__ALWAYS_INLINE auto log2(float8 x) __NOEXCEPT { return __spirv::__make_native_log2_call<float8>(x); }
__ALWAYS_INLINE auto log2(float16 x) __NOEXCEPT { return __spirv::__make_native_log2_call<float16>(x); }

__ALWAYS_INLINE auto log10(float x) __NOEXCEPT { return __spirv::__make_native_log10_call<float>(x); }
__ALWAYS_INLINE auto log10(float2 x) __NOEXCEPT { return __spirv::__make_native_log10_call<float2>(x); }
__ALWAYS_INLINE auto log10(float3 x) __NOEXCEPT { return __spirv::__make_native_log10_call<float3>(x); }
__ALWAYS_INLINE auto log10(float4 x) __NOEXCEPT { return __spirv::__make_native_log10_call<float4>(x); }
__ALWAYS_INLINE auto log10(float8 x) __NOEXCEPT { return __spirv::__make_native_log10_call<float8>(x); }
__ALWAYS_INLINE auto log10(float16 x) __NOEXCEPT { return __spirv::__make_native_log10_call<float16>(x); }

__ALWAYS_INLINE auto recip(float x) __NOEXCEPT { return __spirv::__make_native_recip_call<float>(x); }
__ALWAYS_INLINE auto recip(float2 x) __NOEXCEPT { return __spirv::__make_native_recip_call<float2>(x); }
__ALWAYS_INLINE auto recip(float3 x) __NOEXCEPT { return __spirv::__make_native_recip_call<float3>(x); }
__ALWAYS_INLINE auto recip(float4 x) __NOEXCEPT { return __spirv::__make_native_recip_call<float4>(x); }
__ALWAYS_INLINE auto recip(float8 x) __NOEXCEPT { return __spirv::__make_native_recip_call<float8>(x); }
__ALWAYS_INLINE auto recip(float16 x) __NOEXCEPT { return __spirv::__make_native_recip_call<float16>(x); }

__ALWAYS_INLINE auto rsqrt(float x) __NOEXCEPT { return __spirv::__make_native_rsqrt_call<float>(x); }
__ALWAYS_INLINE auto rsqrt(float2 x) __NOEXCEPT { return __spirv::__make_native_rsqrt_call<float2>(x); }
__ALWAYS_INLINE auto rsqrt(float3 x) __NOEXCEPT { return __spirv::__make_native_rsqrt_call<float3>(x); }
__ALWAYS_INLINE auto rsqrt(float4 x) __NOEXCEPT { return __spirv::__make_native_rsqrt_call<float4>(x); }
__ALWAYS_INLINE auto rsqrt(float8 x) __NOEXCEPT { return __spirv::__make_native_rsqrt_call<float8>(x); }
__ALWAYS_INLINE auto rsqrt(float16 x) __NOEXCEPT { return __spirv::__make_native_rsqrt_call<float16>(x); }

__ALWAYS_INLINE auto sin(float x) __NOEXCEPT { return __spirv::__make_native_sin_call<float>(x); }
__ALWAYS_INLINE auto sin(float2 x) __NOEXCEPT { return __spirv::__make_native_sin_call<float2>(x); }
__ALWAYS_INLINE auto sin(float3 x) __NOEXCEPT { return __spirv::__make_native_sin_call<float3>(x); }
__ALWAYS_INLINE auto sin(float4 x) __NOEXCEPT { return __spirv::__make_native_sin_call<float4>(x); }
__ALWAYS_INLINE auto sin(float8 x) __NOEXCEPT { return __spirv::__make_native_sin_call<float8>(x); }
__ALWAYS_INLINE auto sin(float16 x) __NOEXCEPT { return __spirv::__make_native_sin_call<float16>(x); }

__ALWAYS_INLINE auto sqrt(float x) __NOEXCEPT { return __spirv::__make_native_sqrt_call<float>(x); }
__ALWAYS_INLINE auto sqrt(float2 x) __NOEXCEPT { return __spirv::__make_native_sqrt_call<float2>(x); }
__ALWAYS_INLINE auto sqrt(float3 x) __NOEXCEPT { return __spirv::__make_native_sqrt_call<float3>(x); }
__ALWAYS_INLINE auto sqrt(float4 x) __NOEXCEPT { return __spirv::__make_native_sqrt_call<float4>(x); }
__ALWAYS_INLINE auto sqrt(float8 x) __NOEXCEPT { return __spirv::__make_native_sqrt_call<float8>(x); }
__ALWAYS_INLINE auto sqrt(float16 x) __NOEXCEPT { return __spirv::__make_native_sqrt_call<float16>(x); }

__ALWAYS_INLINE auto tan(float x) __NOEXCEPT { return __spirv::__make_native_tan_call<float>(x); }
__ALWAYS_INLINE auto tan(float2 x) __NOEXCEPT { return __spirv::__make_native_tan_call<float2>(x); }
__ALWAYS_INLINE auto tan(float3 x) __NOEXCEPT { return __spirv::__make_native_tan_call<float3>(x); }
__ALWAYS_INLINE auto tan(float4 x) __NOEXCEPT { return __spirv::__make_native_tan_call<float4>(x); }
__ALWAYS_INLINE auto tan(float8 x) __NOEXCEPT { return __spirv::__make_native_tan_call<float8>(x); }
__ALWAYS_INLINE auto tan(float16 x) __NOEXCEPT { return __spirv::__make_native_tan_call<float16>(x); }

__ALWAYS_INLINE auto divide(float x, float y) __NOEXCEPT { return __spirv::__make_native_divide_call<float>(x, y); }
__ALWAYS_INLINE auto divide(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_native_divide_call<float2>(x, y); }
__ALWAYS_INLINE auto divide(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_native_divide_call<float3>(x, y); }
__ALWAYS_INLINE auto divide(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_native_divide_call<float4>(x, y); }
__ALWAYS_INLINE auto divide(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_native_divide_call<float8>(x, y); }
__ALWAYS_INLINE auto divide(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_native_divide_call<float16>(x, y); }

__ALWAYS_INLINE auto powr(float x, float y) __NOEXCEPT { return __spirv::__make_native_powr_call<float>(x, y); }
__ALWAYS_INLINE auto powr(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_native_powr_call<float2>(x, y); }
__ALWAYS_INLINE auto powr(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_native_powr_call<float3>(x, y); }
__ALWAYS_INLINE auto powr(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_native_powr_call<float4>(x, y); }
__ALWAYS_INLINE auto powr(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_native_powr_call<float8>(x, y); }
__ALWAYS_INLINE auto powr(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_native_powr_call<float16>(x, y); }
}

namespace half_math
{
__ALWAYS_INLINE auto cos(float x) __NOEXCEPT { return __spirv::__make_half_cos_call<float>(x); }
__ALWAYS_INLINE auto cos(float2 x) __NOEXCEPT { return __spirv::__make_half_cos_call<float2>(x); }
__ALWAYS_INLINE auto cos(float3 x) __NOEXCEPT { return __spirv::__make_half_cos_call<float3>(x); }
__ALWAYS_INLINE auto cos(float4 x) __NOEXCEPT { return __spirv::__make_half_cos_call<float4>(x); }
__ALWAYS_INLINE auto cos(float8 x) __NOEXCEPT { return __spirv::__make_half_cos_call<float8>(x); }
__ALWAYS_INLINE auto cos(float16 x) __NOEXCEPT { return __spirv::__make_half_cos_call<float16>(x); }

__ALWAYS_INLINE auto exp(float x) __NOEXCEPT { return __spirv::__make_half_exp_call<float>(x); }
__ALWAYS_INLINE auto exp(float2 x) __NOEXCEPT { return __spirv::__make_half_exp_call<float2>(x); }
__ALWAYS_INLINE auto exp(float3 x) __NOEXCEPT { return __spirv::__make_half_exp_call<float3>(x); }
__ALWAYS_INLINE auto exp(float4 x) __NOEXCEPT { return __spirv::__make_half_exp_call<float4>(x); }
__ALWAYS_INLINE auto exp(float8 x) __NOEXCEPT { return __spirv::__make_half_exp_call<float8>(x); }
__ALWAYS_INLINE auto exp(float16 x) __NOEXCEPT { return __spirv::__make_half_exp_call<float16>(x); }

__ALWAYS_INLINE auto exp2(float x) __NOEXCEPT { return __spirv::__make_half_exp2_call<float>(x); }
__ALWAYS_INLINE auto exp2(float2 x) __NOEXCEPT { return __spirv::__make_half_exp2_call<float2>(x); }
__ALWAYS_INLINE auto exp2(float3 x) __NOEXCEPT { return __spirv::__make_half_exp2_call<float3>(x); }
__ALWAYS_INLINE auto exp2(float4 x) __NOEXCEPT { return __spirv::__make_half_exp2_call<float4>(x); }
__ALWAYS_INLINE auto exp2(float8 x) __NOEXCEPT { return __spirv::__make_half_exp2_call<float8>(x); }
__ALWAYS_INLINE auto exp2(float16 x) __NOEXCEPT { return __spirv::__make_half_exp2_call<float16>(x); }

__ALWAYS_INLINE auto exp10(float x) __NOEXCEPT { return __spirv::__make_half_exp10_call<float>(x); }
__ALWAYS_INLINE auto exp10(float2 x) __NOEXCEPT { return __spirv::__make_half_exp10_call<float2>(x); }
__ALWAYS_INLINE auto exp10(float3 x) __NOEXCEPT { return __spirv::__make_half_exp10_call<float3>(x); }
__ALWAYS_INLINE auto exp10(float4 x) __NOEXCEPT { return __spirv::__make_half_exp10_call<float4>(x); }
__ALWAYS_INLINE auto exp10(float8 x) __NOEXCEPT { return __spirv::__make_half_exp10_call<float8>(x); }
__ALWAYS_INLINE auto exp10(float16 x) __NOEXCEPT { return __spirv::__make_half_exp10_call<float16>(x); }

__ALWAYS_INLINE auto log(float x) __NOEXCEPT { return __spirv::__make_half_log_call<float>(x); }
__ALWAYS_INLINE auto log(float2 x) __NOEXCEPT { return __spirv::__make_half_log_call<float2>(x); }
__ALWAYS_INLINE auto log(float3 x) __NOEXCEPT { return __spirv::__make_half_log_call<float3>(x); }
__ALWAYS_INLINE auto log(float4 x) __NOEXCEPT { return __spirv::__make_half_log_call<float4>(x); }
__ALWAYS_INLINE auto log(float8 x) __NOEXCEPT { return __spirv::__make_half_log_call<float8>(x); }
__ALWAYS_INLINE auto log(float16 x) __NOEXCEPT { return __spirv::__make_half_log_call<float16>(x); }

__ALWAYS_INLINE auto log2(float x) __NOEXCEPT { return __spirv::__make_half_log2_call<float>(x); }
__ALWAYS_INLINE auto log2(float2 x) __NOEXCEPT { return __spirv::__make_half_log2_call<float2>(x); }
__ALWAYS_INLINE auto log2(float3 x) __NOEXCEPT { return __spirv::__make_half_log2_call<float3>(x); }
__ALWAYS_INLINE auto log2(float4 x) __NOEXCEPT { return __spirv::__make_half_log2_call<float4>(x); }
__ALWAYS_INLINE auto log2(float8 x) __NOEXCEPT { return __spirv::__make_half_log2_call<float8>(x); }
__ALWAYS_INLINE auto log2(float16 x) __NOEXCEPT { return __spirv::__make_half_log2_call<float16>(x); }

__ALWAYS_INLINE auto log10(float x) __NOEXCEPT { return __spirv::__make_half_log10_call<float>(x); }
__ALWAYS_INLINE auto log10(float2 x) __NOEXCEPT { return __spirv::__make_half_log10_call<float2>(x); }
__ALWAYS_INLINE auto log10(float3 x) __NOEXCEPT { return __spirv::__make_half_log10_call<float3>(x); }
__ALWAYS_INLINE auto log10(float4 x) __NOEXCEPT { return __spirv::__make_half_log10_call<float4>(x); }
__ALWAYS_INLINE auto log10(float8 x) __NOEXCEPT { return __spirv::__make_half_log10_call<float8>(x); }
__ALWAYS_INLINE auto log10(float16 x) __NOEXCEPT { return __spirv::__make_half_log10_call<float16>(x); }

__ALWAYS_INLINE auto recip(float x) __NOEXCEPT { return __spirv::__make_half_recip_call<float>(x); }
__ALWAYS_INLINE auto recip(float2 x) __NOEXCEPT { return __spirv::__make_half_recip_call<float2>(x); }
__ALWAYS_INLINE auto recip(float3 x) __NOEXCEPT { return __spirv::__make_half_recip_call<float3>(x); }
__ALWAYS_INLINE auto recip(float4 x) __NOEXCEPT { return __spirv::__make_half_recip_call<float4>(x); }
__ALWAYS_INLINE auto recip(float8 x) __NOEXCEPT { return __spirv::__make_half_recip_call<float8>(x); }
__ALWAYS_INLINE auto recip(float16 x) __NOEXCEPT { return __spirv::__make_half_recip_call<float16>(x); }

__ALWAYS_INLINE auto rsqrt(float x) __NOEXCEPT { return __spirv::__make_half_rsqrt_call<float>(x); }
__ALWAYS_INLINE auto rsqrt(float2 x) __NOEXCEPT { return __spirv::__make_half_rsqrt_call<float2>(x); }
__ALWAYS_INLINE auto rsqrt(float3 x) __NOEXCEPT { return __spirv::__make_half_rsqrt_call<float3>(x); }
__ALWAYS_INLINE auto rsqrt(float4 x) __NOEXCEPT { return __spirv::__make_half_rsqrt_call<float4>(x); }
__ALWAYS_INLINE auto rsqrt(float8 x) __NOEXCEPT { return __spirv::__make_half_rsqrt_call<float8>(x); }
__ALWAYS_INLINE auto rsqrt(float16 x) __NOEXCEPT { return __spirv::__make_half_rsqrt_call<float16>(x); }

__ALWAYS_INLINE auto sin(float x) __NOEXCEPT { return __spirv::__make_half_sin_call<float>(x); }
__ALWAYS_INLINE auto sin(float2 x) __NOEXCEPT { return __spirv::__make_half_sin_call<float2>(x); }
__ALWAYS_INLINE auto sin(float3 x) __NOEXCEPT { return __spirv::__make_half_sin_call<float3>(x); }
__ALWAYS_INLINE auto sin(float4 x) __NOEXCEPT { return __spirv::__make_half_sin_call<float4>(x); }
__ALWAYS_INLINE auto sin(float8 x) __NOEXCEPT { return __spirv::__make_half_sin_call<float8>(x); }
__ALWAYS_INLINE auto sin(float16 x) __NOEXCEPT { return __spirv::__make_half_sin_call<float16>(x); }

__ALWAYS_INLINE auto sqrt(float x) __NOEXCEPT { return __spirv::__make_half_sqrt_call<float>(x); }
__ALWAYS_INLINE auto sqrt(float2 x) __NOEXCEPT { return __spirv::__make_half_sqrt_call<float2>(x); }
__ALWAYS_INLINE auto sqrt(float3 x) __NOEXCEPT { return __spirv::__make_half_sqrt_call<float3>(x); }
__ALWAYS_INLINE auto sqrt(float4 x) __NOEXCEPT { return __spirv::__make_half_sqrt_call<float4>(x); }
__ALWAYS_INLINE auto sqrt(float8 x) __NOEXCEPT { return __spirv::__make_half_sqrt_call<float8>(x); }
__ALWAYS_INLINE auto sqrt(float16 x) __NOEXCEPT { return __spirv::__make_half_sqrt_call<float16>(x); }

__ALWAYS_INLINE auto tan(float x) __NOEXCEPT { return __spirv::__make_half_tan_call<float>(x); }
__ALWAYS_INLINE auto tan(float2 x) __NOEXCEPT { return __spirv::__make_half_tan_call<float2>(x); }
__ALWAYS_INLINE auto tan(float3 x) __NOEXCEPT { return __spirv::__make_half_tan_call<float3>(x); }
__ALWAYS_INLINE auto tan(float4 x) __NOEXCEPT { return __spirv::__make_half_tan_call<float4>(x); }
__ALWAYS_INLINE auto tan(float8 x) __NOEXCEPT { return __spirv::__make_half_tan_call<float8>(x); }
__ALWAYS_INLINE auto tan(float16 x) __NOEXCEPT { return __spirv::__make_half_tan_call<float16>(x); }

__ALWAYS_INLINE auto divide(float x, float y) __NOEXCEPT { return __spirv::__make_half_divide_call<float>(x, y); }
__ALWAYS_INLINE auto divide(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_half_divide_call<float2>(x, y); }
__ALWAYS_INLINE auto divide(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_half_divide_call<float3>(x, y); }
__ALWAYS_INLINE auto divide(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_half_divide_call<float4>(x, y); }
__ALWAYS_INLINE auto divide(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_half_divide_call<float8>(x, y); }
__ALWAYS_INLINE auto divide(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_half_divide_call<float16>(x, y); }

__ALWAYS_INLINE auto powr(float x, float y) __NOEXCEPT { return __spirv::__make_half_powr_call<float>(x, y); }
__ALWAYS_INLINE auto powr(float2 x, float2 y) __NOEXCEPT { return __spirv::__make_half_powr_call<float2>(x, y); }
__ALWAYS_INLINE auto powr(float3 x, float3 y) __NOEXCEPT { return __spirv::__make_half_powr_call<float3>(x, y); }
__ALWAYS_INLINE auto powr(float4 x, float4 y) __NOEXCEPT { return __spirv::__make_half_powr_call<float4>(x, y); }
__ALWAYS_INLINE auto powr(float8 x, float8 y) __NOEXCEPT { return __spirv::__make_half_powr_call<float8>(x, y); }
__ALWAYS_INLINE auto powr(float16 x, float16 y) __NOEXCEPT { return __spirv::__make_half_powr_call<float16>(x, y); }
}

}
