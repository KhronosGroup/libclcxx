// RUN: %clang_cc1 %s -triple spir-unknown-unknown -cl-std=c++ -cl-fp64-enable -cl-fp16-enable -fsyntax-only -pedantic  -verify
// expected-no-diagnostics

#include <opencl_limits>
using namespace cl;

kernel void worker()
{
    static_assert(is_vector_type<decltype(numeric_limits<int2>::min())>::value == true, "<int2>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<int2>::max())>::value == true, "<int2>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<int2>::lowest())>::value == true, "<int2>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<int3>::min())>::value == true, "<int3>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<int3>::max())>::value == true, "<int3>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<int3>::lowest())>::value == true, "<int3>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<int4>::min())>::value == true, "<int4>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<int4>::max())>::value == true, "<int4>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<int4>::lowest())>::value == true, "<int4>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<char2>::min())>::value == true, "<char2>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<char2>::max())>::value == true, "<char2>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<char2>::lowest())>::value == true, "<char2>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<char3>::min())>::value == true, "<char3>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<char3>::max())>::value == true, "<char3>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<char3>::lowest())>::value == true, "<char3>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<char4>::min())>::value == true, "<char4>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<char4>::max())>::value == true, "<char4>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<char4>::lowest())>::value == true, "<char4>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<short2>::min())>::value == true, "<short2>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<short2>::max())>::value == true, "<short2>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<short2>::lowest())>::value == true, "<short2>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<short3>::min())>::value == true, "<short3>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<short3>::max())>::value == true, "<short3>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<short3>::lowest())>::value == true, "<short3>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<short4>::min())>::value == true, "<short4>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<short4>::max())>::value == true, "<short4>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<short4>::lowest())>::value == true, "<short4>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<long2>::min())>::value == true, "<long2>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<long2>::max())>::value == true, "<long2>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<long2>::lowest())>::value == true, "<long2>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<long3>::min())>::value == true, "<long3>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<long3>::max())>::value == true, "<long3>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<long3>::lowest())>::value == true, "<long3>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<long4>::min())>::value == true, "<long4>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<long4>::max())>::value == true, "<long4>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<long4>::lowest())>::value == true, "<long4>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uint2>::min())>::value == true, "<uint2>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uint2>::max())>::value == true, "<uint2>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uint2>::lowest())>::value == true, "<uint2>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uint3>::min())>::value == true, "<uint3>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uint3>::max())>::value == true, "<uint3>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uint3>::lowest())>::value == true, "<uint3>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uint4>::min())>::value == true, "<uint4>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uint4>::max())>::value == true, "<uint4>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uint4>::lowest())>::value == true, "<uint4>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uchar2>::min())>::value == true, "<uchar2>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uchar2>::max())>::value == true, "<uchar2>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uchar2>::lowest())>::value == true, "<uchar2>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uchar3>::min())>::value == true, "<uchar3>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uchar3>::max())>::value == true, "<uchar3>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uchar3>::lowest())>::value == true, "<uchar3>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uchar4>::min())>::value == true, "<uchar4>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uchar4>::max())>::value == true, "<uchar4>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<uchar4>::lowest())>::value == true, "<uchar4>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ushort2>::min())>::value == true, "<ushort2>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ushort2>::max())>::value == true, "<ushort2>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ushort2>::lowest())>::value == true, "<ushort2>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ushort3>::min())>::value == true, "<ushort3>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ushort3>::max())>::value == true, "<ushort3>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ushort3>::lowest())>::value == true, "<ushort3>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ushort4>::min())>::value == true, "<ushort4>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ushort4>::max())>::value == true, "<ushort4>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ushort4>::lowest())>::value == true, "<ushort4>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ulong2>::min())>::value == true, "<ulong2>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ulong2>::max())>::value == true, "<ulong2>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ulong2>::lowest())>::value == true, "<ulong2>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ulong3>::min())>::value == true, "<ulong3>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ulong3>::max())>::value == true, "<ulong3>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ulong3>::lowest())>::value == true, "<ulong3>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ulong4>::min())>::value == true, "<ulong4>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ulong4>::max())>::value == true, "<ulong4>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<ulong4>::lowest())>::value == true, "<ulong4>::lowest() should return vector");

    static_assert(is_vector_type<decltype(numeric_limits<half2>::min())>::value == true, "<half2>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half2>::max())>::value == true, "<half2>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half2>::lowest())>::value == true, "<half2>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half2>::epsilon())>::value == true, "<half2>::epsilon() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half2>::infinity())>::value == true, "<half2>::infinity() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half2>::quiet_NaN())>::value == true, "<half2>::quiet_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half2>::signaling_NaN())>::value == true, "<half2>::signaling_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half2>::denorm_min())>::value == true, "<half2>::denorm_min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half3>::min())>::value == true, "<half3>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half3>::max())>::value == true, "<half3>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half3>::lowest())>::value == true, "<half3>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half3>::epsilon())>::value == true, "<half3>::epsilon() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half3>::infinity())>::value == true, "<half3>::infinity() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half3>::quiet_NaN())>::value == true, "<half3>::quiet_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half3>::signaling_NaN())>::value == true, "<half3>::signaling_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half3>::denorm_min())>::value == true, "<half3>::denorm_min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half4>::min())>::value == true, "<half4>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half4>::max())>::value == true, "<half4>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half4>::lowest())>::value == true, "<half4>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half4>::epsilon())>::value == true, "<half4>::epsilon() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half4>::infinity())>::value == true, "<half4>::infinity() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half4>::quiet_NaN())>::value == true, "<half4>::quiet_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half4>::signaling_NaN())>::value == true, "<half4>::signaling_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<half4>::denorm_min())>::value == true, "<half4>::denorm_min() should return vector");

    static_assert(is_vector_type<decltype(numeric_limits<float2>::min())>::value == true, "<float2>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float2>::max())>::value == true, "<float2>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float2>::lowest())>::value == true, "<float2>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float2>::epsilon())>::value == true, "<float2>::epsilon() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float2>::infinity())>::value == true, "<float2>::infinity() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float2>::quiet_NaN())>::value == true, "<float2>::quiet_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float2>::signaling_NaN())>::value == true, "<float2>::signaling_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float2>::denorm_min())>::value == true, "<float2>::denorm_min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float3>::min())>::value == true, "<float3>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float3>::max())>::value == true, "<float3>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float3>::lowest())>::value == true, "<float3>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float3>::epsilon())>::value == true, "<float3>::epsilon() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float3>::infinity())>::value == true, "<float3>::infinity() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float3>::quiet_NaN())>::value == true, "<float3>::quiet_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float3>::signaling_NaN())>::value == true, "<float3>::signaling_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float3>::denorm_min())>::value == true, "<float3>::denorm_min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float4>::min())>::value == true, "<float4>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float4>::max())>::value == true, "<float4>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float4>::lowest())>::value == true, "<float4>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float4>::epsilon())>::value == true, "<float4>::epsilon() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float4>::infinity())>::value == true, "<float4>::infinity() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float4>::quiet_NaN())>::value == true, "<float4>::quiet_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float4>::signaling_NaN())>::value == true, "<float4>::signaling_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<float4>::denorm_min())>::value == true, "<float4>::denorm_min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double2>::min())>::value == true, "<double2>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double2>::max())>::value == true, "<double2>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double2>::lowest())>::value == true, "<double2>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double2>::epsilon())>::value == true, "<double2>::epsilon() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double2>::infinity())>::value == true, "<double2>::infinity() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double2>::quiet_NaN())>::value == true, "<double2>::quiet_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double2>::signaling_NaN())>::value == true, "<double2>::signaling_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double2>::denorm_min())>::value == true, "<double2>::denorm_min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double3>::min())>::value == true, "<double3>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double3>::max())>::value == true, "<double3>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double3>::lowest())>::value == true, "<double3>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double3>::epsilon())>::value == true, "<double3>::epsilon() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double3>::infinity())>::value == true, "<double3>::infinity() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double3>::quiet_NaN())>::value == true, "<double3>::quiet_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double3>::signaling_NaN())>::value == true, "<double3>::signaling_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double3>::denorm_min())>::value == true, "<double3>::denorm_min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double4>::min())>::value == true, "<double4>::min() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double4>::max())>::value == true, "<double4>::max() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double4>::lowest())>::value == true, "<double4>::lowest() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double4>::epsilon())>::value == true, "<double4>::epsilon() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double4>::infinity())>::value == true, "<double4>::infinity() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double4>::quiet_NaN())>::value == true, "<double4>::quiet_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double4>::signaling_NaN())>::value == true, "<double4>::signaling_NaN() should return vector");
    static_assert(is_vector_type<decltype(numeric_limits<double4>::denorm_min())>::value == true, "<double4>::denorm_min() should return vector");
}